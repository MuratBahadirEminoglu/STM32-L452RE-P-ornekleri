
HAL_GPIO_Potansiyometre_ile_led_parlaklik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dcc  08005dcc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd4  08005dd4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  08005e38  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005e38  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115d3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002094  00000000  00000000  000316a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00033738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cda  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239e3  00000000  00000000  00035482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012750  00000000  00000000  00058e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a5f  00000000  00000000  0006b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ba0  00000000  00000000  00152014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00156bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d30 	.word	0x08005d30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005d30 	.word	0x08005d30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t oku = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fc27 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f83f 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f9cf 	bl	8000930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f99d 	bl	80008d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000596:	f000 f88b 	bl	80006b0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800059a:	f000 f8ed 	bl	8000778 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800059e:	2100      	movs	r1, #0
 80005a0:	4815      	ldr	r0, [pc, #84]	; (80005f8 <main+0x7c>)
 80005a2:	f003 fff5 	bl	8004590 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80005a6:	4815      	ldr	r0, [pc, #84]	; (80005fc <main+0x80>)
 80005a8:	f000 ffd6 	bl	8001558 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1,10) == HAL_OK){
 80005ac:	210a      	movs	r1, #10
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <main+0x80>)
 80005b0:	f001 f835 	bl	800161e <HAL_ADC_PollForConversion>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d111      	bne.n	80005de <main+0x62>
		  oku = HAL_ADC_GetValue(&hadc1);
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0x80>)
 80005bc:	f001 f8be 	bl	800173c <HAL_ADC_GetValue>
 80005c0:	60f8      	str	r0, [r7, #12]
		  uint16_t boyut = sprintf(karakter, "%d\r\n",oku);
 80005c2:	463b      	mov	r3, r7
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <main+0x84>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 ff0d 	bl	80053e8 <siprintf>
 80005ce:	4603      	mov	r3, r0
 80005d0:	817b      	strh	r3, [r7, #10]
		  HAL_UART_Transmit(&huart2,karakter,boyut,100);
 80005d2:	897a      	ldrh	r2, [r7, #10]
 80005d4:	4639      	mov	r1, r7
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <main+0x88>)
 80005da:	f004 f9d8 	bl	800498e <HAL_UART_Transmit>

	  }
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,oku/10);
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <main+0x7c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <main+0x8c>)
 80005e6:	fba1 1202 	umull	r1, r2, r1, r2
 80005ea:	08d2      	lsrs	r2, r2, #3
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5);
 80005ee:	2005      	movs	r0, #5
 80005f0:	f000 fc6e 	bl	8000ed0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005f4:	e7d7      	b.n	80005a6 <main+0x2a>
 80005f6:	bf00      	nop
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	20000078 	.word	0x20000078
 8000600:	08005d48 	.word	0x08005d48
 8000604:	2000012c 	.word	0x2000012c
 8000608:	cccccccd 	.word	0xcccccccd

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 ff04 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f001 ff99 	bl	8002568 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f9ec 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f001 ffd0 	bl	8002614 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f9cd 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fbd0 	bl	8002e3c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f9b9 	bl	8000a18 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC1_Init+0xbc>)
 80006c8:	4a29      	ldr	r2, [pc, #164]	; (8000770 <MX_ADC1_Init+0xc0>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_ADC1_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC1_Init+0xbc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC1_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_ADC1_Init+0xbc>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC1_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_ADC1_Init+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC1_Init+0xbc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_ADC1_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ADC1_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_ADC1_Init+0xbc>)
 800070c:	2200      	movs	r2, #0
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_ADC1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ADC1_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_ADC1_Init+0xbc>)
 8000728:	f000 fdd0 	bl	80012cc <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000732:	f000 f971 	bl	8000a18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC1_Init+0xc4>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073a:	2306      	movs	r3, #6
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000742:	237f      	movs	r3, #127	; 0x7f
 8000744:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000746:	2304      	movs	r3, #4
 8000748:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_ADC1_Init+0xbc>)
 8000754:	f001 f800 	bl	8001758 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800075e:	f000 f95b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000078 	.word	0x20000078
 8000770:	50040000 	.word	0x50040000
 8000774:	14f00020 	.word	0x14f00020

08000778 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	; 0x68
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	222c      	movs	r2, #44	; 0x2c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fe38 	bl	8005428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b8:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007ba:	4a44      	ldr	r2, [pc, #272]	; (80008cc <MX_TIM1_Init+0x154>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40;
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007c0:	2228      	movs	r2, #40	; 0x28
 80007c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 400;
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e4:	4838      	ldr	r0, [pc, #224]	; (80008c8 <MX_TIM1_Init+0x150>)
 80007e6:	f003 f8ab 	bl	8003940 <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 f912 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007fe:	4619      	mov	r1, r3
 8000800:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_TIM1_Init+0x150>)
 8000802:	f003 fa69 	bl	8003cd8 <HAL_TIM_ConfigClockSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800080c:	f000 f904 	bl	8000a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000810:	482d      	ldr	r0, [pc, #180]	; (80008c8 <MX_TIM1_Init+0x150>)
 8000812:	f003 f8ec 	bl	80039ee <HAL_TIM_PWM_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800081c:	f000 f8fc 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000830:	4619      	mov	r1, r3
 8000832:	4825      	ldr	r0, [pc, #148]	; (80008c8 <MX_TIM1_Init+0x150>)
 8000834:	f003 ff52 	bl	80046dc <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800083e:	f000 f8eb 	bl	8000a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000842:	2360      	movs	r3, #96	; 0x60
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084a:	2300      	movs	r3, #0
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <MX_TIM1_Init+0x150>)
 8000868:	f003 f922 	bl	8003ab0 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000872:	f000 f8d1 	bl	8000a18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM1_Init+0x150>)
 80008ac:	f003 ff84 	bl	80047b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008b6:	f000 f8af 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM1_Init+0x150>)
 80008bc:	f000 f95c 	bl	8000b78 <HAL_TIM_MspPostInit>

}
 80008c0:	bf00      	nop
 80008c2:	3768      	adds	r7, #104	; 0x68
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000e0 	.word	0x200000e0
 80008cc:	40012c00 	.word	0x40012c00

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART2_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART2_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_USART2_UART_Init+0x58>)
 8000914:	f003 ffed 	bl	80048f2 <HAL_UART_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f000 f87b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000012c 	.word	0x2000012c
 800092c:	40004400 	.word	0x40004400

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <MX_GPIO_Init+0xe0>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_GPIO_Init+0xe0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a25      	ldr	r2, [pc, #148]	; (8000a10 <MX_GPIO_Init+0xe0>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <MX_GPIO_Init+0xe0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_GPIO_Init+0xe0>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	21b0      	movs	r1, #176	; 0xb0
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f001 fdb5 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_GPIO_Init+0xe4>)
 80009ca:	f001 fc2d 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80009ce:	23b0      	movs	r3, #176	; 0xb0
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f001 fc1e 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a02:	f001 fc11 	bl	8002228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000800 	.word	0x48000800

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0a4      	sub	sp, #144	; 0x90
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2268      	movs	r2, #104	; 0x68
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fccb 	bl	8005428 <memset>
  if(hadc->Instance==ADC1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <HAL_ADC_MspInit+0xc4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d145      	bne.n	8000b28 <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000aa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aa6:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fbda 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000ad6:	f7ff ff9f 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_ADC_MspInit+0xc8>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0e:	230b      	movs	r3, #11
 8000b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f001 fb80 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3790      	adds	r7, #144	; 0x90
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	50040000 	.word	0x50040000
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <HAL_TIM_Base_MspInit+0x38>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d10b      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <HAL_TIM_Base_MspInit+0x3c>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_TIM_MspPostInit+0x64>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d11c      	bne.n	8000bd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_TIM_MspPostInit+0x68>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <HAL_TIM_MspPostInit+0x68>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_TIM_MspPostInit+0x68>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_TIM_MspPostInit+0x6c>)
 8000bd0:	f001 fb2a 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40012c00 	.word	0x40012c00
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a4      	sub	sp, #144	; 0x90
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2268      	movs	r2, #104	; 0x68
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fc0d 	bl	8005428 <memset>
  if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_UART_MspInit+0xb0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d13a      	bne.n	8000c8e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fb2d 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c30:	f7ff fef2 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f001 facd 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3790      	adds	r7, #144	; 0x90
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8d0 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f004 fb88 	bl	8005438 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20028000 	.word	0x20028000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200001b4 	.word	0x200001b4
 8000d5c:	20000308 	.word	0x20000308

08000d60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f004 fb47 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fbe1 	bl	800057c <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dc8:	08005ddc 	.word	0x08005ddc
  ldr r2, =_sbss
 8000dcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dd0:	20000304 	.word	0x20000304

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_Init+0x3c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_Init+0x3c>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f001 f9e6 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f80f 	bl	8000e18 <HAL_InitTick>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	e001      	b.n	8000e0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e06:	f7ff fe0d 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d023      	beq.n	8000e74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_InitTick+0x70>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_InitTick+0x6c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 f9e3 	bl	800220e <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10f      	bne.n	8000e6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d809      	bhi.n	8000e68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f001 f9bb 	bl	80021d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_InitTick+0x74>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e007      	b.n	8000e78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e004      	b.n	8000e78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e001      	b.n	8000e78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200001b8 	.word	0x200001b8

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001b8 	.word	0x200001b8

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3360      	adds	r3, #96	; 0x60
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <LL_ADC_SetOffset+0x44>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	03fff000 	.word	0x03fff000

08000fc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3360      	adds	r3, #96	; 0x60
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3360      	adds	r3, #96	; 0x60
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800101e:	bf00      	nop
 8001020:	371c      	adds	r7, #28
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	615a      	str	r2, [r3, #20]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001076:	b480      	push	{r7}
 8001078:	b087      	sub	sp, #28
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3330      	adds	r3, #48	; 0x30
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	4413      	add	r3, r2
 8001094:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	211f      	movs	r1, #31
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	0e9b      	lsrs	r3, r3, #26
 80010ae:	f003 011f 	and.w	r1, r3, #31
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	431a      	orrs	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b087      	sub	sp, #28
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3314      	adds	r3, #20
 80010de:	461a      	mov	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	0e5b      	lsrs	r3, r3, #25
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	0d1b      	lsrs	r3, r3, #20
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	2107      	movs	r1, #7
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	401a      	ands	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	0d1b      	lsrs	r3, r3, #20
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	431a      	orrs	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001118:	bf00      	nop
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0318 	and.w	r3, r3, #24
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001148:	40d9      	lsrs	r1, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	400b      	ands	r3, r1
 800114e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	0007ffff 	.word	0x0007ffff

0800116c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800117c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6093      	str	r3, [r2, #8]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011a4:	d101      	bne.n	80011aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011f4:	d101      	bne.n	80011fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <LL_ADC_IsEnabled+0x18>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <LL_ADC_IsEnabled+0x1a>
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001266:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126a:	f043 0204 	orr.w	r2, r3, #4
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b04      	cmp	r3, #4
 8001290:	d101      	bne.n	8001296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d101      	bne.n	80012bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e129      	b.n	800153a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d109      	bne.n	8001308 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fbb9 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff3f 	bl	8001190 <LL_ADC_IsDeepPowerDownEnabled>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff25 	bl	800116c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff5a 	bl	80011e0 <LL_ADC_IsInternalRegulatorEnabled>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d115      	bne.n	800135e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff3e 	bl	80011b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_ADC_Init+0x278>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	4a81      	ldr	r2, [pc, #516]	; (8001548 <HAL_ADC_Init+0x27c>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	3301      	adds	r3, #1
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001350:	e002      	b.n	8001358 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3b01      	subs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff3c 	bl	80011e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10d      	bne.n	800138a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f043 0210 	orr.w	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff75 	bl	800127e <LL_ADC_REG_IsConversionOngoing>
 8001394:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 80c2 	bne.w	8001528 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 80be 	bne.w	8001528 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013b4:	f043 0202 	orr.w	r2, r3, #2
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff35 	bl	8001230 <LL_ADC_IsEnabled>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10b      	bne.n	80013e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013cc:	485f      	ldr	r0, [pc, #380]	; (800154c <HAL_ADC_Init+0x280>)
 80013ce:	f7ff ff2f 	bl	8001230 <LL_ADC_IsEnabled>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4619      	mov	r1, r3
 80013de:	485c      	ldr	r0, [pc, #368]	; (8001550 <HAL_ADC_Init+0x284>)
 80013e0:	f7ff fd9a 	bl	8000f18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e5b      	ldrb	r3, [r3, #25]
 80013e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d106      	bne.n	8001420 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	3b01      	subs	r3, #1
 8001418:	045b      	lsls	r3, r3, #17
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d009      	beq.n	800143c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_ADC_Init+0x288>)
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	430b      	orrs	r3, r1
 800144e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff25 	bl	80012a4 <LL_ADC_INJ_IsConversionOngoing>
 800145a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d140      	bne.n	80014e4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d13d      	bne.n	80014e4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e1b      	ldrb	r3, [r3, #24]
 8001470:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001472:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800147a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800148a:	f023 0306 	bic.w	r3, r3, #6
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	430b      	orrs	r3, r1
 8001496:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d118      	bne.n	80014d4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014b8:	4311      	orrs	r1, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014be:	4311      	orrs	r1, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014c4:	430a      	orrs	r2, r1
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	e007      	b.n	80014e4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10c      	bne.n	8001506 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f023 010f 	bic.w	r1, r3, #15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	1e5a      	subs	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
 8001504:	e007      	b.n	8001516 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020f 	bic.w	r2, r2, #15
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	659a      	str	r2, [r3, #88]	; 0x58
 8001526:	e007      	b.n	8001538 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	f043 0210 	orr.w	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001538:	7ffb      	ldrb	r3, [r7, #31]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000
 8001548:	053e2d63 	.word	0x053e2d63
 800154c:	50040000 	.word	0x50040000
 8001550:	50040300 	.word	0x50040300
 8001554:	fff0c007 	.word	0xfff0c007

08001558 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fe8a 	bl	800127e <LL_ADC_REG_IsConversionOngoing>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d14f      	bne.n	8001610 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_Start+0x26>
 800157a:	2302      	movs	r3, #2
 800157c:	e04b      	b.n	8001616 <HAL_ADC_Start+0xbe>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fce2 	bl	8001f50 <ADC_Enable>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d137      	bne.n	8001606 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b6:	d106      	bne.n	80015c6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	f023 0206 	bic.w	r2, r3, #6
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80015c4:	e002      	b.n	80015cc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	221c      	movs	r2, #28
 80015d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fe29 	bl	8001256 <LL_ADC_REG_StartConversion>
 8001604:	e006      	b.n	8001614 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800160e:	e001      	b.n	8001614 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001610:	2302      	movs	r3, #2
 8001612:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d102      	bne.n	8001636 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001630:	2308      	movs	r3, #8
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e010      	b.n	8001658 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001648:	f043 0220 	orr.w	r2, r3, #32
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e06f      	b.n	8001734 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001654:	2304      	movs	r3, #4
 8001656:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001658:	f7ff fc2e 	bl	8000eb8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800165e:	e021      	b.n	80016a4 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001666:	d01d      	beq.n	80016a4 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001668:	f7ff fc26 	bl	8000eb8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d302      	bcc.n	800167e <HAL_ADC_PollForConversion+0x60>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d112      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10b      	bne.n	80016a4 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f043 0204 	orr.w	r2, r3, #4
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e047      	b.n	8001734 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0d6      	beq.n	8001660 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fcc4 	bl	8001050 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01c      	beq.n	8001708 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e5b      	ldrb	r3, [r3, #25]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d111      	bne.n	8001708 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f043 0201 	orr.w	r2, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b08      	cmp	r3, #8
 8001714:	d104      	bne.n	8001720 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2208      	movs	r2, #8
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e008      	b.n	8001732 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0b6      	sub	sp, #216	; 0xd8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_ConfigChannel+0x22>
 8001776:	2302      	movs	r3, #2
 8001778:	e3d5      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x7ce>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fd79 	bl	800127e <LL_ADC_REG_IsConversionOngoing>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 83ba 	bne.w	8001f08 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d824      	bhi.n	80017ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	3b02      	subs	r3, #2
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d81b      	bhi.n	80017e6 <HAL_ADC_ConfigChannel+0x8e>
 80017ae:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <HAL_ADC_ConfigChannel+0x5c>)
 80017b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017d5 	.word	0x080017d5
 80017c0:	080017dd 	.word	0x080017dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80017c4:	230c      	movs	r3, #12
 80017c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017ca:	e010      	b.n	80017ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017cc:	2312      	movs	r3, #18
 80017ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017d2:	e00c      	b.n	80017ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017d4:	2318      	movs	r3, #24
 80017d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017da:	e008      	b.n	80017ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017e4:	e003      	b.n	80017ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017e6:	2306      	movs	r3, #6
 80017e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80017fc:	f7ff fc3b 	bl	8001076 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fd3a 	bl	800127e <LL_ADC_REG_IsConversionOngoing>
 800180a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd46 	bl	80012a4 <LL_ADC_INJ_IsConversionOngoing>
 8001818:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800181c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 81bf 	bne.w	8001ba4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 81ba 	bne.w	8001ba4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001838:	d10f      	bne.n	800185a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff fc42 	bl	80010ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fbe9 	bl	800102a <LL_ADC_SetSamplingTimeCommonConfig>
 8001858:	e00e      	b.n	8001878 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	461a      	mov	r2, r3
 8001868:	f7ff fc31 	bl	80010ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbd9 	bl	800102a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	08db      	lsrs	r3, r3, #3
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b04      	cmp	r3, #4
 8001898:	d00a      	beq.n	80018b0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018aa:	f7ff fb69 	bl	8000f80 <LL_ADC_SetOffset>
 80018ae:	e179      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb86 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x184>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb7b 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	0e9b      	lsrs	r3, r3, #26
 80018d6:	f003 021f 	and.w	r2, r3, #31
 80018da:	e01e      	b.n	800191a <HAL_ADC_ConfigChannel+0x1c2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fb70 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800190a:	2320      	movs	r3, #32
 800190c:	e004      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800190e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x1da>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	f003 031f 	and.w	r3, r3, #31
 8001930:	e018      	b.n	8001964 <HAL_ADC_ConfigChannel+0x20c>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800194e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001956:	2320      	movs	r3, #32
 8001958:	e004      	b.n	8001964 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800195a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001964:	429a      	cmp	r2, r3
 8001966:	d106      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fb3f 	bl	8000ff4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2101      	movs	r1, #1
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb23 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10a      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x24a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fb18 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	0e9b      	lsrs	r3, r3, #26
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	e01e      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x288>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb0d 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80019c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80019c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e004      	b.n	80019de <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80019d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x2a0>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	e018      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x2d2>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001a0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	e004      	b.n	8001a2a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d106      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	2101      	movs	r1, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fadc 	bl	8000ff4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fac0 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x310>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2102      	movs	r1, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fab5 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	0e9b      	lsrs	r3, r3, #26
 8001a62:	f003 021f 	and.w	r2, r3, #31
 8001a66:	e01e      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x34e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff faaa 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001a96:	2320      	movs	r3, #32
 8001a98:	e004      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x366>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0e9b      	lsrs	r3, r3, #26
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	e014      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x390>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ada:	2320      	movs	r3, #32
 8001adc:	e004      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d106      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2200      	movs	r2, #0
 8001af2:	2102      	movs	r1, #2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa7d 	bl	8000ff4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2103      	movs	r1, #3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fa61 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x3ce>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2103      	movs	r1, #3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fa56 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	0e9b      	lsrs	r3, r3, #26
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	e017      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x3fe>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fa4b 	bl	8000fc8 <LL_ADC_GetOffsetChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b40:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	e003      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x416>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0e9b      	lsrs	r3, r3, #26
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	e011      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x43a>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b7e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d106      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fa28 	bl	8000ff4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fb41 	bl	8001230 <LL_ADC_IsEnabled>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 813f 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7ff faae 	bl	8001124 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a8e      	ldr	r2, [pc, #568]	; (8001e08 <HAL_ADC_ConfigChannel+0x6b0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f040 8130 	bne.w	8001e34 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10b      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x4a4>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0e9b      	lsrs	r3, r3, #26
 8001bea:	3301      	adds	r3, #1
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	bf94      	ite	ls
 8001bf4:	2301      	movls	r3, #1
 8001bf6:	2300      	movhi	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e019      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4d8>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e003      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	bf94      	ite	ls
 8001c2a:	2301      	movls	r3, #1
 8001c2c:	2300      	movhi	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d079      	beq.n	8001d28 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x4f8>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	3301      	adds	r3, #1
 8001c48:	069b      	lsls	r3, r3, #26
 8001c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c4e:	e015      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x524>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e003      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	069b      	lsls	r3, r3, #26
 8001c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x544>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2101      	movs	r1, #1
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	e017      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x574>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	e003      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	ea42 0103 	orr.w	r1, r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10a      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x59a>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0e9b      	lsrs	r3, r3, #26
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	051b      	lsls	r3, r3, #20
 8001cf0:	e018      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x5cc>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	430b      	orrs	r3, r1
 8001d26:	e080      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x5ec>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	069b      	lsls	r3, r3, #26
 8001d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d42:	e015      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x618>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x638>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	e017      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x668>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e003      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	ea42 0103 	orr.w	r1, r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x694>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e9b      	lsrs	r3, r3, #26
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	3b1e      	subs	r3, #30
 8001de4:	051b      	lsls	r3, r3, #20
 8001de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dea:	e01d      	b.n	8001e28 <HAL_ADC_ConfigChannel+0x6d0>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	60fb      	str	r3, [r7, #12]
  return result;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e005      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x6bc>
 8001e08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 021f 	and.w	r2, r3, #31
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b1e      	subs	r3, #30
 8001e22:	051b      	lsls	r3, r3, #20
 8001e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7ff f94d 	bl	80010ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d06c      	beq.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e40:	483c      	ldr	r0, [pc, #240]	; (8001f34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e42:	f7ff f88f 	bl	8000f64 <LL_ADC_GetCommonPathInternalCh>
 8001e46:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d127      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d121      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a35      	ldr	r2, [pc, #212]	; (8001f3c <HAL_ADC_ConfigChannel+0x7e4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d157      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e72:	4619      	mov	r1, r3
 8001e74:	482f      	ldr	r0, [pc, #188]	; (8001f34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e76:	f7ff f862 	bl	8000f3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	4a30      	ldr	r2, [pc, #192]	; (8001f44 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	099b      	lsrs	r3, r3, #6
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea2:	e03a      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <HAL_ADC_ConfigChannel+0x7f0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d113      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_ADC_ConfigChannel+0x7e4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d12a      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4819      	ldr	r0, [pc, #100]	; (8001f34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ed0:	f7ff f835 	bl	8000f3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed4:	e021      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_ADC_ConfigChannel+0x7f4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d11c      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d116      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <HAL_ADC_ConfigChannel+0x7e4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d111      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f02:	f7ff f81c 	bl	8000f3e <LL_ADC_SetCommonPathInternalCh>
 8001f06:	e008      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	37d8      	adds	r7, #216	; 0xd8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	80080000 	.word	0x80080000
 8001f34:	50040300 	.word	0x50040300
 8001f38:	c7520000 	.word	0xc7520000
 8001f3c:	50040000 	.word	0x50040000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	053e2d63 	.word	0x053e2d63
 8001f48:	cb840000 	.word	0xcb840000
 8001f4c:	80000001 	.word	0x80000001

08001f50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f965 	bl	8001230 <LL_ADC_IsEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d169      	bne.n	8002040 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <ADC_Enable+0xfc>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00d      	beq.n	8001f96 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e055      	b.n	8002042 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f934 	bl	8001208 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fa0:	482b      	ldr	r0, [pc, #172]	; (8002050 <ADC_Enable+0x100>)
 8001fa2:	f7fe ffdf 	bl	8000f64 <LL_ADC_GetCommonPathInternalCh>
 8001fa6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <ADC_Enable+0x104>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	099b      	lsrs	r3, r3, #6
 8001fb6:	4a28      	ldr	r2, [pc, #160]	; (8002058 <ADC_Enable+0x108>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fca:	e002      	b.n	8001fd2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe ff6e 	bl	8000eb8 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fde:	e028      	b.n	8002032 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f923 	bl	8001230 <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f907 	bl	8001208 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ffa:	f7fe ff5d 	bl	8000eb8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d914      	bls.n	8002032 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d00d      	beq.n	8002032 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e007      	b.n	8002042 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d1cf      	bne.n	8001fe0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	8000003f 	.word	0x8000003f
 8002050:	50040300 	.word	0x50040300
 8002054:	20000000 	.word	0x20000000
 8002058:	053e2d63 	.word	0x053e2d63

0800205c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002078:	4013      	ands	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	60d3      	str	r3, [r2, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <__NVIC_GetPriorityGrouping+0x18>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	f003 0307 	and.w	r3, r3, #7
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff47 	bl	800205c <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff5c 	bl	80020a4 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff8e 	bl	8002114 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5d 	bl	80020c0 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffb0 	bl	800217c <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e154      	b.n	80024e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8146 	beq.w	80024dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d005      	beq.n	8002268 <HAL_GPIO_Init+0x40>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d130      	bne.n	80022ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800229e:	2201      	movs	r2, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 0201 	and.w	r2, r3, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d017      	beq.n	8002306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d123      	bne.n	800235a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	08da      	lsrs	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3208      	adds	r2, #8
 8002354:	6939      	ldr	r1, [r7, #16]
 8002356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80a0 	beq.w	80024dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HAL_GPIO_Init+0x2d8>)
 800239e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <HAL_GPIO_Init+0x2d8>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6613      	str	r3, [r2, #96]	; 0x60
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <HAL_GPIO_Init+0x2d8>)
 80023aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b4:	4a53      	ldr	r2, [pc, #332]	; (8002504 <HAL_GPIO_Init+0x2dc>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023de:	d019      	beq.n	8002414 <HAL_GPIO_Init+0x1ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a49      	ldr	r2, [pc, #292]	; (8002508 <HAL_GPIO_Init+0x2e0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1e8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a48      	ldr	r2, [pc, #288]	; (800250c <HAL_GPIO_Init+0x2e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1e4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a47      	ldr	r2, [pc, #284]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1e0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a46      	ldr	r2, [pc, #280]	; (8002514 <HAL_GPIO_Init+0x2ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1dc>
 8002400:	2304      	movs	r3, #4
 8002402:	e008      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002404:	2307      	movs	r3, #7
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002408:	2303      	movs	r3, #3
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 800240c:	2302      	movs	r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1ee>
 8002414:	2300      	movs	r3, #0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002426:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_GPIO_Init+0x2dc>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002434:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002458:	4a2f      	ldr	r2, [pc, #188]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800245e:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002482:	4a25      	ldr	r2, [pc, #148]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f aea3 	bne.w	8002238 <HAL_GPIO_Init+0x10>
  }
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800
 8002510:	48000c00 	.word	0x48000c00
 8002514:	48001000 	.word	0x48001000
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002538:	e002      	b.n	8002540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <HAL_PWREx_GetVoltageRange+0x18>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40007000 	.word	0x40007000

08002568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002576:	d130      	bne.n	80025da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002578:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d038      	beq.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2232      	movs	r2, #50	; 0x32
 800259c:	fb02 f303 	mul.w	r3, r2, r3
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ac:	e002      	b.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	d102      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f2      	bne.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d4:	d110      	bne.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e00f      	b.n	80025fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d007      	beq.n	80025f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f000 bc02 	b.w	8002e2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002628:	4b96      	ldr	r3, [pc, #600]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002632:	4b94      	ldr	r3, [pc, #592]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80e4 	beq.w	8002812 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_RCC_OscConfig+0x4c>
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	f040 808b 	bne.w	800276e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b01      	cmp	r3, #1
 800265c:	f040 8087 	bne.w	800276e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002660:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x64>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e3d9      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1a      	ldr	r2, [r3, #32]
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_RCC_OscConfig+0x7e>
 8002688:	4b7e      	ldr	r3, [pc, #504]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002690:	e005      	b.n	800269e <HAL_RCC_OscConfig+0x8a>
 8002692:	4b7c      	ldr	r3, [pc, #496]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269e:	4293      	cmp	r3, r2
 80026a0:	d223      	bcs.n	80026ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd8c 	bl	80031c4 <RCC_SetFlashLatencyFromMSIRange>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e3ba      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b6:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026bc:	f043 0308 	orr.w	r3, r3, #8
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	496d      	ldr	r1, [pc, #436]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	4968      	ldr	r1, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e025      	b.n	8002736 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a65      	ldr	r2, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4960      	ldr	r1, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	495b      	ldr	r1, [pc, #364]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fd4c 	bl	80031c4 <RCC_SetFlashLatencyFromMSIRange>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e37a      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002736:	f000 fc81 	bl	800303c <HAL_RCC_GetSysClockFreq>
 800273a:	4602      	mov	r2, r0
 800273c:	4b51      	ldr	r3, [pc, #324]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4950      	ldr	r1, [pc, #320]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002748:	5ccb      	ldrb	r3, [r1, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_RCC_OscConfig+0x278>)
 8002754:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002756:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <HAL_RCC_OscConfig+0x27c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fb5c 	bl	8000e18 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d052      	beq.n	8002810 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	e35e      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d032      	beq.n	80027dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a42      	ldr	r2, [pc, #264]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002782:	f7fe fb99 	bl	8000eb8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800278a:	f7fe fb95 	bl	8000eb8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e347      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a35      	ldr	r2, [pc, #212]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027ae:	f043 0308 	orr.w	r3, r3, #8
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4930      	ldr	r1, [pc, #192]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c6:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	492b      	ldr	r1, [pc, #172]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
 80027da:	e01a      	b.n	8002812 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fb66 	bl	8000eb8 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f0:	f7fe fb62 	bl	8000eb8 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e314      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1dc>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d073      	beq.n	8002906 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x21c>
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d10e      	bne.n	8002848 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d063      	beq.n	8002904 <HAL_RCC_OscConfig+0x2f0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d15f      	bne.n	8002904 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e2f1      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x24c>
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e025      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d114      	bne.n	8002894 <HAL_RCC_OscConfig+0x280>
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a02      	ldr	r2, [pc, #8]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e013      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
 8002884:	40021000 	.word	0x40021000
 8002888:	08005d50 	.word	0x08005d50
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004
 8002894:	4ba0      	ldr	r3, [pc, #640]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a9f      	ldr	r2, [pc, #636]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b9d      	ldr	r3, [pc, #628]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a9c      	ldr	r2, [pc, #624]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fb00 	bl	8000eb8 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fafc 	bl	8000eb8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e2ae      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ce:	4b92      	ldr	r3, [pc, #584]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x2a8>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe faec 	bl	8000eb8 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fae8 	bl	8000eb8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e29a      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f6:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2d0>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d060      	beq.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x310>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d119      	bne.n	8002952 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d116      	bne.n	8002952 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002924:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x328>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e277      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b76      	ldr	r3, [pc, #472]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	4973      	ldr	r1, [pc, #460]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002950:	e040      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d023      	beq.n	80029a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295a:	4b6f      	ldr	r3, [pc, #444]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6e      	ldr	r2, [pc, #440]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe faa7 	bl	8000eb8 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe faa3 	bl	8000eb8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e255      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002980:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	495f      	ldr	r1, [pc, #380]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e018      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fa83 	bl	8000eb8 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fa7f 	bl	8000eb8 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e231      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d03c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e8:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ee:	4a4a      	ldr	r2, [pc, #296]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fa5e 	bl	8000eb8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe fa5a 	bl	8000eb8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e20c      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x3ec>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe fa41 	bl	8000eb8 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe fa3d 	bl	8000eb8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1ef      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a6 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10d      	bne.n	8002a94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d118      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aac:	f7fe fa04 	bl	8000eb8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab4:	f7fe fa00 	bl	8000eb8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1b2      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_RCC_OscConfig+0x508>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_RCC_OscConfig+0x4d8>
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aea:	e029      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d115      	bne.n	8002b20 <HAL_RCC_OscConfig+0x50c>
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	4a03      	ldr	r2, [pc, #12]	; (8002b18 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b14:	e014      	b.n	8002b40 <HAL_RCC_OscConfig+0x52c>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	4b9a      	ldr	r3, [pc, #616]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	4a99      	ldr	r2, [pc, #612]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b30:	4b96      	ldr	r3, [pc, #600]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	4a95      	ldr	r2, [pc, #596]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d016      	beq.n	8002b76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b48:	f7fe f9b6 	bl	8000eb8 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe f9b2 	bl	8000eb8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e162      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ed      	beq.n	8002b50 <HAL_RCC_OscConfig+0x53c>
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7fe f99f 	bl	8000eb8 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe f99b 	bl	8000eb8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e14b      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b94:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ed      	bne.n	8002b7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba2:	7ffb      	ldrb	r3, [r7, #31]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d03c      	beq.n	8002c3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bce:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe f96e 	bl	8000eb8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be0:	f7fe f96a 	bl	8000eb8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e11c      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ef      	beq.n	8002be0 <HAL_RCC_OscConfig+0x5cc>
 8002c00:	e01b      	b.n	8002c3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c02:	4b62      	ldr	r3, [pc, #392]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c08:	4a60      	ldr	r2, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe f951 	bl	8000eb8 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1a:	f7fe f94d 	bl	8000eb8 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e0ff      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c2c:	4b57      	ldr	r3, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ef      	bne.n	8002c1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80f3 	beq.w	8002e2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	f040 80c9 	bne.w	8002de0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c4e:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d12c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d123      	bne.n	8002cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d11b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d113      	bne.n	8002cbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d06b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d062      	beq.n	8002d88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cc2:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0ac      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cde:	f7fe f8eb 	bl	8000eb8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe f8e7 	bl	8000eb8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e099      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_RCC_OscConfig+0x77c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d1e:	0212      	lsls	r2, r2, #8
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d26:	0852      	lsrs	r2, r2, #1
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0552      	lsls	r2, r2, #21
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d32:	0852      	lsrs	r2, r2, #1
 8002d34:	3a01      	subs	r2, #1
 8002d36:	0652      	lsls	r2, r2, #25
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d3e:	06d2      	lsls	r2, r2, #27
 8002d40:	430a      	orrs	r2, r1
 8002d42:	4912      	ldr	r1, [pc, #72]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a0c      	ldr	r2, [pc, #48]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d60:	f7fe f8aa 	bl	8000eb8 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe f8a6 	bl	8000eb8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e058      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <HAL_RCC_OscConfig+0x778>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d86:	e050      	b.n	8002e2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e04f      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d94:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d144      	bne.n	8002e2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002db8:	f7fe f87e 	bl	8000eb8 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe f87a 	bl	8000eb8 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e02c      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x7ac>
 8002dde:	e024      	b.n	8002e2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d01f      	beq.n	8002e26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe f861 	bl	8000eb8 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe f85d 	bl	8000eb8 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4905      	ldr	r1, [pc, #20]	; (8002e34 <HAL_RCC_OscConfig+0x820>)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x824>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	60cb      	str	r3, [r1, #12]
 8002e24:	e001      	b.n	8002e2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	feeefffc 	.word	0xfeeefffc

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0e7      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e50:	4b75      	ldr	r3, [pc, #468]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d910      	bls.n	8002e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5e:	4b72      	ldr	r3, [pc, #456]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0207 	bic.w	r2, r3, #7
 8002e66:	4970      	ldr	r1, [pc, #448]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b6e      	ldr	r3, [pc, #440]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cf      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d010      	beq.n	8002eae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d908      	bls.n	8002eae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4960      	ldr	r1, [pc, #384]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04c      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec2:	4b5a      	ldr	r3, [pc, #360]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d121      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0a6      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eda:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d115      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e09a      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e08e      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e086      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4943      	ldr	r1, [pc, #268]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fd ffc8 	bl	8000eb8 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fd ffc4 	bl	8000eb8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e06e      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d208      	bcs.n	8002f82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	492b      	ldr	r1, [pc, #172]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d210      	bcs.n	8002fb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 0207 	bic.w	r2, r3, #7
 8002f98:	4923      	ldr	r1, [pc, #140]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e036      	b.n	8003020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4918      	ldr	r1, [pc, #96]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4910      	ldr	r1, [pc, #64]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff0:	f000 f824 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	490b      	ldr	r1, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x1f4>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1f8>)
 800300e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1fc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd feff 	bl	8000e18 <HAL_InitTick>
 800301a:	4603      	mov	r3, r0
 800301c:	72fb      	strb	r3, [r7, #11]

  return status;
 800301e:	7afb      	ldrb	r3, [r7, #11]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40022000 	.word	0x40022000
 800302c:	40021000 	.word	0x40021000
 8003030:	08005d50 	.word	0x08005d50
 8003034:	20000000 	.word	0x20000000
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800304a:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003054:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x34>
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d121      	bne.n	80030ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d11e      	bne.n	80030ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003070:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d107      	bne.n	800308c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 800307e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	e005      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800308c:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <HAL_RCC_GetSysClockFreq+0x10c>)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10d      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_RCC_GetSysClockFreq+0x110>)
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	e004      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_RCC_GetSysClockFreq+0x114>)
 80030c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d134      	bne.n	8003134 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d003      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0xac>
 80030e0:	e005      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_RCC_GetSysClockFreq+0x110>)
 80030e4:	617b      	str	r3, [r7, #20]
      break;
 80030e6:	e005      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030e8:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ea:	617b      	str	r3, [r7, #20]
      break;
 80030ec:	e002      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	617b      	str	r3, [r7, #20]
      break;
 80030f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030f4:	4b13      	ldr	r3, [pc, #76]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	3301      	adds	r3, #1
 8003100:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	fb03 f202 	mul.w	r2, r3, r2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_GetSysClockFreq+0x108>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	0e5b      	lsrs	r3, r3, #25
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	3301      	adds	r3, #1
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003134:	69bb      	ldr	r3, [r7, #24]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	08005d68 	.word	0x08005d68
 800314c:	00f42400 	.word	0x00f42400
 8003150:	007a1200 	.word	0x007a1200

08003154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_RCC_GetHCLKFreq+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003170:	f7ff fff0 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8003174:	4602      	mov	r2, r0
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4904      	ldr	r1, [pc, #16]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003182:	5ccb      	ldrb	r3, [r1, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	08005d60 	.word	0x08005d60

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800319c:	f7ff ffda 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0adb      	lsrs	r3, r3, #11
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4904      	ldr	r1, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08005d60 	.word	0x08005d60

080031c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031d0:	4b2a      	ldr	r3, [pc, #168]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031dc:	f7ff f9b6 	bl	800254c <HAL_PWREx_GetVoltageRange>
 80031e0:	6178      	str	r0, [r7, #20]
 80031e2:	e014      	b.n	800320e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	4a24      	ldr	r2, [pc, #144]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6593      	str	r3, [r2, #88]	; 0x58
 80031f0:	4b22      	ldr	r3, [pc, #136]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031fc:	f7ff f9a6 	bl	800254c <HAL_PWREx_GetVoltageRange>
 8003200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	4a1d      	ldr	r2, [pc, #116]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d10b      	bne.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d919      	bls.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2ba0      	cmp	r3, #160	; 0xa0
 8003220:	d902      	bls.n	8003228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003222:	2302      	movs	r3, #2
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e013      	b.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003228:	2301      	movs	r3, #1
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e010      	b.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d902      	bls.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003234:	2303      	movs	r3, #3
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e00a      	b.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d102      	bne.n	8003246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003240:	2302      	movs	r3, #2
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e004      	b.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b70      	cmp	r3, #112	; 0x70
 800324a:	d101      	bne.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800324c:	2301      	movs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 0207 	bic.w	r2, r3, #7
 8003258:	4909      	ldr	r1, [pc, #36]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	429a      	cmp	r2, r3
 800326c:	d001      	beq.n	8003272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	40022000 	.word	0x40022000

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800328c:	2300      	movs	r3, #0
 800328e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003290:	2300      	movs	r3, #0
 8003292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329c:	2b00      	cmp	r3, #0
 800329e:	d031      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032a8:	d01a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ae:	d814      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b8:	d10f      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a5c      	ldr	r2, [pc, #368]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c6:	e00c      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fa44 	bl	800375c <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	74fb      	strb	r3, [r7, #19]
      break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e8:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	494e      	ldr	r1, [pc, #312]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032fe:	e001      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 809e 	beq.w	800344e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003316:	4b46      	ldr	r3, [pc, #280]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b40      	ldr	r3, [pc, #256]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	; 0x58
 8003338:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003344:	2301      	movs	r3, #1
 8003346:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003348:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a39      	ldr	r2, [pc, #228]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003354:	f7fd fdb0 	bl	8000eb8 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fd fdac 	bl	8000eb8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d902      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	74fb      	strb	r3, [r7, #19]
        break;
 800336e:	e005      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003370:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ef      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d15a      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003382:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01e      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	429a      	cmp	r2, r3
 800339c:	d019      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033aa:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ba:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ca:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d016      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fd6c 	bl	8000eb8 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e2:	e00b      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fd fd68 	bl	8000eb8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d902      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	74fb      	strb	r3, [r7, #19]
            break;
 80033fa:	e006      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ec      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	4904      	ldr	r1, [pc, #16]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003426:	e009      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
 800342c:	e006      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343c:	7c7b      	ldrb	r3, [r7, #17]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b9e      	ldr	r3, [pc, #632]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a9d      	ldr	r2, [pc, #628]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345a:	4b98      	ldr	r3, [pc, #608]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f023 0203 	bic.w	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4994      	ldr	r1, [pc, #592]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800347c:	4b8f      	ldr	r3, [pc, #572]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 020c 	bic.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	498c      	ldr	r1, [pc, #560]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349e:	4b87      	ldr	r3, [pc, #540]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	4983      	ldr	r1, [pc, #524]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c0:	4b7e      	ldr	r3, [pc, #504]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	497b      	ldr	r1, [pc, #492]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e2:	4b76      	ldr	r3, [pc, #472]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	4972      	ldr	r1, [pc, #456]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003504:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	496a      	ldr	r1, [pc, #424]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003526:	4b65      	ldr	r3, [pc, #404]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	4961      	ldr	r1, [pc, #388]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003548:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	4959      	ldr	r1, [pc, #356]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800356a:	4b54      	ldr	r3, [pc, #336]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	4950      	ldr	r1, [pc, #320]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800358c:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	4948      	ldr	r1, [pc, #288]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035ae:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035b4:	f023 0203 	bic.w	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	493f      	ldr	r1, [pc, #252]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d028      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	4937      	ldr	r1, [pc, #220]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ee:	d106      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f0:	4b32      	ldr	r3, [pc, #200]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fa:	60d3      	str	r3, [r2, #12]
 80035fc:	e011      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003606:	d10c      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	2101      	movs	r1, #1
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f8a4 	bl	800375c <RCCEx_PLLSAI1_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	491f      	ldr	r1, [pc, #124]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364c:	d106      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364e:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003658:	60d3      	str	r3, [r2, #12]
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f875 	bl	800375c <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d02b      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	4908      	ldr	r1, [pc, #32]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036aa:	d109      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a02      	ldr	r2, [pc, #8]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]
 80036b8:	e014      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2101      	movs	r1, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f843 	bl	800375c <RCCEx_PLLSAI1_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80036e0:	7cfb      	ldrb	r3, [r7, #19]
 80036e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01c      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	4916      	ldr	r1, [pc, #88]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370e:	d10c      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f820 	bl	800375c <RCCEx_PLLSAI1_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800374c:	7cbb      	ldrb	r3, [r7, #18]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800376a:	4b74      	ldr	r3, [pc, #464]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003776:	4b71      	ldr	r3, [pc, #452]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0203 	and.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d10d      	bne.n	80037a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
       ||
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800378e:	4b6b      	ldr	r3, [pc, #428]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
       ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d047      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	e044      	b.n	8003832 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d018      	beq.n	80037e2 <RCCEx_PLLSAI1_Config+0x86>
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d825      	bhi.n	8003800 <RCCEx_PLLSAI1_Config+0xa4>
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d002      	beq.n	80037be <RCCEx_PLLSAI1_Config+0x62>
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d009      	beq.n	80037d0 <RCCEx_PLLSAI1_Config+0x74>
 80037bc:	e020      	b.n	8003800 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037be:	4b5f      	ldr	r3, [pc, #380]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ce:	e01a      	b.n	8003806 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d0:	4b5a      	ldr	r3, [pc, #360]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e0:	e013      	b.n	800380a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037e2:	4b56      	ldr	r3, [pc, #344]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ee:	4b53      	ldr	r3, [pc, #332]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037fe:	e006      	b.n	800380e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
      break;
 8003804:	e004      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800380e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003816:	4b49      	ldr	r3, [pc, #292]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	430b      	orrs	r3, r1
 800382c:	4943      	ldr	r1, [pc, #268]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d17c      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003838:	4b40      	ldr	r3, [pc, #256]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3f      	ldr	r2, [pc, #252]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 800383e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003844:	f7fd fb38 	bl	8000eb8 <HAL_GetTick>
 8003848:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384a:	e009      	b.n	8003860 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800384c:	f7fd fb34 	bl	8000eb8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d902      	bls.n	8003860 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	73fb      	strb	r3, [r7, #15]
        break;
 800385e:	e005      	b.n	800386c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ef      	bne.n	800384c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d15f      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d110      	bne.n	800389a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003878:	4b30      	ldr	r3, [pc, #192]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003880:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	06d2      	lsls	r2, r2, #27
 8003890:	430a      	orrs	r2, r1
 8003892:	492a      	ldr	r1, [pc, #168]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003894:	4313      	orrs	r3, r2
 8003896:	610b      	str	r3, [r1, #16]
 8003898:	e027      	b.n	80038ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d112      	bne.n	80038c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038a0:	4b26      	ldr	r3, [pc, #152]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6892      	ldr	r2, [r2, #8]
 80038b0:	0211      	lsls	r1, r2, #8
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6912      	ldr	r2, [r2, #16]
 80038b6:	0852      	lsrs	r2, r2, #1
 80038b8:	3a01      	subs	r2, #1
 80038ba:	0552      	lsls	r2, r2, #21
 80038bc:	430a      	orrs	r2, r1
 80038be:	491f      	ldr	r1, [pc, #124]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	610b      	str	r3, [r1, #16]
 80038c4:	e011      	b.n	80038ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6892      	ldr	r2, [r2, #8]
 80038d6:	0211      	lsls	r1, r2, #8
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6952      	ldr	r2, [r2, #20]
 80038dc:	0852      	lsrs	r2, r2, #1
 80038de:	3a01      	subs	r2, #1
 80038e0:	0652      	lsls	r2, r2, #25
 80038e2:	430a      	orrs	r2, r1
 80038e4:	4915      	ldr	r1, [pc, #84]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a13      	ldr	r2, [pc, #76]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd fadf 	bl	8000eb8 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038fc:	e009      	b.n	8003912 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038fe:	f7fd fadb 	bl	8000eb8 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d902      	bls.n	8003912 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	73fb      	strb	r3, [r7, #15]
          break;
 8003910:	e005      	b.n	800391e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ef      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	4903      	ldr	r1, [pc, #12]	; (800393c <RCCEx_PLLSAI1_Config+0x1e0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003932:	7bfb      	ldrb	r3, [r7, #15]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e049      	b.n	80039e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd f8e6 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	4619      	mov	r1, r3
 800397e:	4610      	mov	r0, r2
 8003980:	f000 fa74 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e049      	b.n	8003a94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f841 	bl	8003a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f000 fa1d 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e0ff      	b.n	8003cce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b14      	cmp	r3, #20
 8003ada:	f200 80f0 	bhi.w	8003cbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b39 	.word	0x08003b39
 8003ae8:	08003cbf 	.word	0x08003cbf
 8003aec:	08003cbf 	.word	0x08003cbf
 8003af0:	08003cbf 	.word	0x08003cbf
 8003af4:	08003b79 	.word	0x08003b79
 8003af8:	08003cbf 	.word	0x08003cbf
 8003afc:	08003cbf 	.word	0x08003cbf
 8003b00:	08003cbf 	.word	0x08003cbf
 8003b04:	08003bbb 	.word	0x08003bbb
 8003b08:	08003cbf 	.word	0x08003cbf
 8003b0c:	08003cbf 	.word	0x08003cbf
 8003b10:	08003cbf 	.word	0x08003cbf
 8003b14:	08003bfb 	.word	0x08003bfb
 8003b18:	08003cbf 	.word	0x08003cbf
 8003b1c:	08003cbf 	.word	0x08003cbf
 8003b20:	08003cbf 	.word	0x08003cbf
 8003b24:	08003c3d 	.word	0x08003c3d
 8003b28:	08003cbf 	.word	0x08003cbf
 8003b2c:	08003cbf 	.word	0x08003cbf
 8003b30:	08003cbf 	.word	0x08003cbf
 8003b34:	08003c7d 	.word	0x08003c7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fa0e 	bl	8003f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
      break;
 8003b76:	e0a5      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa6a 	bl	8004058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
      break;
 8003bb8:	e084      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fac3 	bl	800414c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
      break;
 8003bf8:	e064      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fb1b 	bl	800423c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
      break;
 8003c3a:	e043      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fb58 	bl	80042f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0208 	orr.w	r2, r2, #8
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c7a:	e023      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fb90 	bl	80043a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cbc:	e002      	b.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop

08003cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0b6      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x18a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d30:	d03e      	beq.n	8003db0 <HAL_TIM_ConfigClockSource+0xd8>
 8003d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d36:	f200 8087 	bhi.w	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3e:	f000 8086 	beq.w	8003e4e <HAL_TIM_ConfigClockSource+0x176>
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d46:	d87f      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d48:	2b70      	cmp	r3, #112	; 0x70
 8003d4a:	d01a      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xaa>
 8003d4c:	2b70      	cmp	r3, #112	; 0x70
 8003d4e:	d87b      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d50:	2b60      	cmp	r3, #96	; 0x60
 8003d52:	d050      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x11e>
 8003d54:	2b60      	cmp	r3, #96	; 0x60
 8003d56:	d877      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d58:	2b50      	cmp	r3, #80	; 0x50
 8003d5a:	d03c      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xfe>
 8003d5c:	2b50      	cmp	r3, #80	; 0x50
 8003d5e:	d873      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d058      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x13e>
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d86f      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d68:	2b30      	cmp	r3, #48	; 0x30
 8003d6a:	d064      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x15e>
 8003d6c:	2b30      	cmp	r3, #48	; 0x30
 8003d6e:	d86b      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d060      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x15e>
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d867      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05c      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x15e>
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d05a      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x15e>
 8003d80:	e062      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d92:	f000 fbdd 	bl	8004550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	609a      	str	r2, [r3, #8]
      break;
 8003dae:	e04f      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dc0:	f000 fbc6 	bl	8004550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd2:	609a      	str	r2, [r3, #8]
      break;
 8003dd4:	e03c      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	461a      	mov	r2, r3
 8003de4:	f000 fb3a 	bl	800445c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2150      	movs	r1, #80	; 0x50
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fb93 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003df4:	e02c      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 fb59 	bl	80044ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2160      	movs	r1, #96	; 0x60
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fb83 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003e14:	e01c      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 fb1a 	bl	800445c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2140      	movs	r1, #64	; 0x40
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb73 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 fb6a 	bl	800451a <TIM_ITRx_SetConfig>
      break;
 8003e46:	e003      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <TIM_Base_SetConfig+0xe4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_Base_SetConfig+0x28>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0x28>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <TIM_Base_SetConfig+0xe8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d108      	bne.n	8003ea6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <TIM_Base_SetConfig+0xe4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_Base_SetConfig+0x62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d00b      	beq.n	8003ece <TIM_Base_SetConfig+0x62>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <TIM_Base_SetConfig+0xe8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_Base_SetConfig+0x62>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a25      	ldr	r2, [pc, #148]	; (8003f58 <TIM_Base_SetConfig+0xec>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_Base_SetConfig+0x62>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <TIM_Base_SetConfig+0xf0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <TIM_Base_SetConfig+0xe4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <TIM_Base_SetConfig+0xec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <TIM_Base_SetConfig+0xf0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d103      	bne.n	8003f24 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]
  }
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400

08003f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 0201 	bic.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 0302 	bic.w	r3, r3, #2
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a24      	ldr	r2, [pc, #144]	; (800404c <TIM_OC1_SetConfig+0xec>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_OC1_SetConfig+0x70>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a23      	ldr	r2, [pc, #140]	; (8004050 <TIM_OC1_SetConfig+0xf0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC1_SetConfig+0x70>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a22      	ldr	r2, [pc, #136]	; (8004054 <TIM_OC1_SetConfig+0xf4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10c      	bne.n	8003fea <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0308 	bic.w	r3, r3, #8
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <TIM_OC1_SetConfig+0xec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_OC1_SetConfig+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <TIM_OC1_SetConfig+0xf0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC1_SetConfig+0xa2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <TIM_OC1_SetConfig+0xf4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d111      	bne.n	8004026 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40014000 	.word	0x40014000
 8004054:	40014400 	.word	0x40014400

08004058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 0210 	bic.w	r2, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0320 	bic.w	r3, r3, #32
 80040a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a22      	ldr	r2, [pc, #136]	; (8004140 <TIM_OC2_SetConfig+0xe8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10d      	bne.n	80040d8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a19      	ldr	r2, [pc, #100]	; (8004140 <TIM_OC2_SetConfig+0xe8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_OC2_SetConfig+0x98>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <TIM_OC2_SetConfig+0xec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC2_SetConfig+0x98>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <TIM_OC2_SetConfig+0xf0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d113      	bne.n	8004118 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400

0800414c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a21      	ldr	r2, [pc, #132]	; (8004230 <TIM_OC3_SetConfig+0xe4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10d      	bne.n	80041ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <TIM_OC3_SetConfig+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_OC3_SetConfig+0x96>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a17      	ldr	r2, [pc, #92]	; (8004234 <TIM_OC3_SetConfig+0xe8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC3_SetConfig+0x96>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a16      	ldr	r2, [pc, #88]	; (8004238 <TIM_OC3_SetConfig+0xec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400

0800423c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <TIM_OC4_SetConfig+0xb0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d007      	beq.n	80042b0 <TIM_OC4_SetConfig+0x74>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <TIM_OC4_SetConfig+0xb4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d003      	beq.n	80042b0 <TIM_OC4_SetConfig+0x74>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <TIM_OC4_SetConfig+0xb8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d109      	bne.n	80042c4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40014000 	.word	0x40014000
 80042f4:	40014400 	.word	0x40014400

080042f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800433c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <TIM_OC5_SetConfig+0xa4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_OC5_SetConfig+0x6a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <TIM_OC5_SetConfig+0xa8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_OC5_SetConfig+0x6a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <TIM_OC5_SetConfig+0xac>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d109      	bne.n	8004376 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	621a      	str	r2, [r3, #32]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400

080043a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	051b      	lsls	r3, r3, #20
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <TIM_OC6_SetConfig+0xa8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_OC6_SetConfig+0x6c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <TIM_OC6_SetConfig+0xac>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC6_SetConfig+0x6c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <TIM_OC6_SetConfig+0xb0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d109      	bne.n	8004428 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400

0800445c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 030a 	bic.w	r3, r3, #10
 8004498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f023 0210 	bic.w	r2, r3, #16
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	031b      	lsls	r3, r3, #12
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	f043 0307 	orr.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	431a      	orrs	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	609a      	str	r2, [r3, #8]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <HAL_TIMEx_PWMN_Start+0x24>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	bf14      	ite	ne
 80045ac:	2301      	movne	r3, #1
 80045ae:	2300      	moveq	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e022      	b.n	80045fa <HAL_TIMEx_PWMN_Start+0x6a>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d109      	bne.n	80045ce <HAL_TIMEx_PWMN_Start+0x3e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e015      	b.n	80045fa <HAL_TIMEx_PWMN_Start+0x6a>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d109      	bne.n	80045e8 <HAL_TIMEx_PWMN_Start+0x58>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e008      	b.n	80045fa <HAL_TIMEx_PWMN_Start+0x6a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e05f      	b.n	80046c2 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_TIMEx_PWMN_Start+0x82>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004610:	e013      	b.n	800463a <HAL_TIMEx_PWMN_Start+0xaa>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_TIMEx_PWMN_Start+0x92>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004620:	e00b      	b.n	800463a <HAL_TIMEx_PWMN_Start+0xaa>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d104      	bne.n	8004632 <HAL_TIMEx_PWMN_Start+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004630:	e003      	b.n	800463a <HAL_TIMEx_PWMN_Start+0xaa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2204      	movs	r2, #4
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f930 	bl	80048a8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_TIMEx_PWMN_Start+0x13c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_TIMEx_PWMN_Start+0xf0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466a:	d009      	beq.n	8004680 <HAL_TIMEx_PWMN_Start+0xf0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_TIMEx_PWMN_Start+0x140>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIMEx_PWMN_Start+0xf0>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <HAL_TIMEx_PWMN_Start+0x144>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d115      	bne.n	80046ac <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <HAL_TIMEx_PWMN_Start+0x148>)
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d015      	beq.n	80046be <HAL_TIMEx_PWMN_Start+0x12e>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004698:	d011      	beq.n	80046be <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e008      	b.n	80046be <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e000      	b.n	80046c0 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	00010007 	.word	0x00010007

080046dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e054      	b.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d108      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004724:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00e      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d009      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10c      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4313      	orrs	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40014000 	.word	0x40014000

080047b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e060      	b.n	8004896 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d115      	bne.n	8004884 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	051b      	lsls	r3, r3, #20
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00

080048a8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	2204      	movs	r2, #4
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	401a      	ands	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1a      	ldr	r2, [r3, #32]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	fa01 f303 	lsl.w	r3, r1, r3
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e040      	b.n	8004986 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc f967 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2224      	movs	r2, #36	; 0x24
 800491e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fb39 	bl	8004fb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8b0 	bl	8004aa4 <UART_SetConfig>
 8004944:	4603      	mov	r3, r0
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e01b      	b.n	8004986 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800495c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800496c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fbb8 	bl	80050f4 <UART_CheckIdleState>
 8004984:	4603      	mov	r3, r0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08a      	sub	sp, #40	; 0x28
 8004992:	af02      	add	r7, sp, #8
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d178      	bne.n	8004a98 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Transmit+0x24>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e071      	b.n	8004a9a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2221      	movs	r2, #33	; 0x21
 80049c2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c4:	f7fc fa78 	bl	8000eb8 <HAL_GetTick>
 80049c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d108      	bne.n	80049f6 <HAL_UART_Transmit+0x68>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e003      	b.n	80049fe <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049fe:	e030      	b.n	8004a62 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fc1a 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e03c      	b.n	8004a9a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	881a      	ldrh	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a32:	b292      	uxth	r2, r2
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e008      	b.n	8004a50 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b292      	uxth	r2, r2
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1c8      	bne.n	8004a00 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2140      	movs	r1, #64	; 0x40
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fbe3 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e005      	b.n	8004a9a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa8:	b08a      	sub	sp, #40	; 0x28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4ba5      	ldr	r3, [pc, #660]	; (8004d68 <UART_SetConfig+0x2c4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a9a      	ldr	r2, [pc, #616]	; (8004d6c <UART_SetConfig+0x2c8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b20:	430a      	orrs	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a91      	ldr	r2, [pc, #580]	; (8004d70 <UART_SetConfig+0x2cc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d126      	bne.n	8004b7c <UART_SetConfig+0xd8>
 8004b2e:	4b91      	ldr	r3, [pc, #580]	; (8004d74 <UART_SetConfig+0x2d0>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d81b      	bhi.n	8004b74 <UART_SetConfig+0xd0>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0xa0>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e0d6      	b.n	8004d0a <UART_SetConfig+0x266>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e0d2      	b.n	8004d0a <UART_SetConfig+0x266>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e0ce      	b.n	8004d0a <UART_SetConfig+0x266>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e0ca      	b.n	8004d0a <UART_SetConfig+0x266>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e0c6      	b.n	8004d0a <UART_SetConfig+0x266>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7d      	ldr	r2, [pc, #500]	; (8004d78 <UART_SetConfig+0x2d4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d138      	bne.n	8004bf8 <UART_SetConfig+0x154>
 8004b86:	4b7b      	ldr	r3, [pc, #492]	; (8004d74 <UART_SetConfig+0x2d0>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d82d      	bhi.n	8004bf0 <UART_SetConfig+0x14c>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0xf8>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004bf1 	.word	0x08004bf1
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004bf1 	.word	0x08004bf1
 8004bb8:	08004bf1 	.word	0x08004bf1
 8004bbc:	08004bd9 	.word	0x08004bd9
 8004bc0:	08004bf1 	.word	0x08004bf1
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e098      	b.n	8004d0a <UART_SetConfig+0x266>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bde:	e094      	b.n	8004d0a <UART_SetConfig+0x266>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be6:	e090      	b.n	8004d0a <UART_SetConfig+0x266>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bee:	e08c      	b.n	8004d0a <UART_SetConfig+0x266>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf6:	e088      	b.n	8004d0a <UART_SetConfig+0x266>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5f      	ldr	r2, [pc, #380]	; (8004d7c <UART_SetConfig+0x2d8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d125      	bne.n	8004c4e <UART_SetConfig+0x1aa>
 8004c02:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <UART_SetConfig+0x2d0>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d016      	beq.n	8004c3e <UART_SetConfig+0x19a>
 8004c10:	2b30      	cmp	r3, #48	; 0x30
 8004c12:	d818      	bhi.n	8004c46 <UART_SetConfig+0x1a2>
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d00a      	beq.n	8004c2e <UART_SetConfig+0x18a>
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d814      	bhi.n	8004c46 <UART_SetConfig+0x1a2>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <UART_SetConfig+0x182>
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d008      	beq.n	8004c36 <UART_SetConfig+0x192>
 8004c24:	e00f      	b.n	8004c46 <UART_SetConfig+0x1a2>
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2c:	e06d      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c34:	e069      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c36:	2304      	movs	r3, #4
 8004c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3c:	e065      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c44:	e061      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c46:	2310      	movs	r3, #16
 8004c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4c:	e05d      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4b      	ldr	r2, [pc, #300]	; (8004d80 <UART_SetConfig+0x2dc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d125      	bne.n	8004ca4 <UART_SetConfig+0x200>
 8004c58:	4b46      	ldr	r3, [pc, #280]	; (8004d74 <UART_SetConfig+0x2d0>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c62:	2bc0      	cmp	r3, #192	; 0xc0
 8004c64:	d016      	beq.n	8004c94 <UART_SetConfig+0x1f0>
 8004c66:	2bc0      	cmp	r3, #192	; 0xc0
 8004c68:	d818      	bhi.n	8004c9c <UART_SetConfig+0x1f8>
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d00a      	beq.n	8004c84 <UART_SetConfig+0x1e0>
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d814      	bhi.n	8004c9c <UART_SetConfig+0x1f8>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0x1d8>
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x1e8>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x1f8>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e042      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e03e      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e03a      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e036      	b.n	8004d0a <UART_SetConfig+0x266>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e032      	b.n	8004d0a <UART_SetConfig+0x266>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a30      	ldr	r2, [pc, #192]	; (8004d6c <UART_SetConfig+0x2c8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d12a      	bne.n	8004d04 <UART_SetConfig+0x260>
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <UART_SetConfig+0x2d0>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cbc:	d01a      	beq.n	8004cf4 <UART_SetConfig+0x250>
 8004cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cc2:	d81b      	bhi.n	8004cfc <UART_SetConfig+0x258>
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc8:	d00c      	beq.n	8004ce4 <UART_SetConfig+0x240>
 8004cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cce:	d815      	bhi.n	8004cfc <UART_SetConfig+0x258>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <UART_SetConfig+0x238>
 8004cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd8:	d008      	beq.n	8004cec <UART_SetConfig+0x248>
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x258>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e012      	b.n	8004d0a <UART_SetConfig+0x266>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e00e      	b.n	8004d0a <UART_SetConfig+0x266>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e00a      	b.n	8004d0a <UART_SetConfig+0x266>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e006      	b.n	8004d0a <UART_SetConfig+0x266>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x266>
 8004d04:	2310      	movs	r3, #16
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <UART_SetConfig+0x2c8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	f040 808b 	bne.w	8004e2c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d834      	bhi.n	8004d88 <UART_SetConfig+0x2e4>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x280>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d57 	.word	0x08004d57
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004d89 	.word	0x08004d89
 8004d40:	08004d89 	.word	0x08004d89
 8004d44:	08004d5f 	.word	0x08004d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7fe fa10 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8004d4c:	61f8      	str	r0, [r7, #28]
        break;
 8004d4e:	e021      	b.n	8004d94 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <UART_SetConfig+0x2e0>)
 8004d52:	61fb      	str	r3, [r7, #28]
        break;
 8004d54:	e01e      	b.n	8004d94 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d56:	f7fe f971 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8004d5a:	61f8      	str	r0, [r7, #28]
        break;
 8004d5c:	e01a      	b.n	8004d94 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d62:	61fb      	str	r3, [r7, #28]
        break;
 8004d64:	e016      	b.n	8004d94 <UART_SetConfig+0x2f0>
 8004d66:	bf00      	nop
 8004d68:	efff69f3 	.word	0xefff69f3
 8004d6c:	40008000 	.word	0x40008000
 8004d70:	40013800 	.word	0x40013800
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	40004800 	.word	0x40004800
 8004d80:	40004c00 	.word	0x40004c00
 8004d84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 80fa 	beq.w	8004f90 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d305      	bcc.n	8004db8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d903      	bls.n	8004dc0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dbe:	e0e7      	b.n	8004f90 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	461c      	mov	r4, r3
 8004dc6:	4615      	mov	r5, r2
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	022b      	lsls	r3, r5, #8
 8004dd2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dd6:	0222      	lsls	r2, r4, #8
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	6849      	ldr	r1, [r1, #4]
 8004ddc:	0849      	lsrs	r1, r1, #1
 8004dde:	2000      	movs	r0, #0
 8004de0:	4688      	mov	r8, r1
 8004de2:	4681      	mov	r9, r0
 8004de4:	eb12 0a08 	adds.w	sl, r2, r8
 8004de8:	eb43 0b09 	adc.w	fp, r3, r9
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	f7fb fa3f 	bl	8000280 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4613      	mov	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e10:	d308      	bcc.n	8004e24 <UART_SetConfig+0x380>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e18:	d204      	bcs.n	8004e24 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	e0b5      	b.n	8004f90 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e2a:	e0b1      	b.n	8004f90 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e34:	d15d      	bne.n	8004ef2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d827      	bhi.n	8004e8e <UART_SetConfig+0x3ea>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0x3a0>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e69 	.word	0x08004e69
 8004e48:	08004e71 	.word	0x08004e71
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e8f 	.word	0x08004e8f
 8004e54:	08004e7f 	.word	0x08004e7f
 8004e58:	08004e8f 	.word	0x08004e8f
 8004e5c:	08004e8f 	.word	0x08004e8f
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	08004e87 	.word	0x08004e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fe f980 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8004e6c:	61f8      	str	r0, [r7, #28]
        break;
 8004e6e:	e014      	b.n	8004e9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fe f992 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004e74:	61f8      	str	r0, [r7, #28]
        break;
 8004e76:	e010      	b.n	8004e9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <UART_SetConfig+0x508>)
 8004e7a:	61fb      	str	r3, [r7, #28]
        break;
 8004e7c:	e00d      	b.n	8004e9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fe f8dd 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8004e82:	61f8      	str	r0, [r7, #28]
        break;
 8004e84:	e009      	b.n	8004e9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8a:	61fb      	str	r3, [r7, #28]
        break;
 8004e8c:	e005      	b.n	8004e9a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d077      	beq.n	8004f90 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005a      	lsls	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b0f      	cmp	r3, #15
 8004eba:	d916      	bls.n	8004eea <UART_SetConfig+0x446>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d212      	bcs.n	8004eea <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f023 030f 	bic.w	r3, r3, #15
 8004ecc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	8afb      	ldrh	r3, [r7, #22]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	8afa      	ldrh	r2, [r7, #22]
 8004ee6:	60da      	str	r2, [r3, #12]
 8004ee8:	e052      	b.n	8004f90 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef0:	e04e      	b.n	8004f90 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d827      	bhi.n	8004f4a <UART_SetConfig+0x4a6>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x45c>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe f922 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8004f28:	61f8      	str	r0, [r7, #28]
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe f934 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004f30:	61f8      	str	r0, [r7, #28]
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <UART_SetConfig+0x508>)
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe f87f 	bl	800303c <HAL_RCC_GetSysClockFreq>
 8004f3e:	61f8      	str	r0, [r7, #28]
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	61fb      	str	r3, [r7, #28]
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f54:	bf00      	nop
    }

    if (pclk != 0U)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d019      	beq.n	8004f90 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	085a      	lsrs	r2, r3, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	441a      	add	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b0f      	cmp	r3, #15
 8004f74:	d909      	bls.n	8004f8a <UART_SetConfig+0x4e6>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7c:	d205      	bcs.n	8004f8a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	e002      	b.n	8004f90 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3728      	adds	r7, #40	; 0x28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	00f42400 	.word	0x00f42400

08004fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01a      	beq.n	80050c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ae:	d10a      	bne.n	80050c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  }
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b098      	sub	sp, #96	; 0x60
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005104:	f7fb fed8 	bl	8000eb8 <HAL_GetTick>
 8005108:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b08      	cmp	r3, #8
 8005116:	d12e      	bne.n	8005176 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005120:	2200      	movs	r2, #0
 8005122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f88c 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d021      	beq.n	8005176 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005146:	653b      	str	r3, [r7, #80]	; 0x50
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005150:	647b      	str	r3, [r7, #68]	; 0x44
 8005152:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e062      	b.n	800523c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b04      	cmp	r3, #4
 8005182:	d149      	bne.n	8005218 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518c:	2200      	movs	r2, #0
 800518e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f856 	bl	8005244 <UART_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03c      	beq.n	8005218 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	623b      	str	r3, [r7, #32]
   return(result);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051bc:	633b      	str	r3, [r7, #48]	; 0x30
 80051be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e6      	bne.n	800519e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f0:	61fa      	str	r2, [r7, #28]
 80051f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69b9      	ldr	r1, [r7, #24]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	617b      	str	r3, [r7, #20]
   return(result);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e5      	bne.n	80051d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e011      	b.n	800523c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3758      	adds	r7, #88	; 0x58
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005254:	e04f      	b.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d04b      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fb fe2b 	bl	8000eb8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <UART_WaitOnFlagUntilTimeout+0x30>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e04e      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d037      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d034      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d031      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d110      	bne.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2208      	movs	r2, #8
 80052a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f838 	bl	800531e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2208      	movs	r2, #8
 80052b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e029      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d0:	d111      	bne.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f81e 	bl	800531e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e00f      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	429a      	cmp	r2, r3
 8005312:	d0a0      	beq.n	8005256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800531e:	b480      	push	{r7}
 8005320:	b095      	sub	sp, #84	; 0x54
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
 8005346:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800534a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	61fb      	str	r3, [r7, #28]
   return(result);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005390:	2b01      	cmp	r3, #1
 8005392:	d118      	bne.n	80053c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	647b      	str	r3, [r7, #68]	; 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b2:	61bb      	str	r3, [r7, #24]
 80053b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	613b      	str	r3, [r7, #16]
   return(result);
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e6      	bne.n	8005394 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053da:	bf00      	nop
 80053dc:	3754      	adds	r7, #84	; 0x54
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <siprintf>:
 80053e8:	b40e      	push	{r1, r2, r3}
 80053ea:	b500      	push	{lr}
 80053ec:	b09c      	sub	sp, #112	; 0x70
 80053ee:	ab1d      	add	r3, sp, #116	; 0x74
 80053f0:	9002      	str	r0, [sp, #8]
 80053f2:	9006      	str	r0, [sp, #24]
 80053f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f8:	4809      	ldr	r0, [pc, #36]	; (8005420 <siprintf+0x38>)
 80053fa:	9107      	str	r1, [sp, #28]
 80053fc:	9104      	str	r1, [sp, #16]
 80053fe:	4909      	ldr	r1, [pc, #36]	; (8005424 <siprintf+0x3c>)
 8005400:	f853 2b04 	ldr.w	r2, [r3], #4
 8005404:	9105      	str	r1, [sp, #20]
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	a902      	add	r1, sp, #8
 800540c:	f000 f992 	bl	8005734 <_svfiprintf_r>
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	b01c      	add	sp, #112	; 0x70
 8005418:	f85d eb04 	ldr.w	lr, [sp], #4
 800541c:	b003      	add	sp, #12
 800541e:	4770      	bx	lr
 8005420:	20000058 	.word	0x20000058
 8005424:	ffff0208 	.word	0xffff0208

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <__errno>:
 8005438:	4b01      	ldr	r3, [pc, #4]	; (8005440 <__errno+0x8>)
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000058 	.word	0x20000058

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4d0d      	ldr	r5, [pc, #52]	; (800547c <__libc_init_array+0x38>)
 8005448:	4c0d      	ldr	r4, [pc, #52]	; (8005480 <__libc_init_array+0x3c>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	2600      	movs	r6, #0
 8005450:	42a6      	cmp	r6, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	4d0b      	ldr	r5, [pc, #44]	; (8005484 <__libc_init_array+0x40>)
 8005456:	4c0c      	ldr	r4, [pc, #48]	; (8005488 <__libc_init_array+0x44>)
 8005458:	f000 fc6a 	bl	8005d30 <_init>
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	2600      	movs	r6, #0
 8005462:	42a6      	cmp	r6, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f855 3b04 	ldr.w	r3, [r5], #4
 800546c:	4798      	blx	r3
 800546e:	3601      	adds	r6, #1
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f855 3b04 	ldr.w	r3, [r5], #4
 8005476:	4798      	blx	r3
 8005478:	3601      	adds	r6, #1
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	08005dd4 	.word	0x08005dd4
 8005480:	08005dd4 	.word	0x08005dd4
 8005484:	08005dd4 	.word	0x08005dd4
 8005488:	08005dd8 	.word	0x08005dd8

0800548c <__retarget_lock_acquire_recursive>:
 800548c:	4770      	bx	lr

0800548e <__retarget_lock_release_recursive>:
 800548e:	4770      	bx	lr

08005490 <_free_r>:
 8005490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005492:	2900      	cmp	r1, #0
 8005494:	d044      	beq.n	8005520 <_free_r+0x90>
 8005496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800549a:	9001      	str	r0, [sp, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f1a1 0404 	sub.w	r4, r1, #4
 80054a2:	bfb8      	it	lt
 80054a4:	18e4      	addlt	r4, r4, r3
 80054a6:	f000 f8df 	bl	8005668 <__malloc_lock>
 80054aa:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <_free_r+0x94>)
 80054ac:	9801      	ldr	r0, [sp, #4]
 80054ae:	6813      	ldr	r3, [r2, #0]
 80054b0:	b933      	cbnz	r3, 80054c0 <_free_r+0x30>
 80054b2:	6063      	str	r3, [r4, #4]
 80054b4:	6014      	str	r4, [r2, #0]
 80054b6:	b003      	add	sp, #12
 80054b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054bc:	f000 b8da 	b.w	8005674 <__malloc_unlock>
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	d908      	bls.n	80054d6 <_free_r+0x46>
 80054c4:	6825      	ldr	r5, [r4, #0]
 80054c6:	1961      	adds	r1, r4, r5
 80054c8:	428b      	cmp	r3, r1
 80054ca:	bf01      	itttt	eq
 80054cc:	6819      	ldreq	r1, [r3, #0]
 80054ce:	685b      	ldreq	r3, [r3, #4]
 80054d0:	1949      	addeq	r1, r1, r5
 80054d2:	6021      	streq	r1, [r4, #0]
 80054d4:	e7ed      	b.n	80054b2 <_free_r+0x22>
 80054d6:	461a      	mov	r2, r3
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	b10b      	cbz	r3, 80054e0 <_free_r+0x50>
 80054dc:	42a3      	cmp	r3, r4
 80054de:	d9fa      	bls.n	80054d6 <_free_r+0x46>
 80054e0:	6811      	ldr	r1, [r2, #0]
 80054e2:	1855      	adds	r5, r2, r1
 80054e4:	42a5      	cmp	r5, r4
 80054e6:	d10b      	bne.n	8005500 <_free_r+0x70>
 80054e8:	6824      	ldr	r4, [r4, #0]
 80054ea:	4421      	add	r1, r4
 80054ec:	1854      	adds	r4, r2, r1
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	d1e0      	bne.n	80054b6 <_free_r+0x26>
 80054f4:	681c      	ldr	r4, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	6053      	str	r3, [r2, #4]
 80054fa:	440c      	add	r4, r1
 80054fc:	6014      	str	r4, [r2, #0]
 80054fe:	e7da      	b.n	80054b6 <_free_r+0x26>
 8005500:	d902      	bls.n	8005508 <_free_r+0x78>
 8005502:	230c      	movs	r3, #12
 8005504:	6003      	str	r3, [r0, #0]
 8005506:	e7d6      	b.n	80054b6 <_free_r+0x26>
 8005508:	6825      	ldr	r5, [r4, #0]
 800550a:	1961      	adds	r1, r4, r5
 800550c:	428b      	cmp	r3, r1
 800550e:	bf04      	itt	eq
 8005510:	6819      	ldreq	r1, [r3, #0]
 8005512:	685b      	ldreq	r3, [r3, #4]
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	bf04      	itt	eq
 8005518:	1949      	addeq	r1, r1, r5
 800551a:	6021      	streq	r1, [r4, #0]
 800551c:	6054      	str	r4, [r2, #4]
 800551e:	e7ca      	b.n	80054b6 <_free_r+0x26>
 8005520:	b003      	add	sp, #12
 8005522:	bd30      	pop	{r4, r5, pc}
 8005524:	200002fc 	.word	0x200002fc

08005528 <sbrk_aligned>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4e0e      	ldr	r6, [pc, #56]	; (8005564 <sbrk_aligned+0x3c>)
 800552c:	460c      	mov	r4, r1
 800552e:	6831      	ldr	r1, [r6, #0]
 8005530:	4605      	mov	r5, r0
 8005532:	b911      	cbnz	r1, 800553a <sbrk_aligned+0x12>
 8005534:	f000 fba6 	bl	8005c84 <_sbrk_r>
 8005538:	6030      	str	r0, [r6, #0]
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f000 fba1 	bl	8005c84 <_sbrk_r>
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	d00a      	beq.n	800555c <sbrk_aligned+0x34>
 8005546:	1cc4      	adds	r4, r0, #3
 8005548:	f024 0403 	bic.w	r4, r4, #3
 800554c:	42a0      	cmp	r0, r4
 800554e:	d007      	beq.n	8005560 <sbrk_aligned+0x38>
 8005550:	1a21      	subs	r1, r4, r0
 8005552:	4628      	mov	r0, r5
 8005554:	f000 fb96 	bl	8005c84 <_sbrk_r>
 8005558:	3001      	adds	r0, #1
 800555a:	d101      	bne.n	8005560 <sbrk_aligned+0x38>
 800555c:	f04f 34ff 	mov.w	r4, #4294967295
 8005560:	4620      	mov	r0, r4
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	20000300 	.word	0x20000300

08005568 <_malloc_r>:
 8005568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800556c:	1ccd      	adds	r5, r1, #3
 800556e:	f025 0503 	bic.w	r5, r5, #3
 8005572:	3508      	adds	r5, #8
 8005574:	2d0c      	cmp	r5, #12
 8005576:	bf38      	it	cc
 8005578:	250c      	movcc	r5, #12
 800557a:	2d00      	cmp	r5, #0
 800557c:	4607      	mov	r7, r0
 800557e:	db01      	blt.n	8005584 <_malloc_r+0x1c>
 8005580:	42a9      	cmp	r1, r5
 8005582:	d905      	bls.n	8005590 <_malloc_r+0x28>
 8005584:	230c      	movs	r3, #12
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	2600      	movs	r6, #0
 800558a:	4630      	mov	r0, r6
 800558c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005590:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005664 <_malloc_r+0xfc>
 8005594:	f000 f868 	bl	8005668 <__malloc_lock>
 8005598:	f8d8 3000 	ldr.w	r3, [r8]
 800559c:	461c      	mov	r4, r3
 800559e:	bb5c      	cbnz	r4, 80055f8 <_malloc_r+0x90>
 80055a0:	4629      	mov	r1, r5
 80055a2:	4638      	mov	r0, r7
 80055a4:	f7ff ffc0 	bl	8005528 <sbrk_aligned>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	4604      	mov	r4, r0
 80055ac:	d155      	bne.n	800565a <_malloc_r+0xf2>
 80055ae:	f8d8 4000 	ldr.w	r4, [r8]
 80055b2:	4626      	mov	r6, r4
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	d145      	bne.n	8005644 <_malloc_r+0xdc>
 80055b8:	2c00      	cmp	r4, #0
 80055ba:	d048      	beq.n	800564e <_malloc_r+0xe6>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	4631      	mov	r1, r6
 80055c0:	4638      	mov	r0, r7
 80055c2:	eb04 0903 	add.w	r9, r4, r3
 80055c6:	f000 fb5d 	bl	8005c84 <_sbrk_r>
 80055ca:	4581      	cmp	r9, r0
 80055cc:	d13f      	bne.n	800564e <_malloc_r+0xe6>
 80055ce:	6821      	ldr	r1, [r4, #0]
 80055d0:	1a6d      	subs	r5, r5, r1
 80055d2:	4629      	mov	r1, r5
 80055d4:	4638      	mov	r0, r7
 80055d6:	f7ff ffa7 	bl	8005528 <sbrk_aligned>
 80055da:	3001      	adds	r0, #1
 80055dc:	d037      	beq.n	800564e <_malloc_r+0xe6>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	442b      	add	r3, r5
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	f8d8 3000 	ldr.w	r3, [r8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d038      	beq.n	800565e <_malloc_r+0xf6>
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	42a2      	cmp	r2, r4
 80055f0:	d12b      	bne.n	800564a <_malloc_r+0xe2>
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	e00f      	b.n	8005618 <_malloc_r+0xb0>
 80055f8:	6822      	ldr	r2, [r4, #0]
 80055fa:	1b52      	subs	r2, r2, r5
 80055fc:	d41f      	bmi.n	800563e <_malloc_r+0xd6>
 80055fe:	2a0b      	cmp	r2, #11
 8005600:	d917      	bls.n	8005632 <_malloc_r+0xca>
 8005602:	1961      	adds	r1, r4, r5
 8005604:	42a3      	cmp	r3, r4
 8005606:	6025      	str	r5, [r4, #0]
 8005608:	bf18      	it	ne
 800560a:	6059      	strne	r1, [r3, #4]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	bf08      	it	eq
 8005610:	f8c8 1000 	streq.w	r1, [r8]
 8005614:	5162      	str	r2, [r4, r5]
 8005616:	604b      	str	r3, [r1, #4]
 8005618:	4638      	mov	r0, r7
 800561a:	f104 060b 	add.w	r6, r4, #11
 800561e:	f000 f829 	bl	8005674 <__malloc_unlock>
 8005622:	f026 0607 	bic.w	r6, r6, #7
 8005626:	1d23      	adds	r3, r4, #4
 8005628:	1af2      	subs	r2, r6, r3
 800562a:	d0ae      	beq.n	800558a <_malloc_r+0x22>
 800562c:	1b9b      	subs	r3, r3, r6
 800562e:	50a3      	str	r3, [r4, r2]
 8005630:	e7ab      	b.n	800558a <_malloc_r+0x22>
 8005632:	42a3      	cmp	r3, r4
 8005634:	6862      	ldr	r2, [r4, #4]
 8005636:	d1dd      	bne.n	80055f4 <_malloc_r+0x8c>
 8005638:	f8c8 2000 	str.w	r2, [r8]
 800563c:	e7ec      	b.n	8005618 <_malloc_r+0xb0>
 800563e:	4623      	mov	r3, r4
 8005640:	6864      	ldr	r4, [r4, #4]
 8005642:	e7ac      	b.n	800559e <_malloc_r+0x36>
 8005644:	4634      	mov	r4, r6
 8005646:	6876      	ldr	r6, [r6, #4]
 8005648:	e7b4      	b.n	80055b4 <_malloc_r+0x4c>
 800564a:	4613      	mov	r3, r2
 800564c:	e7cc      	b.n	80055e8 <_malloc_r+0x80>
 800564e:	230c      	movs	r3, #12
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4638      	mov	r0, r7
 8005654:	f000 f80e 	bl	8005674 <__malloc_unlock>
 8005658:	e797      	b.n	800558a <_malloc_r+0x22>
 800565a:	6025      	str	r5, [r4, #0]
 800565c:	e7dc      	b.n	8005618 <_malloc_r+0xb0>
 800565e:	605b      	str	r3, [r3, #4]
 8005660:	deff      	udf	#255	; 0xff
 8005662:	bf00      	nop
 8005664:	200002fc 	.word	0x200002fc

08005668 <__malloc_lock>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__malloc_lock+0x8>)
 800566a:	f7ff bf0f 	b.w	800548c <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	200002f8 	.word	0x200002f8

08005674 <__malloc_unlock>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__malloc_unlock+0x8>)
 8005676:	f7ff bf0a 	b.w	800548e <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	200002f8 	.word	0x200002f8

08005680 <__ssputs_r>:
 8005680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	688e      	ldr	r6, [r1, #8]
 8005686:	461f      	mov	r7, r3
 8005688:	42be      	cmp	r6, r7
 800568a:	680b      	ldr	r3, [r1, #0]
 800568c:	4682      	mov	sl, r0
 800568e:	460c      	mov	r4, r1
 8005690:	4690      	mov	r8, r2
 8005692:	d82c      	bhi.n	80056ee <__ssputs_r+0x6e>
 8005694:	898a      	ldrh	r2, [r1, #12]
 8005696:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800569a:	d026      	beq.n	80056ea <__ssputs_r+0x6a>
 800569c:	6965      	ldr	r5, [r4, #20]
 800569e:	6909      	ldr	r1, [r1, #16]
 80056a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056a4:	eba3 0901 	sub.w	r9, r3, r1
 80056a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056ac:	1c7b      	adds	r3, r7, #1
 80056ae:	444b      	add	r3, r9
 80056b0:	106d      	asrs	r5, r5, #1
 80056b2:	429d      	cmp	r5, r3
 80056b4:	bf38      	it	cc
 80056b6:	461d      	movcc	r5, r3
 80056b8:	0553      	lsls	r3, r2, #21
 80056ba:	d527      	bpl.n	800570c <__ssputs_r+0x8c>
 80056bc:	4629      	mov	r1, r5
 80056be:	f7ff ff53 	bl	8005568 <_malloc_r>
 80056c2:	4606      	mov	r6, r0
 80056c4:	b360      	cbz	r0, 8005720 <__ssputs_r+0xa0>
 80056c6:	6921      	ldr	r1, [r4, #16]
 80056c8:	464a      	mov	r2, r9
 80056ca:	f000 faeb 	bl	8005ca4 <memcpy>
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	6126      	str	r6, [r4, #16]
 80056dc:	6165      	str	r5, [r4, #20]
 80056de:	444e      	add	r6, r9
 80056e0:	eba5 0509 	sub.w	r5, r5, r9
 80056e4:	6026      	str	r6, [r4, #0]
 80056e6:	60a5      	str	r5, [r4, #8]
 80056e8:	463e      	mov	r6, r7
 80056ea:	42be      	cmp	r6, r7
 80056ec:	d900      	bls.n	80056f0 <__ssputs_r+0x70>
 80056ee:	463e      	mov	r6, r7
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	4632      	mov	r2, r6
 80056f4:	4641      	mov	r1, r8
 80056f6:	f000 faab 	bl	8005c50 <memmove>
 80056fa:	68a3      	ldr	r3, [r4, #8]
 80056fc:	1b9b      	subs	r3, r3, r6
 80056fe:	60a3      	str	r3, [r4, #8]
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	4433      	add	r3, r6
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	2000      	movs	r0, #0
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	462a      	mov	r2, r5
 800570e:	f000 fad7 	bl	8005cc0 <_realloc_r>
 8005712:	4606      	mov	r6, r0
 8005714:	2800      	cmp	r0, #0
 8005716:	d1e0      	bne.n	80056da <__ssputs_r+0x5a>
 8005718:	6921      	ldr	r1, [r4, #16]
 800571a:	4650      	mov	r0, sl
 800571c:	f7ff feb8 	bl	8005490 <_free_r>
 8005720:	230c      	movs	r3, #12
 8005722:	f8ca 3000 	str.w	r3, [sl]
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295
 8005732:	e7e9      	b.n	8005708 <__ssputs_r+0x88>

08005734 <_svfiprintf_r>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	4698      	mov	r8, r3
 800573a:	898b      	ldrh	r3, [r1, #12]
 800573c:	061b      	lsls	r3, r3, #24
 800573e:	b09d      	sub	sp, #116	; 0x74
 8005740:	4607      	mov	r7, r0
 8005742:	460d      	mov	r5, r1
 8005744:	4614      	mov	r4, r2
 8005746:	d50e      	bpl.n	8005766 <_svfiprintf_r+0x32>
 8005748:	690b      	ldr	r3, [r1, #16]
 800574a:	b963      	cbnz	r3, 8005766 <_svfiprintf_r+0x32>
 800574c:	2140      	movs	r1, #64	; 0x40
 800574e:	f7ff ff0b 	bl	8005568 <_malloc_r>
 8005752:	6028      	str	r0, [r5, #0]
 8005754:	6128      	str	r0, [r5, #16]
 8005756:	b920      	cbnz	r0, 8005762 <_svfiprintf_r+0x2e>
 8005758:	230c      	movs	r3, #12
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	e0d0      	b.n	8005904 <_svfiprintf_r+0x1d0>
 8005762:	2340      	movs	r3, #64	; 0x40
 8005764:	616b      	str	r3, [r5, #20]
 8005766:	2300      	movs	r3, #0
 8005768:	9309      	str	r3, [sp, #36]	; 0x24
 800576a:	2320      	movs	r3, #32
 800576c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005770:	f8cd 800c 	str.w	r8, [sp, #12]
 8005774:	2330      	movs	r3, #48	; 0x30
 8005776:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800591c <_svfiprintf_r+0x1e8>
 800577a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800577e:	f04f 0901 	mov.w	r9, #1
 8005782:	4623      	mov	r3, r4
 8005784:	469a      	mov	sl, r3
 8005786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800578a:	b10a      	cbz	r2, 8005790 <_svfiprintf_r+0x5c>
 800578c:	2a25      	cmp	r2, #37	; 0x25
 800578e:	d1f9      	bne.n	8005784 <_svfiprintf_r+0x50>
 8005790:	ebba 0b04 	subs.w	fp, sl, r4
 8005794:	d00b      	beq.n	80057ae <_svfiprintf_r+0x7a>
 8005796:	465b      	mov	r3, fp
 8005798:	4622      	mov	r2, r4
 800579a:	4629      	mov	r1, r5
 800579c:	4638      	mov	r0, r7
 800579e:	f7ff ff6f 	bl	8005680 <__ssputs_r>
 80057a2:	3001      	adds	r0, #1
 80057a4:	f000 80a9 	beq.w	80058fa <_svfiprintf_r+0x1c6>
 80057a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057aa:	445a      	add	r2, fp
 80057ac:	9209      	str	r2, [sp, #36]	; 0x24
 80057ae:	f89a 3000 	ldrb.w	r3, [sl]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80a1 	beq.w	80058fa <_svfiprintf_r+0x1c6>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f04f 32ff 	mov.w	r2, #4294967295
 80057be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057c2:	f10a 0a01 	add.w	sl, sl, #1
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	9307      	str	r3, [sp, #28]
 80057ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ce:	931a      	str	r3, [sp, #104]	; 0x68
 80057d0:	4654      	mov	r4, sl
 80057d2:	2205      	movs	r2, #5
 80057d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d8:	4850      	ldr	r0, [pc, #320]	; (800591c <_svfiprintf_r+0x1e8>)
 80057da:	f7fa fd01 	bl	80001e0 <memchr>
 80057de:	9a04      	ldr	r2, [sp, #16]
 80057e0:	b9d8      	cbnz	r0, 800581a <_svfiprintf_r+0xe6>
 80057e2:	06d0      	lsls	r0, r2, #27
 80057e4:	bf44      	itt	mi
 80057e6:	2320      	movmi	r3, #32
 80057e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ec:	0711      	lsls	r1, r2, #28
 80057ee:	bf44      	itt	mi
 80057f0:	232b      	movmi	r3, #43	; 0x2b
 80057f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057f6:	f89a 3000 	ldrb.w	r3, [sl]
 80057fa:	2b2a      	cmp	r3, #42	; 0x2a
 80057fc:	d015      	beq.n	800582a <_svfiprintf_r+0xf6>
 80057fe:	9a07      	ldr	r2, [sp, #28]
 8005800:	4654      	mov	r4, sl
 8005802:	2000      	movs	r0, #0
 8005804:	f04f 0c0a 	mov.w	ip, #10
 8005808:	4621      	mov	r1, r4
 800580a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800580e:	3b30      	subs	r3, #48	; 0x30
 8005810:	2b09      	cmp	r3, #9
 8005812:	d94d      	bls.n	80058b0 <_svfiprintf_r+0x17c>
 8005814:	b1b0      	cbz	r0, 8005844 <_svfiprintf_r+0x110>
 8005816:	9207      	str	r2, [sp, #28]
 8005818:	e014      	b.n	8005844 <_svfiprintf_r+0x110>
 800581a:	eba0 0308 	sub.w	r3, r0, r8
 800581e:	fa09 f303 	lsl.w	r3, r9, r3
 8005822:	4313      	orrs	r3, r2
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	46a2      	mov	sl, r4
 8005828:	e7d2      	b.n	80057d0 <_svfiprintf_r+0x9c>
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	1d19      	adds	r1, r3, #4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	9103      	str	r1, [sp, #12]
 8005832:	2b00      	cmp	r3, #0
 8005834:	bfbb      	ittet	lt
 8005836:	425b      	neglt	r3, r3
 8005838:	f042 0202 	orrlt.w	r2, r2, #2
 800583c:	9307      	strge	r3, [sp, #28]
 800583e:	9307      	strlt	r3, [sp, #28]
 8005840:	bfb8      	it	lt
 8005842:	9204      	strlt	r2, [sp, #16]
 8005844:	7823      	ldrb	r3, [r4, #0]
 8005846:	2b2e      	cmp	r3, #46	; 0x2e
 8005848:	d10c      	bne.n	8005864 <_svfiprintf_r+0x130>
 800584a:	7863      	ldrb	r3, [r4, #1]
 800584c:	2b2a      	cmp	r3, #42	; 0x2a
 800584e:	d134      	bne.n	80058ba <_svfiprintf_r+0x186>
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	1d1a      	adds	r2, r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	9203      	str	r2, [sp, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfb8      	it	lt
 800585c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005860:	3402      	adds	r4, #2
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800592c <_svfiprintf_r+0x1f8>
 8005868:	7821      	ldrb	r1, [r4, #0]
 800586a:	2203      	movs	r2, #3
 800586c:	4650      	mov	r0, sl
 800586e:	f7fa fcb7 	bl	80001e0 <memchr>
 8005872:	b138      	cbz	r0, 8005884 <_svfiprintf_r+0x150>
 8005874:	9b04      	ldr	r3, [sp, #16]
 8005876:	eba0 000a 	sub.w	r0, r0, sl
 800587a:	2240      	movs	r2, #64	; 0x40
 800587c:	4082      	lsls	r2, r0
 800587e:	4313      	orrs	r3, r2
 8005880:	3401      	adds	r4, #1
 8005882:	9304      	str	r3, [sp, #16]
 8005884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005888:	4825      	ldr	r0, [pc, #148]	; (8005920 <_svfiprintf_r+0x1ec>)
 800588a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800588e:	2206      	movs	r2, #6
 8005890:	f7fa fca6 	bl	80001e0 <memchr>
 8005894:	2800      	cmp	r0, #0
 8005896:	d038      	beq.n	800590a <_svfiprintf_r+0x1d6>
 8005898:	4b22      	ldr	r3, [pc, #136]	; (8005924 <_svfiprintf_r+0x1f0>)
 800589a:	bb1b      	cbnz	r3, 80058e4 <_svfiprintf_r+0x1b0>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	3307      	adds	r3, #7
 80058a0:	f023 0307 	bic.w	r3, r3, #7
 80058a4:	3308      	adds	r3, #8
 80058a6:	9303      	str	r3, [sp, #12]
 80058a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058aa:	4433      	add	r3, r6
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	e768      	b.n	8005782 <_svfiprintf_r+0x4e>
 80058b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80058b4:	460c      	mov	r4, r1
 80058b6:	2001      	movs	r0, #1
 80058b8:	e7a6      	b.n	8005808 <_svfiprintf_r+0xd4>
 80058ba:	2300      	movs	r3, #0
 80058bc:	3401      	adds	r4, #1
 80058be:	9305      	str	r3, [sp, #20]
 80058c0:	4619      	mov	r1, r3
 80058c2:	f04f 0c0a 	mov.w	ip, #10
 80058c6:	4620      	mov	r0, r4
 80058c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058cc:	3a30      	subs	r2, #48	; 0x30
 80058ce:	2a09      	cmp	r2, #9
 80058d0:	d903      	bls.n	80058da <_svfiprintf_r+0x1a6>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0c6      	beq.n	8005864 <_svfiprintf_r+0x130>
 80058d6:	9105      	str	r1, [sp, #20]
 80058d8:	e7c4      	b.n	8005864 <_svfiprintf_r+0x130>
 80058da:	fb0c 2101 	mla	r1, ip, r1, r2
 80058de:	4604      	mov	r4, r0
 80058e0:	2301      	movs	r3, #1
 80058e2:	e7f0      	b.n	80058c6 <_svfiprintf_r+0x192>
 80058e4:	ab03      	add	r3, sp, #12
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	462a      	mov	r2, r5
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <_svfiprintf_r+0x1f4>)
 80058ec:	a904      	add	r1, sp, #16
 80058ee:	4638      	mov	r0, r7
 80058f0:	f3af 8000 	nop.w
 80058f4:	1c42      	adds	r2, r0, #1
 80058f6:	4606      	mov	r6, r0
 80058f8:	d1d6      	bne.n	80058a8 <_svfiprintf_r+0x174>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	065b      	lsls	r3, r3, #25
 80058fe:	f53f af2d 	bmi.w	800575c <_svfiprintf_r+0x28>
 8005902:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005904:	b01d      	add	sp, #116	; 0x74
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	ab03      	add	r3, sp, #12
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	462a      	mov	r2, r5
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <_svfiprintf_r+0x1f4>)
 8005912:	a904      	add	r1, sp, #16
 8005914:	4638      	mov	r0, r7
 8005916:	f000 f879 	bl	8005a0c <_printf_i>
 800591a:	e7eb      	b.n	80058f4 <_svfiprintf_r+0x1c0>
 800591c:	08005d98 	.word	0x08005d98
 8005920:	08005da2 	.word	0x08005da2
 8005924:	00000000 	.word	0x00000000
 8005928:	08005681 	.word	0x08005681
 800592c:	08005d9e 	.word	0x08005d9e

08005930 <_printf_common>:
 8005930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	4616      	mov	r6, r2
 8005936:	4699      	mov	r9, r3
 8005938:	688a      	ldr	r2, [r1, #8]
 800593a:	690b      	ldr	r3, [r1, #16]
 800593c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005940:	4293      	cmp	r3, r2
 8005942:	bfb8      	it	lt
 8005944:	4613      	movlt	r3, r2
 8005946:	6033      	str	r3, [r6, #0]
 8005948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800594c:	4607      	mov	r7, r0
 800594e:	460c      	mov	r4, r1
 8005950:	b10a      	cbz	r2, 8005956 <_printf_common+0x26>
 8005952:	3301      	adds	r3, #1
 8005954:	6033      	str	r3, [r6, #0]
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	0699      	lsls	r1, r3, #26
 800595a:	bf42      	ittt	mi
 800595c:	6833      	ldrmi	r3, [r6, #0]
 800595e:	3302      	addmi	r3, #2
 8005960:	6033      	strmi	r3, [r6, #0]
 8005962:	6825      	ldr	r5, [r4, #0]
 8005964:	f015 0506 	ands.w	r5, r5, #6
 8005968:	d106      	bne.n	8005978 <_printf_common+0x48>
 800596a:	f104 0a19 	add.w	sl, r4, #25
 800596e:	68e3      	ldr	r3, [r4, #12]
 8005970:	6832      	ldr	r2, [r6, #0]
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	42ab      	cmp	r3, r5
 8005976:	dc26      	bgt.n	80059c6 <_printf_common+0x96>
 8005978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800597c:	1e13      	subs	r3, r2, #0
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	bf18      	it	ne
 8005982:	2301      	movne	r3, #1
 8005984:	0692      	lsls	r2, r2, #26
 8005986:	d42b      	bmi.n	80059e0 <_printf_common+0xb0>
 8005988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800598c:	4649      	mov	r1, r9
 800598e:	4638      	mov	r0, r7
 8005990:	47c0      	blx	r8
 8005992:	3001      	adds	r0, #1
 8005994:	d01e      	beq.n	80059d4 <_printf_common+0xa4>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	f003 0306 	and.w	r3, r3, #6
 800599e:	2b04      	cmp	r3, #4
 80059a0:	bf02      	ittt	eq
 80059a2:	68e5      	ldreq	r5, [r4, #12]
 80059a4:	6833      	ldreq	r3, [r6, #0]
 80059a6:	1aed      	subeq	r5, r5, r3
 80059a8:	68a3      	ldr	r3, [r4, #8]
 80059aa:	bf0c      	ite	eq
 80059ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059b0:	2500      	movne	r5, #0
 80059b2:	4293      	cmp	r3, r2
 80059b4:	bfc4      	itt	gt
 80059b6:	1a9b      	subgt	r3, r3, r2
 80059b8:	18ed      	addgt	r5, r5, r3
 80059ba:	2600      	movs	r6, #0
 80059bc:	341a      	adds	r4, #26
 80059be:	42b5      	cmp	r5, r6
 80059c0:	d11a      	bne.n	80059f8 <_printf_common+0xc8>
 80059c2:	2000      	movs	r0, #0
 80059c4:	e008      	b.n	80059d8 <_printf_common+0xa8>
 80059c6:	2301      	movs	r3, #1
 80059c8:	4652      	mov	r2, sl
 80059ca:	4649      	mov	r1, r9
 80059cc:	4638      	mov	r0, r7
 80059ce:	47c0      	blx	r8
 80059d0:	3001      	adds	r0, #1
 80059d2:	d103      	bne.n	80059dc <_printf_common+0xac>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059dc:	3501      	adds	r5, #1
 80059de:	e7c6      	b.n	800596e <_printf_common+0x3e>
 80059e0:	18e1      	adds	r1, r4, r3
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	2030      	movs	r0, #48	; 0x30
 80059e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ea:	4422      	add	r2, r4
 80059ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059f4:	3302      	adds	r3, #2
 80059f6:	e7c7      	b.n	8005988 <_printf_common+0x58>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4622      	mov	r2, r4
 80059fc:	4649      	mov	r1, r9
 80059fe:	4638      	mov	r0, r7
 8005a00:	47c0      	blx	r8
 8005a02:	3001      	adds	r0, #1
 8005a04:	d0e6      	beq.n	80059d4 <_printf_common+0xa4>
 8005a06:	3601      	adds	r6, #1
 8005a08:	e7d9      	b.n	80059be <_printf_common+0x8e>
	...

08005a0c <_printf_i>:
 8005a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a10:	7e0f      	ldrb	r7, [r1, #24]
 8005a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a14:	2f78      	cmp	r7, #120	; 0x78
 8005a16:	4691      	mov	r9, r2
 8005a18:	4680      	mov	r8, r0
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	469a      	mov	sl, r3
 8005a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a22:	d807      	bhi.n	8005a34 <_printf_i+0x28>
 8005a24:	2f62      	cmp	r7, #98	; 0x62
 8005a26:	d80a      	bhi.n	8005a3e <_printf_i+0x32>
 8005a28:	2f00      	cmp	r7, #0
 8005a2a:	f000 80d4 	beq.w	8005bd6 <_printf_i+0x1ca>
 8005a2e:	2f58      	cmp	r7, #88	; 0x58
 8005a30:	f000 80c0 	beq.w	8005bb4 <_printf_i+0x1a8>
 8005a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a3c:	e03a      	b.n	8005ab4 <_printf_i+0xa8>
 8005a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a42:	2b15      	cmp	r3, #21
 8005a44:	d8f6      	bhi.n	8005a34 <_printf_i+0x28>
 8005a46:	a101      	add	r1, pc, #4	; (adr r1, 8005a4c <_printf_i+0x40>)
 8005a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005ab9 	.word	0x08005ab9
 8005a54:	08005a35 	.word	0x08005a35
 8005a58:	08005a35 	.word	0x08005a35
 8005a5c:	08005a35 	.word	0x08005a35
 8005a60:	08005a35 	.word	0x08005a35
 8005a64:	08005ab9 	.word	0x08005ab9
 8005a68:	08005a35 	.word	0x08005a35
 8005a6c:	08005a35 	.word	0x08005a35
 8005a70:	08005a35 	.word	0x08005a35
 8005a74:	08005a35 	.word	0x08005a35
 8005a78:	08005bbd 	.word	0x08005bbd
 8005a7c:	08005ae5 	.word	0x08005ae5
 8005a80:	08005b77 	.word	0x08005b77
 8005a84:	08005a35 	.word	0x08005a35
 8005a88:	08005a35 	.word	0x08005a35
 8005a8c:	08005bdf 	.word	0x08005bdf
 8005a90:	08005a35 	.word	0x08005a35
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005a35 	.word	0x08005a35
 8005a9c:	08005a35 	.word	0x08005a35
 8005aa0:	08005b7f 	.word	0x08005b7f
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	1d1a      	adds	r2, r3, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	602a      	str	r2, [r5, #0]
 8005aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e09f      	b.n	8005bf8 <_printf_i+0x1ec>
 8005ab8:	6820      	ldr	r0, [r4, #0]
 8005aba:	682b      	ldr	r3, [r5, #0]
 8005abc:	0607      	lsls	r7, r0, #24
 8005abe:	f103 0104 	add.w	r1, r3, #4
 8005ac2:	6029      	str	r1, [r5, #0]
 8005ac4:	d501      	bpl.n	8005aca <_printf_i+0xbe>
 8005ac6:	681e      	ldr	r6, [r3, #0]
 8005ac8:	e003      	b.n	8005ad2 <_printf_i+0xc6>
 8005aca:	0646      	lsls	r6, r0, #25
 8005acc:	d5fb      	bpl.n	8005ac6 <_printf_i+0xba>
 8005ace:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ad2:	2e00      	cmp	r6, #0
 8005ad4:	da03      	bge.n	8005ade <_printf_i+0xd2>
 8005ad6:	232d      	movs	r3, #45	; 0x2d
 8005ad8:	4276      	negs	r6, r6
 8005ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ade:	485a      	ldr	r0, [pc, #360]	; (8005c48 <_printf_i+0x23c>)
 8005ae0:	230a      	movs	r3, #10
 8005ae2:	e012      	b.n	8005b0a <_printf_i+0xfe>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	6820      	ldr	r0, [r4, #0]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	6029      	str	r1, [r5, #0]
 8005aec:	0605      	lsls	r5, r0, #24
 8005aee:	d501      	bpl.n	8005af4 <_printf_i+0xe8>
 8005af0:	681e      	ldr	r6, [r3, #0]
 8005af2:	e002      	b.n	8005afa <_printf_i+0xee>
 8005af4:	0641      	lsls	r1, r0, #25
 8005af6:	d5fb      	bpl.n	8005af0 <_printf_i+0xe4>
 8005af8:	881e      	ldrh	r6, [r3, #0]
 8005afa:	4853      	ldr	r0, [pc, #332]	; (8005c48 <_printf_i+0x23c>)
 8005afc:	2f6f      	cmp	r7, #111	; 0x6f
 8005afe:	bf0c      	ite	eq
 8005b00:	2308      	moveq	r3, #8
 8005b02:	230a      	movne	r3, #10
 8005b04:	2100      	movs	r1, #0
 8005b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b0a:	6865      	ldr	r5, [r4, #4]
 8005b0c:	60a5      	str	r5, [r4, #8]
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	bfa2      	ittt	ge
 8005b12:	6821      	ldrge	r1, [r4, #0]
 8005b14:	f021 0104 	bicge.w	r1, r1, #4
 8005b18:	6021      	strge	r1, [r4, #0]
 8005b1a:	b90e      	cbnz	r6, 8005b20 <_printf_i+0x114>
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	d04b      	beq.n	8005bb8 <_printf_i+0x1ac>
 8005b20:	4615      	mov	r5, r2
 8005b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b26:	fb03 6711 	mls	r7, r3, r1, r6
 8005b2a:	5dc7      	ldrb	r7, [r0, r7]
 8005b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b30:	4637      	mov	r7, r6
 8005b32:	42bb      	cmp	r3, r7
 8005b34:	460e      	mov	r6, r1
 8005b36:	d9f4      	bls.n	8005b22 <_printf_i+0x116>
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d10b      	bne.n	8005b54 <_printf_i+0x148>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	07de      	lsls	r6, r3, #31
 8005b40:	d508      	bpl.n	8005b54 <_printf_i+0x148>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	6861      	ldr	r1, [r4, #4]
 8005b46:	4299      	cmp	r1, r3
 8005b48:	bfde      	ittt	le
 8005b4a:	2330      	movle	r3, #48	; 0x30
 8005b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b54:	1b52      	subs	r2, r2, r5
 8005b56:	6122      	str	r2, [r4, #16]
 8005b58:	f8cd a000 	str.w	sl, [sp]
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	aa03      	add	r2, sp, #12
 8005b60:	4621      	mov	r1, r4
 8005b62:	4640      	mov	r0, r8
 8005b64:	f7ff fee4 	bl	8005930 <_printf_common>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d14a      	bne.n	8005c02 <_printf_i+0x1f6>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	b004      	add	sp, #16
 8005b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	f043 0320 	orr.w	r3, r3, #32
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	4833      	ldr	r0, [pc, #204]	; (8005c4c <_printf_i+0x240>)
 8005b80:	2778      	movs	r7, #120	; 0x78
 8005b82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	6829      	ldr	r1, [r5, #0]
 8005b8a:	061f      	lsls	r7, r3, #24
 8005b8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b90:	d402      	bmi.n	8005b98 <_printf_i+0x18c>
 8005b92:	065f      	lsls	r7, r3, #25
 8005b94:	bf48      	it	mi
 8005b96:	b2b6      	uxthmi	r6, r6
 8005b98:	07df      	lsls	r7, r3, #31
 8005b9a:	bf48      	it	mi
 8005b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8005ba0:	6029      	str	r1, [r5, #0]
 8005ba2:	bf48      	it	mi
 8005ba4:	6023      	strmi	r3, [r4, #0]
 8005ba6:	b91e      	cbnz	r6, 8005bb0 <_printf_i+0x1a4>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	e7a7      	b.n	8005b04 <_printf_i+0xf8>
 8005bb4:	4824      	ldr	r0, [pc, #144]	; (8005c48 <_printf_i+0x23c>)
 8005bb6:	e7e4      	b.n	8005b82 <_printf_i+0x176>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	e7bd      	b.n	8005b38 <_printf_i+0x12c>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	6826      	ldr	r6, [r4, #0]
 8005bc0:	6961      	ldr	r1, [r4, #20]
 8005bc2:	1d18      	adds	r0, r3, #4
 8005bc4:	6028      	str	r0, [r5, #0]
 8005bc6:	0635      	lsls	r5, r6, #24
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	d501      	bpl.n	8005bd0 <_printf_i+0x1c4>
 8005bcc:	6019      	str	r1, [r3, #0]
 8005bce:	e002      	b.n	8005bd6 <_printf_i+0x1ca>
 8005bd0:	0670      	lsls	r0, r6, #25
 8005bd2:	d5fb      	bpl.n	8005bcc <_printf_i+0x1c0>
 8005bd4:	8019      	strh	r1, [r3, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	4615      	mov	r5, r2
 8005bdc:	e7bc      	b.n	8005b58 <_printf_i+0x14c>
 8005bde:	682b      	ldr	r3, [r5, #0]
 8005be0:	1d1a      	adds	r2, r3, #4
 8005be2:	602a      	str	r2, [r5, #0]
 8005be4:	681d      	ldr	r5, [r3, #0]
 8005be6:	6862      	ldr	r2, [r4, #4]
 8005be8:	2100      	movs	r1, #0
 8005bea:	4628      	mov	r0, r5
 8005bec:	f7fa faf8 	bl	80001e0 <memchr>
 8005bf0:	b108      	cbz	r0, 8005bf6 <_printf_i+0x1ea>
 8005bf2:	1b40      	subs	r0, r0, r5
 8005bf4:	6060      	str	r0, [r4, #4]
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c00:	e7aa      	b.n	8005b58 <_printf_i+0x14c>
 8005c02:	6923      	ldr	r3, [r4, #16]
 8005c04:	462a      	mov	r2, r5
 8005c06:	4649      	mov	r1, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	47d0      	blx	sl
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d0ad      	beq.n	8005b6c <_printf_i+0x160>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	079b      	lsls	r3, r3, #30
 8005c14:	d413      	bmi.n	8005c3e <_printf_i+0x232>
 8005c16:	68e0      	ldr	r0, [r4, #12]
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	4298      	cmp	r0, r3
 8005c1c:	bfb8      	it	lt
 8005c1e:	4618      	movlt	r0, r3
 8005c20:	e7a6      	b.n	8005b70 <_printf_i+0x164>
 8005c22:	2301      	movs	r3, #1
 8005c24:	4632      	mov	r2, r6
 8005c26:	4649      	mov	r1, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	47d0      	blx	sl
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d09d      	beq.n	8005b6c <_printf_i+0x160>
 8005c30:	3501      	adds	r5, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	9903      	ldr	r1, [sp, #12]
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	dcf2      	bgt.n	8005c22 <_printf_i+0x216>
 8005c3c:	e7eb      	b.n	8005c16 <_printf_i+0x20a>
 8005c3e:	2500      	movs	r5, #0
 8005c40:	f104 0619 	add.w	r6, r4, #25
 8005c44:	e7f5      	b.n	8005c32 <_printf_i+0x226>
 8005c46:	bf00      	nop
 8005c48:	08005da9 	.word	0x08005da9
 8005c4c:	08005dba 	.word	0x08005dba

08005c50 <memmove>:
 8005c50:	4288      	cmp	r0, r1
 8005c52:	b510      	push	{r4, lr}
 8005c54:	eb01 0402 	add.w	r4, r1, r2
 8005c58:	d902      	bls.n	8005c60 <memmove+0x10>
 8005c5a:	4284      	cmp	r4, r0
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	d807      	bhi.n	8005c70 <memmove+0x20>
 8005c60:	1e43      	subs	r3, r0, #1
 8005c62:	42a1      	cmp	r1, r4
 8005c64:	d008      	beq.n	8005c78 <memmove+0x28>
 8005c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c6e:	e7f8      	b.n	8005c62 <memmove+0x12>
 8005c70:	4402      	add	r2, r0
 8005c72:	4601      	mov	r1, r0
 8005c74:	428a      	cmp	r2, r1
 8005c76:	d100      	bne.n	8005c7a <memmove+0x2a>
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c82:	e7f7      	b.n	8005c74 <memmove+0x24>

08005c84 <_sbrk_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	; (8005ca0 <_sbrk_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fb f830 	bl	8000cf4 <_sbrk>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_sbrk_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_sbrk_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	200002f4 	.word	0x200002f4

08005ca4 <memcpy>:
 8005ca4:	440a      	add	r2, r1
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cac:	d100      	bne.n	8005cb0 <memcpy+0xc>
 8005cae:	4770      	bx	lr
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	d1f9      	bne.n	8005cb2 <memcpy+0xe>
 8005cbe:	bd10      	pop	{r4, pc}

08005cc0 <_realloc_r>:
 8005cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4614      	mov	r4, r2
 8005cc8:	460e      	mov	r6, r1
 8005cca:	b921      	cbnz	r1, 8005cd6 <_realloc_r+0x16>
 8005ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	f7ff bc49 	b.w	8005568 <_malloc_r>
 8005cd6:	b92a      	cbnz	r2, 8005ce4 <_realloc_r+0x24>
 8005cd8:	f7ff fbda 	bl	8005490 <_free_r>
 8005cdc:	4625      	mov	r5, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce4:	f000 f81b 	bl	8005d1e <_malloc_usable_size_r>
 8005ce8:	4284      	cmp	r4, r0
 8005cea:	4607      	mov	r7, r0
 8005cec:	d802      	bhi.n	8005cf4 <_realloc_r+0x34>
 8005cee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cf2:	d812      	bhi.n	8005d1a <_realloc_r+0x5a>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f7ff fc36 	bl	8005568 <_malloc_r>
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d0ed      	beq.n	8005cde <_realloc_r+0x1e>
 8005d02:	42bc      	cmp	r4, r7
 8005d04:	4622      	mov	r2, r4
 8005d06:	4631      	mov	r1, r6
 8005d08:	bf28      	it	cs
 8005d0a:	463a      	movcs	r2, r7
 8005d0c:	f7ff ffca 	bl	8005ca4 <memcpy>
 8005d10:	4631      	mov	r1, r6
 8005d12:	4640      	mov	r0, r8
 8005d14:	f7ff fbbc 	bl	8005490 <_free_r>
 8005d18:	e7e1      	b.n	8005cde <_realloc_r+0x1e>
 8005d1a:	4635      	mov	r5, r6
 8005d1c:	e7df      	b.n	8005cde <_realloc_r+0x1e>

08005d1e <_malloc_usable_size_r>:
 8005d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d22:	1f18      	subs	r0, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bfbc      	itt	lt
 8005d28:	580b      	ldrlt	r3, [r1, r0]
 8005d2a:	18c0      	addlt	r0, r0, r3
 8005d2c:	4770      	bx	lr
	...

08005d30 <_init>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr

08005d3c <_fini>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr
