
HAL_GPIO_stepmotorvebutonuyuglamasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b0  080038b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b8  080038b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080038cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080038cc  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec94  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cda  00000000  00000000  0002ed13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000309f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b32  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c78  00000000  00000000  00032362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010108  00000000  00000000  00053fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d413a  00000000  00000000  000640e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c80  00000000  00000000  0013821c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0013be9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003850 	.word	0x08003850

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003850 	.word	0x08003850

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc7d 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f9f5 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fac7 	bl	8000a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 fa95 	bl	8000a10 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004e6:	f000 fa3f 	bl	8000968 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float currentAngle = 0;
 80004ea:	f04f 0300 	mov.w	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  uint8_t buton;
  HAL_TIM_Base_Start(&htim1);
 80004f0:	4825      	ldr	r0, [pc, #148]	; (8000588 <main+0xb8>)
 80004f2:	f002 f9f1 	bl	80028d8 <HAL_TIM_Base_Start>
  while (1)
       {


     	  buton = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13);
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4824      	ldr	r0, [pc, #144]	; (800058c <main+0xbc>)
 80004fc:	f000 ff6a 	bl	80013d4 <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	70fb      	strb	r3, [r7, #3]
         /* USER CODE END WHILE */
     	  if (buton == 1) // Buton basıldığında LOW olur
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d128      	bne.n	800055c <main+0x8c>
     	      {
     		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	481e      	ldr	r0, [pc, #120]	; (800058c <main+0xbc>)
 8000512:	f000 ff77 	bl	8001404 <HAL_GPIO_WritePin>
     		   for (int i=0; i<=360; i++)
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e009      	b.n	8000530 <main+0x60>
     		    {
     		      Stepper_rotate(i, 10);
 800051c:	210a      	movs	r1, #10
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	f000 f836 	bl	8000590 <Stepper_rotate>
     		      HAL_Delay(250);
 8000524:	20fa      	movs	r0, #250	; 0xfa
 8000526:	f000 fcd1 	bl	8000ecc <HAL_Delay>
     		   for (int i=0; i<=360; i++)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000536:	ddf1      	ble.n	800051c <main+0x4c>
     		    }
     		    for (int i=360; i>=0; i--)
 8000538:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	e009      	b.n	8000554 <main+0x84>
     		    {
     		      Stepper_rotate(i, 10);
 8000540:	210a      	movs	r1, #10
 8000542:	68b8      	ldr	r0, [r7, #8]
 8000544:	f000 f824 	bl	8000590 <Stepper_rotate>
     		      HAL_Delay(250);
 8000548:	20fa      	movs	r0, #250	; 0xfa
 800054a:	f000 fcbf 	bl	8000ecc <HAL_Delay>
     		    for (int i=360; i>=0; i--)
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	3b01      	subs	r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	2b00      	cmp	r3, #0
 8000558:	daf2      	bge.n	8000540 <main+0x70>
 800055a:	e7cc      	b.n	80004f6 <main+0x26>
     		    }// Step motor çalıştırılır
     	      }
     	      else
     	      {
     	        // Buton basılmadığında LED yanıp söner
     	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); // User LED (GPIOB Pin 0) yanıp söner
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0xbc>)
 8000564:	f000 ff4e 	bl	8001404 <HAL_GPIO_WritePin>
     	        HAL_Delay(2000);
 8000568:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800056c:	f000 fcae 	bl	8000ecc <HAL_Delay>
     	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <main+0xbc>)
 8000578:	f000 ff44 	bl	8001404 <HAL_GPIO_WritePin>
     	        HAL_Delay(2000);
 800057c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000580:	f000 fca4 	bl	8000ecc <HAL_Delay>
     	  buton = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13);
 8000584:	e7b7      	b.n	80004f6 <main+0x26>
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028
 800058c:	48000400 	.word	0x48000400

08000590 <Stepper_rotate>:
     * @brief System Clock Configuration
     * @retval None
     */
 float currentAngle = 0;
 void Stepper_rotate (int angle, int rpm)
 {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
 	int changeinangle = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 	changeinangle = angle-currentAngle;  // calculate the angle by which the motor needed to be rotated
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	ee07 3a90 	vmov	s15, r3
 80005a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <Stepper_rotate+0x94>)
 80005aa:	edd3 7a00 	vldr	s15, [r3]
 80005ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b6:	ee17 3a90 	vmov	r3, s15
 80005ba:	60fb      	str	r3, [r7, #12]
 	if (changeinangle > 0.71)  // clockwise
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd13      	ble.n	80005ea <Stepper_rotate+0x5a>
 	{
 		stepper_step_angle (changeinangle,0,rpm);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	ee07 3a90 	vmov	s15, r3
 80005c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005cc:	6839      	ldr	r1, [r7, #0]
 80005ce:	2000      	movs	r0, #0
 80005d0:	eeb0 0a67 	vmov.f32	s0, s15
 80005d4:	f000 f828 	bl	8000628 <stepper_step_angle>
 		currentAngle = angle;  // save the angle as current angle
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	ee07 3a90 	vmov	s15, r3
 80005de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <Stepper_rotate+0x94>)
 80005e4:	edc3 7a00 	vstr	s15, [r3]
 	{
 		changeinangle = -(changeinangle);
 		stepper_step_angle (changeinangle,1,rpm);
 		currentAngle = angle;
 	}
 }
 80005e8:	e018      	b.n	800061c <Stepper_rotate+0x8c>
 	else if (changeinangle <0.71) // CCK
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dc15      	bgt.n	800061c <Stepper_rotate+0x8c>
 		changeinangle = -(changeinangle);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	425b      	negs	r3, r3
 80005f4:	60fb      	str	r3, [r7, #12]
 		stepper_step_angle (changeinangle,1,rpm);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000600:	6839      	ldr	r1, [r7, #0]
 8000602:	2001      	movs	r0, #1
 8000604:	eeb0 0a67 	vmov.f32	s0, s15
 8000608:	f000 f80e 	bl	8000628 <stepper_step_angle>
 		currentAngle = angle;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000616:	4b03      	ldr	r3, [pc, #12]	; (8000624 <Stepper_rotate+0x94>)
 8000618:	edc3 7a00 	vstr	s15, [r3]
 }
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000fc 	.word	0x200000fc

08000628 <stepper_step_angle>:
 void stepper_step_angle (float angle, int direction, int rpm) //direction-> 0 for CK, 1 for CCK
 {
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000632:	60b8      	str	r0, [r7, #8]
 8000634:	6079      	str	r1, [r7, #4]
   float anglepersequence = 0.703125;  // 360 = 512 sequences
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <stepper_step_angle+0x90>)
 8000638:	61bb      	str	r3, [r7, #24]
   int numberofsequences = (int) (angle/anglepersequence);
 800063a:	edd7 6a03 	vldr	s13, [r7, #12]
 800063e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 3a90 	vmov	r3, s15
 800064e:	617b      	str	r3, [r7, #20]
   for (int seq=0; seq<numberofsequences; seq++)
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
 8000654:	e027      	b.n	80006a6 <stepper_step_angle+0x7e>
   {
 	if (direction == 0)  // for clockwise
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10f      	bne.n	800067c <stepper_step_angle+0x54>
 	{
        	  for (int step=7; step>=0; step--)
 800065c:	2307      	movs	r3, #7
 800065e:	623b      	str	r3, [r7, #32]
 8000660:	e008      	b.n	8000674 <stepper_step_angle+0x4c>
 	  {
 	    stepper_half_drive(step);
 8000662:	6a38      	ldr	r0, [r7, #32]
 8000664:	f000 f856 	bl	8000714 <stepper_half_drive>
 	    stepper_set_rpm(rpm);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f827 	bl	80006bc <stepper_set_rpm>
        	  for (int step=7; step>=0; step--)
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	3b01      	subs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	2b00      	cmp	r3, #0
 8000678:	daf3      	bge.n	8000662 <stepper_step_angle+0x3a>
 800067a:	e011      	b.n	80006a0 <stepper_step_angle+0x78>
 	  }
 	}
 	else if (direction == 1)  // for anti-clockwise
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10e      	bne.n	80006a0 <stepper_step_angle+0x78>
 	{
 	  for (int step=0; step<=7; step++)
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
 8000686:	e008      	b.n	800069a <stepper_step_angle+0x72>
 	  {
 	    stepper_half_drive(step);
 8000688:	69f8      	ldr	r0, [r7, #28]
 800068a:	f000 f843 	bl	8000714 <stepper_half_drive>
 	    stepper_set_rpm(rpm);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f814 	bl	80006bc <stepper_set_rpm>
 	  for (int step=0; step<=7; step++)
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	3301      	adds	r3, #1
 8000698:	61fb      	str	r3, [r7, #28]
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	2b07      	cmp	r3, #7
 800069e:	ddf3      	ble.n	8000688 <stepper_step_angle+0x60>
   for (int seq=0; seq<numberofsequences; seq++)
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	3301      	adds	r3, #1
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
 80006a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbd3      	blt.n	8000656 <stepper_step_angle+0x2e>
 	  }
 	}
   }
 }
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	3f340000 	.word	0x3f340000

080006bc <stepper_set_rpm>:

 void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
 {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 	delay(60000000/stepsperrev/rpm);
 80006c4:	f643 1238 	movw	r2, #14648	; 0x3938
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f805 	bl	80006e0 <delay>
 }
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <delay>:
 void delay (uint16_t us)
 {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	80fb      	strh	r3, [r7, #6]
   __HAL_TIM_SET_COUNTER(&htim1, 0);
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <delay+0x30>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
   while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 80006f2:	bf00      	nop
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <delay+0x30>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d3f9      	bcc.n	80006f4 <delay+0x14>
 }
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000028 	.word	0x20000028

08000714 <stepper_half_drive>:
 void stepper_half_drive (int step)
 {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
   switch (step){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b07      	cmp	r3, #7
 8000720:	f200 80cc 	bhi.w	80008bc <stepper_half_drive+0x1a8>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <stepper_half_drive+0x18>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800074d 	.word	0x0800074d
 8000730:	0800077b 	.word	0x0800077b
 8000734:	080007a9 	.word	0x080007a9
 8000738:	080007d7 	.word	0x080007d7
 800073c:	08000805 	.word	0x08000805
 8000740:	08000833 	.word	0x08000833
 8000744:	08000861 	.word	0x08000861
 8000748:	0800088f 	.word	0x0800088f
          case 0:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 800074c:	2201      	movs	r2, #1
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	485c      	ldr	r0, [pc, #368]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000752:	f000 fe57 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 8000756:	2200      	movs	r2, #0
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	485a      	ldr	r0, [pc, #360]	; (80008c4 <stepper_half_drive+0x1b0>)
 800075c:	f000 fe52 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	4857      	ldr	r0, [pc, #348]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000768:	f000 fe4c 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	4854      	ldr	r0, [pc, #336]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000774:	f000 fe46 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 8000778:	e0a0      	b.n	80008bc <stepper_half_drive+0x1a8>

 	  case 1:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4851      	ldr	r0, [pc, #324]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000780:	f000 fe40 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	484e      	ldr	r0, [pc, #312]	; (80008c4 <stepper_half_drive+0x1b0>)
 800078a:	f000 fe3b 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	484b      	ldr	r0, [pc, #300]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000796:	f000 fe35 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007a2:	f000 fe2f 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 80007a6:	e089      	b.n	80008bc <stepper_half_drive+0x1a8>

           case 2:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007ae:	f000 fe29 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 80007b2:	2201      	movs	r2, #1
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	4843      	ldr	r0, [pc, #268]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007b8:	f000 fe24 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4840      	ldr	r0, [pc, #256]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007c4:	f000 fe1e 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	483d      	ldr	r0, [pc, #244]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007d0:	f000 fe18 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 80007d4:	e072      	b.n	80008bc <stepper_half_drive+0x1a8>

 	  case 3:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 80007d6:	2200      	movs	r2, #0
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	483a      	ldr	r0, [pc, #232]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007dc:	f000 fe12 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);   // IN2
 80007e0:	2201      	movs	r2, #1
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	4837      	ldr	r0, [pc, #220]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007e6:	f000 fe0d 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f0:	4834      	ldr	r0, [pc, #208]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007f2:	f000 fe07 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	4831      	ldr	r0, [pc, #196]	; (80008c4 <stepper_half_drive+0x1b0>)
 80007fe:	f000 fe01 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 8000802:	e05b      	b.n	80008bc <stepper_half_drive+0x1a8>

 	  case 4:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000804:	2200      	movs	r2, #0
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	482e      	ldr	r0, [pc, #184]	; (80008c4 <stepper_half_drive+0x1b0>)
 800080a:	f000 fdfb 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 800080e:	2200      	movs	r2, #0
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	482c      	ldr	r0, [pc, #176]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000814:	f000 fdf6 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	4829      	ldr	r0, [pc, #164]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000820:	f000 fdf0 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);   // IN4
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	4826      	ldr	r0, [pc, #152]	; (80008c4 <stepper_half_drive+0x1b0>)
 800082c:	f000 fdea 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 8000830:	e044      	b.n	80008bc <stepper_half_drive+0x1a8>

 	  case 5:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	4823      	ldr	r0, [pc, #140]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000838:	f000 fde4 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 800083c:	2200      	movs	r2, #0
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	4820      	ldr	r0, [pc, #128]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000842:	f000 fddf 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);   // IN3
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	481d      	ldr	r0, [pc, #116]	; (80008c4 <stepper_half_drive+0x1b0>)
 800084e:	f000 fdd9 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // IN4
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000858:	481a      	ldr	r0, [pc, #104]	; (80008c4 <stepper_half_drive+0x1b0>)
 800085a:	f000 fdd3 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 800085e:	e02d      	b.n	80008bc <stepper_half_drive+0x1a8>

 	  case 6:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);   // IN1
 8000860:	2200      	movs	r2, #0
 8000862:	2140      	movs	r1, #64	; 0x40
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000866:	f000 fdcd 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 800086a:	2200      	movs	r2, #0
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	4815      	ldr	r0, [pc, #84]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000870:	f000 fdc8 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <stepper_half_drive+0x1b0>)
 800087c:	f000 fdc2 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // IN4
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000888:	f000 fdbc 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 800088c:	e016      	b.n	80008bc <stepper_half_drive+0x1a8>

 	  case 7:
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);   // IN1
 800088e:	2201      	movs	r2, #1
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <stepper_half_drive+0x1b0>)
 8000894:	f000 fdb6 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);   // IN2
 8000898:	2200      	movs	r2, #0
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <stepper_half_drive+0x1b0>)
 800089e:	f000 fdb1 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);   // IN3
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <stepper_half_drive+0x1b0>)
 80008aa:	f000 fdab 	bl	8001404 <HAL_GPIO_WritePin>
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);   // IN4
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <stepper_half_drive+0x1b0>)
 80008b6:	f000 fda5 	bl	8001404 <HAL_GPIO_WritePin>
 		  break;
 80008ba:	bf00      	nop

 	}
 }
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	48000800 	.word	0x48000800

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b096      	sub	sp, #88	; 0x58
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2244      	movs	r2, #68	; 0x44
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 ff8d 	bl	80037f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ee:	f000 fdaf 	bl	8001450 <HAL_PWREx_ControlVoltageScaling>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f8:	f000 f960 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	2303      	movs	r3, #3
 800090c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000912:	230a      	movs	r3, #10
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fde8 	bl	80014fc <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000932:	f000 f943 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f9e8 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800095a:	f000 f92f 	bl	8000bbc <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3758      	adds	r7, #88	; 0x58
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_TIM1_Init+0xa0>)
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <MX_TIM1_Init+0xa4>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40-1;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_TIM1_Init+0xa0>)
 800098e:	2227      	movs	r2, #39	; 0x27
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_TIM1_Init+0xa0>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_TIM1_Init+0xa0>)
 800099a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800099e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_TIM1_Init+0xa0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_TIM1_Init+0xa0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_TIM1_Init+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b2:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_TIM1_Init+0xa0>)
 80009b4:	f001 ff38 	bl	8002828 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009be:	f000 f8fd 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <MX_TIM1_Init+0xa0>)
 80009d0:	f001 ffd6 	bl	8002980 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009da:	f000 f8ef 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM1_Init+0xa0>)
 80009f0:	f002 f9a4 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009fa:	f000 f8df 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000028 	.word	0x20000028
 8000a0c:	40012c00 	.word	0x40012c00

08000a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_USART2_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x58>)
 8000a54:	f002 f9e0 	bl	8002e18 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f8ad 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000074 	.word	0x20000074
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a49      	ldr	r2, [pc, #292]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	4b44      	ldr	r3, [pc, #272]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a43      	ldr	r2, [pc, #268]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a3d      	ldr	r2, [pc, #244]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a37      	ldr	r2, [pc, #220]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <MX_GPIO_Init+0x140>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	21b0      	movs	r1, #176	; 0xb0
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f000 fc89 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	482e      	ldr	r0, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000afa:	f000 fc83 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0x148>)
 8000b16:	f000 fae3 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000b1a:	23b0      	movs	r3, #176	; 0xb0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fad4 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000b38:	2340      	movs	r3, #64	; 0x40
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fac7 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_GPIO_Init+0x144>)
 8000b6c:	f000 fab8 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b70:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <MX_GPIO_Init+0x148>)
 8000b86:	f000 faab 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fa9d 	bl	80010e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x44>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_MspInit+0x44>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HAL_MspInit+0x44>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_TIM_Base_MspInit+0x3c>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0a4      	sub	sp, #144	; 0x90
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2268      	movs	r2, #104	; 0x68
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 fdc0 	bl	80037f6 <memset>
  if(huart->Instance==USART2)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <HAL_UART_MspInit+0xb0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13a      	bne.n	8000cf6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fa6d 	bl	800216c <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c98:	f7ff ff90 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f000 f9f5 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3790      	adds	r7, #144	; 0x90
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40021000 	.word	0x40021000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f89a 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 fd2b 	bl	8003808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db2:	f7ff fb8d 	bl	80004d0 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	080038c0 	.word	0x080038c0
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	20000104 	.word	0x20000104

08000dd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_Init+0x3c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_Init+0x3c>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f944 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f80f 	bl	8000e14 <HAL_InitTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	e001      	b.n	8000e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e02:	f7ff fee1 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_InitTick+0x70>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f941 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10f      	bne.n	8000e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d809      	bhi.n	8000e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f919 	bl	800108e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0x74>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e004      	b.n	8000e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000100 	.word	0x20000100

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000100 	.word	0x20000100

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5c 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb0 	bl	8001034 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	e154      	b.n	800139a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2101      	movs	r1, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8146 	beq.w	8001394 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d005      	beq.n	8001120 <HAL_GPIO_Init+0x40>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d130      	bne.n	8001182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001156:	2201      	movs	r2, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 0201 	and.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b03      	cmp	r3, #3
 800118c:	d017      	beq.n	80011be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d123      	bne.n	8001212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	6939      	ldr	r1, [r7, #16]
 800120e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0203 	and.w	r2, r3, #3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a0 	beq.w	8001394 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 8001256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001258:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6613      	str	r3, [r2, #96]	; 0x60
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800126c:	4a53      	ldr	r2, [pc, #332]	; (80013bc <HAL_GPIO_Init+0x2dc>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001296:	d019      	beq.n	80012cc <HAL_GPIO_Init+0x1ec>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <HAL_GPIO_Init+0x2e0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d013      	beq.n	80012c8 <HAL_GPIO_Init+0x1e8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_GPIO_Init+0x2e4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d00d      	beq.n	80012c4 <HAL_GPIO_Init+0x1e4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a47      	ldr	r2, [pc, #284]	; (80013c8 <HAL_GPIO_Init+0x2e8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d007      	beq.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a46      	ldr	r2, [pc, #280]	; (80013cc <HAL_GPIO_Init+0x2ec>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d101      	bne.n	80012bc <HAL_GPIO_Init+0x1dc>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e008      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012bc:	2307      	movs	r3, #7
 80012be:	e006      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c0:	2303      	movs	r3, #3
 80012c2:	e004      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e002      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_GPIO_Init+0x1ee>
 80012cc:	2300      	movs	r3, #0
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	f002 0203 	and.w	r2, r2, #3
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	4093      	lsls	r3, r2
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012de:	4937      	ldr	r1, [pc, #220]	; (80013bc <HAL_GPIO_Init+0x2dc>)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800133a:	4a25      	ldr	r2, [pc, #148]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4013      	ands	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_GPIO_Init+0x2f0>)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	3301      	adds	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f47f aea3 	bne.w	80010f0 <HAL_GPIO_Init+0x10>
  }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000
 80013c0:	48000400 	.word	0x48000400
 80013c4:	48000800 	.word	0x48000800
 80013c8:	48000c00 	.word	0x48000c00
 80013cc:	48001000 	.word	0x48001000
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001420:	e002      	b.n	8001428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_PWREx_GetVoltageRange+0x18>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40007000 	.word	0x40007000

08001450 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145e:	d130      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146c:	d038      	beq.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001478:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2232      	movs	r2, #50	; 0x32
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0c9b      	lsrs	r3, r3, #18
 8001490:	3301      	adds	r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001494:	e002      	b.n	800149c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3b01      	subs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d102      	bne.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f2      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014bc:	d110      	bne.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e00f      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ce:	d007      	beq.n	80014e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40007000 	.word	0x40007000
 80014f4:	20000000 	.word	0x20000000
 80014f8:	431bde83 	.word	0x431bde83

080014fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f000 bc02 	b.w	8001d14 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001510:	4b96      	ldr	r3, [pc, #600]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800151a:	4b94      	ldr	r3, [pc, #592]	; (800176c <HAL_RCC_OscConfig+0x270>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80e4 	beq.w	80016fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_RCC_OscConfig+0x4c>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	f040 808b 	bne.w	8001656 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b01      	cmp	r3, #1
 8001544:	f040 8087 	bne.w	8001656 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001548:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x64>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e3d9      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1a      	ldr	r2, [r3, #32]
 8001564:	4b81      	ldr	r3, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d004      	beq.n	800157a <HAL_RCC_OscConfig+0x7e>
 8001570:	4b7e      	ldr	r3, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001578:	e005      	b.n	8001586 <HAL_RCC_OscConfig+0x8a>
 800157a:	4b7c      	ldr	r3, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x270>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001586:	4293      	cmp	r3, r2
 8001588:	d223      	bcs.n	80015d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fd8c 	bl	80020ac <RCC_SetFlashLatencyFromMSIRange>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e3ba      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159e:	4b73      	ldr	r3, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a72      	ldr	r2, [pc, #456]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	496d      	ldr	r1, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015bc:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	4968      	ldr	r1, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e025      	b.n	800161e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015d2:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4960      	ldr	r1, [pc, #384]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f0:	4b5e      	ldr	r3, [pc, #376]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	495b      	ldr	r1, [pc, #364]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fd4c 	bl	80020ac <RCC_SetFlashLatencyFromMSIRange>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e37a      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800161e:	f000 fc81 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001622:	4602      	mov	r2, r0
 8001624:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4950      	ldr	r1, [pc, #320]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001630:	5ccb      	ldrb	r3, [r1, r3]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	4a4e      	ldr	r2, [pc, #312]	; (8001774 <HAL_RCC_OscConfig+0x278>)
 800163c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fbe6 	bl	8000e14 <HAL_InitTick>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d052      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	e35e      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d032      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a42      	ldr	r2, [pc, #264]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800166a:	f7ff fc23 	bl	8000eb4 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001672:	f7ff fc1f 	bl	8000eb4 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e347      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a35      	ldr	r2, [pc, #212]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4930      	ldr	r1, [pc, #192]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	492b      	ldr	r1, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
 80016c2:	e01a      	b.n	80016fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbf0 	bl	8000eb4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbec 	bl	8000eb4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e314      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1dc>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d073      	beq.n	80017ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x21c>
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2b0c      	cmp	r3, #12
 8001710:	d10e      	bne.n	8001730 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d10b      	bne.n	8001730 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d063      	beq.n	80017ec <HAL_RCC_OscConfig+0x2f0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d15f      	bne.n	80017ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e2f1      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d106      	bne.n	8001748 <HAL_RCC_OscConfig+0x24c>
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e025      	b.n	8001794 <HAL_RCC_OscConfig+0x298>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d114      	bne.n	800177c <HAL_RCC_OscConfig+0x280>
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a02      	ldr	r2, [pc, #8]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e013      	b.n	8001794 <HAL_RCC_OscConfig+0x298>
 800176c:	40021000 	.word	0x40021000
 8001770:	08003868 	.word	0x08003868
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004
 800177c:	4ba0      	ldr	r3, [pc, #640]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a9f      	ldr	r2, [pc, #636]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b9d      	ldr	r3, [pc, #628]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a9c      	ldr	r2, [pc, #624]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fb8a 	bl	8000eb4 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb86 	bl	8000eb4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e2ae      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b92      	ldr	r3, [pc, #584]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x2a8>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb76 	bl	8000eb4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fb72 	bl	8000eb4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e29a      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x2d0>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d060      	beq.n	80018bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d005      	beq.n	800180c <HAL_RCC_OscConfig+0x310>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d119      	bne.n	800183a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d116      	bne.n	800183a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800180c:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_OscConfig+0x328>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e277      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	061b      	lsls	r3, r3, #24
 8001832:	4973      	ldr	r1, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	e040      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d023      	beq.n	800188a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fb31 	bl	8000eb4 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fb2d 	bl	8000eb4 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e255      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	495f      	ldr	r1, [pc, #380]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	e018      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5c      	ldr	r2, [pc, #368]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fb0d 	bl	8000eb4 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fb09 	bl	8000eb4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e231      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b0:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d03c      	beq.n	8001942 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01c      	beq.n	800190a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d6:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fae8 	bl	8000eb4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fae4 	bl	8000eb4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e20c      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fa:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0ef      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3ec>
 8001908:	e01b      	b.n	8001942 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	4a3b      	ldr	r2, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff facb 	bl	8000eb4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff fac7 	bl	8000eb4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e1ef      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ef      	bne.n	8001922 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80a6 	beq.w	8001a9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10d      	bne.n	800197c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 8001966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196a:	6593      	str	r3, [r2, #88]	; 0x58
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001978:	2301      	movs	r3, #1
 800197a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x508>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	2b00      	cmp	r3, #0
 8001986:	d118      	bne.n	80019ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_RCC_OscConfig+0x508>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_RCC_OscConfig+0x508>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001994:	f7ff fa8e 	bl	8000eb4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199c:	f7ff fa8a 	bl	8000eb4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1b2      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0x508>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4d8>
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d2:	e029      	b.n	8001a28 <HAL_RCC_OscConfig+0x52c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d115      	bne.n	8001a08 <HAL_RCC_OscConfig+0x50c>
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x52c>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40007000 	.word	0x40007000
 8001a08:	4b9a      	ldr	r3, [pc, #616]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	4a99      	ldr	r2, [pc, #612]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a18:	4b96      	ldr	r3, [pc, #600]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a95      	ldr	r2, [pc, #596]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d016      	beq.n	8001a5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff fa40 	bl	8000eb4 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff fa3c 	bl	8000eb4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e162      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ed      	beq.n	8001a38 <HAL_RCC_OscConfig+0x53c>
 8001a5c:	e015      	b.n	8001a8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fa29 	bl	8000eb4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff fa25 	bl	8000eb4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e14b      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7c:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ed      	bne.n	8001a66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	4b78      	ldr	r3, [pc, #480]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0320 	and.w	r3, r3, #32
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01c      	beq.n	8001aea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ab0:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab6:	4a6f      	ldr	r2, [pc, #444]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f9f8 	bl	8000eb4 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac8:	f7ff f9f4 	bl	8000eb4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e11c      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ef      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x5cc>
 8001ae8:	e01b      	b.n	8001b22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af0:	4a60      	ldr	r2, [pc, #384]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f9db 	bl	8000eb4 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b02:	f7ff f9d7 	bl	8000eb4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0ff      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b14:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ef      	bne.n	8001b02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80f3 	beq.w	8001d12 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	f040 80c9 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b36:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d12c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	3b01      	subs	r3, #1
 8001b56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d123      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d113      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d109      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d06b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d062      	beq.n	8001c70 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0ac      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc6:	f7ff f975 	bl	8000eb4 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7ff f971 	bl	8000eb4 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e099      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x77c>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bfc:	3a01      	subs	r2, #1
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c06:	0212      	lsls	r2, r2, #8
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c0e:	0852      	lsrs	r2, r2, #1
 8001c10:	3a01      	subs	r2, #1
 8001c12:	0552      	lsls	r2, r2, #21
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1a:	0852      	lsrs	r2, r2, #1
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	0652      	lsls	r2, r2, #25
 8001c20:	4311      	orrs	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c26:	06d2      	lsls	r2, r2, #27
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	4912      	ldr	r1, [pc, #72]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c48:	f7ff f934 	bl	8000eb4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f930 	bl	8000eb4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e058      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_RCC_OscConfig+0x778>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6e:	e050      	b.n	8001d12 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e04f      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d144      	bne.n	8001d12 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ca0:	f7ff f908 	bl	8000eb4 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f904 	bl	8000eb4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e02c      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x7ac>
 8001cc6:	e024      	b.n	8001d12 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d01f      	beq.n	8001d0e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f8eb 	bl	8000eb4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f8e7 	bl	8000eb4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e00f      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4905      	ldr	r1, [pc, #20]	; (8001d1c <HAL_RCC_OscConfig+0x820>)
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x824>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e001      	b.n	8001d12 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	feeefffc 	.word	0xfeeefffc

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0e7      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4970      	ldr	r1, [pc, #448]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0cf      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b63      	ldr	r3, [pc, #396]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4960      	ldr	r1, [pc, #384]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04c      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d121      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0a6      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc2:	4b54      	ldr	r3, [pc, #336]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e09a      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dda:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e08e      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e086      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4943      	ldr	r1, [pc, #268]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0c:	f7ff f852 	bl	8000eb4 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e14:	f7ff f84e 	bl	8000eb4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e06e      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 020c 	and.w	r2, r3, #12
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1eb      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d208      	bcs.n	8001e6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	492b      	ldr	r1, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d210      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	4923      	ldr	r1, [pc, #140]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e036      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	4918      	ldr	r1, [pc, #96]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4910      	ldr	r1, [pc, #64]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ed8:	f000 f824 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	490b      	ldr	r1, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x1f4>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1fc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff89 	bl	8000e14 <HAL_InitTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f06:	7afb      	ldrb	r3, [r7, #11]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08003868 	.word	0x08003868
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d121      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d11e      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f64:	4b31      	ldr	r3, [pc, #196]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d102      	bne.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	e004      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_RCC_GetSysClockFreq+0x114>)
 8001faa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d134      	bne.n	800201c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0xa6>
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d003      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fc8:	e005      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fcc:	617b      	str	r3, [r7, #20]
      break;
 8001fce:	e005      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fd2:	617b      	str	r3, [r7, #20]
      break;
 8001fd4:	e002      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	617b      	str	r3, [r7, #20]
      break;
 8001fda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	fb03 f202 	mul.w	r2, r3, r2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_GetSysClockFreq+0x108>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	0e5b      	lsrs	r3, r3, #25
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	3301      	adds	r3, #1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800201c:	69bb      	ldr	r3, [r7, #24]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	08003880 	.word	0x08003880
 8002034:	00f42400 	.word	0x00f42400
 8002038:	007a1200 	.word	0x007a1200

0800203c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_RCC_GetHCLKFreq+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000000 	.word	0x20000000

08002054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002058:	f7ff fff0 	bl	800203c <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4904      	ldr	r1, [pc, #16]	; (800207c <HAL_RCC_GetPCLK1Freq+0x28>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	08003878 	.word	0x08003878

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002084:	f7ff ffda 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002088:	4602      	mov	r2, r0
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0adb      	lsrs	r3, r3, #11
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002096:	5ccb      	ldrb	r3, [r1, r3]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08003878 	.word	0x08003878

080020ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c4:	f7ff f9b6 	bl	8001434 <HAL_PWREx_GetVoltageRange>
 80020c8:	6178      	str	r0, [r7, #20]
 80020ca:	e014      	b.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020e4:	f7ff f9a6 	bl	8001434 <HAL_PWREx_GetVoltageRange>
 80020e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d10b      	bne.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d919      	bls.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2ba0      	cmp	r3, #160	; 0xa0
 8002108:	d902      	bls.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800210a:	2302      	movs	r3, #2
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	e013      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e010      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d902      	bls.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800211c:	2303      	movs	r3, #3
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e00a      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d102      	bne.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002128:	2302      	movs	r3, #2
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e004      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b70      	cmp	r3, #112	; 0x70
 8002132:	d101      	bne.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 0207 	bic.w	r2, r3, #7
 8002140:	4909      	ldr	r1, [pc, #36]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	429a      	cmp	r2, r3
 8002154:	d001      	beq.n	800215a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40022000 	.word	0x40022000

0800216c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002174:	2300      	movs	r3, #0
 8002176:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002178:	2300      	movs	r3, #0
 800217a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002184:	2b00      	cmp	r3, #0
 8002186:	d031      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002190:	d01a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002192:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002196:	d814      	bhi.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800219c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021a0:	d10f      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ae:	e00c      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fa44 	bl	8002644 <RCCEx_PLLSAI1_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c0:	e003      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	74fb      	strb	r3, [r7, #19]
      break;
 80021c6:	e000      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d0:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	494e      	ldr	r1, [pc, #312]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e6:	e001      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 809e 	beq.w	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800223c:	f7fe fe3a 	bl	8000eb4 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002242:	e009      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7fe fe36 	bl	8000eb4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d902      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	74fb      	strb	r3, [r7, #19]
        break;
 8002256:	e005      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ef      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d15a      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002274:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01e      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	429a      	cmp	r2, r3
 8002284:	d019      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002290:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002298:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d016      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fdf6 	bl	8000eb4 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ca:	e00b      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022cc:	f7fe fdf2 	bl	8000eb4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d902      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	74fb      	strb	r3, [r7, #19]
            break;
 80022e2:	e006      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ec      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002306:	4904      	ldr	r1, [pc, #16]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800230e:	e009      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
 8002314:	e006      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002324:	7c7b      	ldrb	r3, [r7, #17]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b9e      	ldr	r3, [pc, #632]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	4a9d      	ldr	r2, [pc, #628]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002342:	4b98      	ldr	r3, [pc, #608]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f023 0203 	bic.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4994      	ldr	r1, [pc, #592]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002364:	4b8f      	ldr	r3, [pc, #572]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 020c 	bic.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	498c      	ldr	r1, [pc, #560]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002386:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	4983      	ldr	r1, [pc, #524]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a8:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	497b      	ldr	r1, [pc, #492]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4972      	ldr	r1, [pc, #456]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	496a      	ldr	r1, [pc, #424]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241c:	4961      	ldr	r1, [pc, #388]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	4959      	ldr	r1, [pc, #356]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	4950      	ldr	r1, [pc, #320]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002482:	4948      	ldr	r1, [pc, #288]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800249c:	f023 0203 	bic.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	493f      	ldr	r1, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d028      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b8:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e2:	60d3      	str	r3, [r2, #12]
 80024e4:	e011      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ee:	d10c      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f8a4 	bl	8002644 <RCCEx_PLLSAI1_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d028      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	491f      	ldr	r1, [pc, #124]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002534:	d106      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800253c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002540:	60d3      	str	r3, [r2, #12]
 8002542:	e011      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254c:	d10c      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3304      	adds	r3, #4
 8002552:	2101      	movs	r1, #1
 8002554:	4618      	mov	r0, r3
 8002556:	f000 f875 	bl	8002644 <RCCEx_PLLSAI1_Config>
 800255a:	4603      	mov	r3, r0
 800255c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d02b      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002592:	d109      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a02      	ldr	r2, [pc, #8]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800259a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259e:	60d3      	str	r3, [r2, #12]
 80025a0:	e014      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x460>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f843 	bl	8002644 <RCCEx_PLLSAI1_Config>
 80025be:	4603      	mov	r3, r0
 80025c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01c      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025f6:	d10c      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f820 	bl	8002644 <RCCEx_PLLSAI1_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002634:	7cbb      	ldrb	r3, [r7, #18]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000

08002644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002652:	4b74      	ldr	r3, [pc, #464]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d018      	beq.n	8002690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800265e:	4b71      	ldr	r3, [pc, #452]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0203 	and.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d10d      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
       ||
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002676:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
       ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d047      	beq.n	800271a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	e044      	b.n	800271a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d018      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0x86>
 8002698:	2b03      	cmp	r3, #3
 800269a:	d825      	bhi.n	80026e8 <RCCEx_PLLSAI1_Config+0xa4>
 800269c:	2b01      	cmp	r3, #1
 800269e:	d002      	beq.n	80026a6 <RCCEx_PLLSAI1_Config+0x62>
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d009      	beq.n	80026b8 <RCCEx_PLLSAI1_Config+0x74>
 80026a4:	e020      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026a6:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11d      	bne.n	80026ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b6:	e01a      	b.n	80026ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026b8:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d116      	bne.n	80026f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c8:	e013      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ca:	4b56      	ldr	r3, [pc, #344]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026e6:	e006      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      break;
 80026ec:	e004      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ee:	bf00      	nop
 80026f0:	e002      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026fe:	4b49      	ldr	r3, [pc, #292]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	430b      	orrs	r3, r1
 8002714:	4943      	ldr	r1, [pc, #268]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002716:	4313      	orrs	r3, r2
 8002718:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d17c      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3f      	ldr	r2, [pc, #252]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002726:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800272a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800272c:	f7fe fbc2 	bl	8000eb4 <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002732:	e009      	b.n	8002748 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002734:	f7fe fbbe 	bl	8000eb4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d902      	bls.n	8002748 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	73fb      	strb	r3, [r7, #15]
        break;
 8002746:	e005      	b.n	8002754 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ef      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d15f      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d110      	bne.n	8002782 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	0211      	lsls	r1, r2, #8
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	06d2      	lsls	r2, r2, #27
 8002778:	430a      	orrs	r2, r1
 800277a:	492a      	ldr	r1, [pc, #168]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	610b      	str	r3, [r1, #16]
 8002780:	e027      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d112      	bne.n	80027ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6892      	ldr	r2, [r2, #8]
 8002798:	0211      	lsls	r1, r2, #8
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6912      	ldr	r2, [r2, #16]
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0552      	lsls	r2, r2, #21
 80027a4:	430a      	orrs	r2, r1
 80027a6:	491f      	ldr	r1, [pc, #124]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	610b      	str	r3, [r1, #16]
 80027ac:	e011      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6892      	ldr	r2, [r2, #8]
 80027be:	0211      	lsls	r1, r2, #8
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6952      	ldr	r2, [r2, #20]
 80027c4:	0852      	lsrs	r2, r2, #1
 80027c6:	3a01      	subs	r2, #1
 80027c8:	0652      	lsls	r2, r2, #25
 80027ca:	430a      	orrs	r2, r1
 80027cc:	4915      	ldr	r1, [pc, #84]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fb69 	bl	8000eb4 <HAL_GetTick>
 80027e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027e4:	e009      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027e6:	f7fe fb65 	bl	8000eb4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d902      	bls.n	80027fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	73fb      	strb	r3, [r7, #15]
          break;
 80027f8:	e005      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ef      	beq.n	80027e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000

08002828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e049      	b.n	80028ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe f9de 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 f954 	bl	8002b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d001      	beq.n	80028f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e038      	b.n	8002962 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_TIM_Base_Start+0x98>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <HAL_TIM_Base_Start+0x48>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d009      	beq.n	8002920 <HAL_TIM_Base_Start+0x48>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIM_Base_Start+0x9c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_Base_Start+0x48>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_TIM_Base_Start+0xa0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d115      	bne.n	800294c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_TIM_Base_Start+0xa4>)
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d015      	beq.n	800295e <HAL_TIM_Base_Start+0x86>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d011      	beq.n	800295e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	e008      	b.n	800295e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e000      	b.n	8002960 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40012c00 	.word	0x40012c00
 8002974:	40000400 	.word	0x40000400
 8002978:	40014000 	.word	0x40014000
 800297c:	00010007 	.word	0x00010007

08002980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_TIM_ConfigClockSource+0x1c>
 8002998:	2302      	movs	r3, #2
 800299a:	e0b6      	b.n	8002b0a <HAL_TIM_ConfigClockSource+0x18a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d8:	d03e      	beq.n	8002a58 <HAL_TIM_ConfigClockSource+0xd8>
 80029da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029de:	f200 8087 	bhi.w	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	f000 8086 	beq.w	8002af6 <HAL_TIM_ConfigClockSource+0x176>
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d87f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 80029f0:	2b70      	cmp	r3, #112	; 0x70
 80029f2:	d01a      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0xaa>
 80029f4:	2b70      	cmp	r3, #112	; 0x70
 80029f6:	d87b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 80029f8:	2b60      	cmp	r3, #96	; 0x60
 80029fa:	d050      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x11e>
 80029fc:	2b60      	cmp	r3, #96	; 0x60
 80029fe:	d877      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 8002a00:	2b50      	cmp	r3, #80	; 0x50
 8002a02:	d03c      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0xfe>
 8002a04:	2b50      	cmp	r3, #80	; 0x50
 8002a06:	d873      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 8002a08:	2b40      	cmp	r3, #64	; 0x40
 8002a0a:	d058      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x13e>
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d86f      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	d064      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15e>
 8002a14:	2b30      	cmp	r3, #48	; 0x30
 8002a16:	d86b      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d060      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15e>
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d867      	bhi.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05c      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15e>
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d05a      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x15e>
 8002a28:	e062      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	f000 f95f 	bl	8002cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	609a      	str	r2, [r3, #8]
      break;
 8002a56:	e04f      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	f000 f948 	bl	8002cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a7a:	609a      	str	r2, [r3, #8]
      break;
 8002a7c:	e03c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f000 f8bc 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2150      	movs	r1, #80	; 0x50
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f915 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e02c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f000 f8db 	bl	8002c66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2160      	movs	r1, #96	; 0x60
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f905 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002abc:	e01c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aca:	461a      	mov	r2, r3
 8002acc:	f000 f89c 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f8f5 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002adc:	e00c      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f000 f8ec 	bl	8002cc6 <TIM_ITRx_SetConfig>
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e000      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a34      	ldr	r2, [pc, #208]	; (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0x28>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0x28>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a31      	ldr	r2, [pc, #196]	; (8002bfc <TIM_Base_SetConfig+0xe8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00f      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d00b      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <TIM_Base_SetConfig+0xe8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0x62>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <TIM_Base_SetConfig+0xe4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <TIM_Base_SetConfig+0xb0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <TIM_Base_SetConfig+0xec>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <TIM_Base_SetConfig+0xb0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <TIM_Base_SetConfig+0xf0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d103      	bne.n	8002bcc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]
  }
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400

08002c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0201 	bic.w	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 030a 	bic.w	r3, r3, #10
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b087      	sub	sp, #28
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f023 0210 	bic.w	r2, r3, #16
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	031b      	lsls	r3, r3, #12
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f043 0307 	orr.w	r3, r3, #7
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	609a      	str	r2, [r3, #8]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e054      	b.n	8002dfe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a17      	ldr	r2, [pc, #92]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d009      	beq.n	8002dd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10c      	bne.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40014000 	.word	0x40014000

08002e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e040      	b.n	8002eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd ff08 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 faae 	bl	80033c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f825 	bl	8002eb4 <UART_SetConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e01b      	b.n	8002eac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb2d 	bl	8003504 <UART_CheckIdleState>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b08a      	sub	sp, #40	; 0x28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4ba5      	ldr	r3, [pc, #660]	; (8003178 <UART_SetConfig+0x2c4>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a9a      	ldr	r2, [pc, #616]	; (800317c <UART_SetConfig+0x2c8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a91      	ldr	r2, [pc, #580]	; (8003180 <UART_SetConfig+0x2cc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d126      	bne.n	8002f8c <UART_SetConfig+0xd8>
 8002f3e:	4b91      	ldr	r3, [pc, #580]	; (8003184 <UART_SetConfig+0x2d0>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d81b      	bhi.n	8002f84 <UART_SetConfig+0xd0>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <UART_SetConfig+0xa0>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f75 	.word	0x08002f75
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f7d 	.word	0x08002f7d
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6a:	e0d6      	b.n	800311a <UART_SetConfig+0x266>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f72:	e0d2      	b.n	800311a <UART_SetConfig+0x266>
 8002f74:	2304      	movs	r3, #4
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7a:	e0ce      	b.n	800311a <UART_SetConfig+0x266>
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f82:	e0ca      	b.n	800311a <UART_SetConfig+0x266>
 8002f84:	2310      	movs	r3, #16
 8002f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8a:	e0c6      	b.n	800311a <UART_SetConfig+0x266>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a7d      	ldr	r2, [pc, #500]	; (8003188 <UART_SetConfig+0x2d4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d138      	bne.n	8003008 <UART_SetConfig+0x154>
 8002f96:	4b7b      	ldr	r3, [pc, #492]	; (8003184 <UART_SetConfig+0x2d0>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d82d      	bhi.n	8003000 <UART_SetConfig+0x14c>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <UART_SetConfig+0xf8>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fe1 	.word	0x08002fe1
 8002fb0:	08003001 	.word	0x08003001
 8002fb4:	08003001 	.word	0x08003001
 8002fb8:	08003001 	.word	0x08003001
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08003001 	.word	0x08003001
 8002fc4:	08003001 	.word	0x08003001
 8002fc8:	08003001 	.word	0x08003001
 8002fcc:	08002fe9 	.word	0x08002fe9
 8002fd0:	08003001 	.word	0x08003001
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	08003001 	.word	0x08003001
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe6:	e098      	b.n	800311a <UART_SetConfig+0x266>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fee:	e094      	b.n	800311a <UART_SetConfig+0x266>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e090      	b.n	800311a <UART_SetConfig+0x266>
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffe:	e08c      	b.n	800311a <UART_SetConfig+0x266>
 8003000:	2310      	movs	r3, #16
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e088      	b.n	800311a <UART_SetConfig+0x266>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5f      	ldr	r2, [pc, #380]	; (800318c <UART_SetConfig+0x2d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d125      	bne.n	800305e <UART_SetConfig+0x1aa>
 8003012:	4b5c      	ldr	r3, [pc, #368]	; (8003184 <UART_SetConfig+0x2d0>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d016      	beq.n	800304e <UART_SetConfig+0x19a>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d818      	bhi.n	8003056 <UART_SetConfig+0x1a2>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d00a      	beq.n	800303e <UART_SetConfig+0x18a>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d814      	bhi.n	8003056 <UART_SetConfig+0x1a2>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <UART_SetConfig+0x182>
 8003030:	2b10      	cmp	r3, #16
 8003032:	d008      	beq.n	8003046 <UART_SetConfig+0x192>
 8003034:	e00f      	b.n	8003056 <UART_SetConfig+0x1a2>
 8003036:	2300      	movs	r3, #0
 8003038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303c:	e06d      	b.n	800311a <UART_SetConfig+0x266>
 800303e:	2302      	movs	r3, #2
 8003040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003044:	e069      	b.n	800311a <UART_SetConfig+0x266>
 8003046:	2304      	movs	r3, #4
 8003048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304c:	e065      	b.n	800311a <UART_SetConfig+0x266>
 800304e:	2308      	movs	r3, #8
 8003050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003054:	e061      	b.n	800311a <UART_SetConfig+0x266>
 8003056:	2310      	movs	r3, #16
 8003058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305c:	e05d      	b.n	800311a <UART_SetConfig+0x266>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4b      	ldr	r2, [pc, #300]	; (8003190 <UART_SetConfig+0x2dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d125      	bne.n	80030b4 <UART_SetConfig+0x200>
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <UART_SetConfig+0x2d0>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003072:	2bc0      	cmp	r3, #192	; 0xc0
 8003074:	d016      	beq.n	80030a4 <UART_SetConfig+0x1f0>
 8003076:	2bc0      	cmp	r3, #192	; 0xc0
 8003078:	d818      	bhi.n	80030ac <UART_SetConfig+0x1f8>
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d00a      	beq.n	8003094 <UART_SetConfig+0x1e0>
 800307e:	2b80      	cmp	r3, #128	; 0x80
 8003080:	d814      	bhi.n	80030ac <UART_SetConfig+0x1f8>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <UART_SetConfig+0x1d8>
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d008      	beq.n	800309c <UART_SetConfig+0x1e8>
 800308a:	e00f      	b.n	80030ac <UART_SetConfig+0x1f8>
 800308c:	2300      	movs	r3, #0
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003092:	e042      	b.n	800311a <UART_SetConfig+0x266>
 8003094:	2302      	movs	r3, #2
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e03e      	b.n	800311a <UART_SetConfig+0x266>
 800309c:	2304      	movs	r3, #4
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e03a      	b.n	800311a <UART_SetConfig+0x266>
 80030a4:	2308      	movs	r3, #8
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e036      	b.n	800311a <UART_SetConfig+0x266>
 80030ac:	2310      	movs	r3, #16
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e032      	b.n	800311a <UART_SetConfig+0x266>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a30      	ldr	r2, [pc, #192]	; (800317c <UART_SetConfig+0x2c8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12a      	bne.n	8003114 <UART_SetConfig+0x260>
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <UART_SetConfig+0x2d0>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030cc:	d01a      	beq.n	8003104 <UART_SetConfig+0x250>
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d2:	d81b      	bhi.n	800310c <UART_SetConfig+0x258>
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d8:	d00c      	beq.n	80030f4 <UART_SetConfig+0x240>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d815      	bhi.n	800310c <UART_SetConfig+0x258>
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <UART_SetConfig+0x238>
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d008      	beq.n	80030fc <UART_SetConfig+0x248>
 80030ea:	e00f      	b.n	800310c <UART_SetConfig+0x258>
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	e012      	b.n	800311a <UART_SetConfig+0x266>
 80030f4:	2302      	movs	r3, #2
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e00e      	b.n	800311a <UART_SetConfig+0x266>
 80030fc:	2304      	movs	r3, #4
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003102:	e00a      	b.n	800311a <UART_SetConfig+0x266>
 8003104:	2308      	movs	r3, #8
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310a:	e006      	b.n	800311a <UART_SetConfig+0x266>
 800310c:	2310      	movs	r3, #16
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003112:	e002      	b.n	800311a <UART_SetConfig+0x266>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <UART_SetConfig+0x2c8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	f040 808b 	bne.w	800323c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800312a:	2b08      	cmp	r3, #8
 800312c:	d834      	bhi.n	8003198 <UART_SetConfig+0x2e4>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0x280>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003159 	.word	0x08003159
 8003138:	08003199 	.word	0x08003199
 800313c:	08003161 	.word	0x08003161
 8003140:	08003199 	.word	0x08003199
 8003144:	08003167 	.word	0x08003167
 8003148:	08003199 	.word	0x08003199
 800314c:	08003199 	.word	0x08003199
 8003150:	08003199 	.word	0x08003199
 8003154:	0800316f 	.word	0x0800316f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7fe ff7c 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 800315c:	61f8      	str	r0, [r7, #28]
        break;
 800315e:	e021      	b.n	80031a4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <UART_SetConfig+0x2e0>)
 8003162:	61fb      	str	r3, [r7, #28]
        break;
 8003164:	e01e      	b.n	80031a4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7fe fedd 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 800316a:	61f8      	str	r0, [r7, #28]
        break;
 800316c:	e01a      	b.n	80031a4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003172:	61fb      	str	r3, [r7, #28]
        break;
 8003174:	e016      	b.n	80031a4 <UART_SetConfig+0x2f0>
 8003176:	bf00      	nop
 8003178:	efff69f3 	.word	0xefff69f3
 800317c:	40008000 	.word	0x40008000
 8003180:	40013800 	.word	0x40013800
 8003184:	40021000 	.word	0x40021000
 8003188:	40004400 	.word	0x40004400
 800318c:	40004800 	.word	0x40004800
 8003190:	40004c00 	.word	0x40004c00
 8003194:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80fa 	beq.w	80033a0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d305      	bcc.n	80031c8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d903      	bls.n	80031d0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ce:	e0e7      	b.n	80033a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2200      	movs	r2, #0
 80031d4:	461c      	mov	r4, r3
 80031d6:	4615      	mov	r5, r2
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	022b      	lsls	r3, r5, #8
 80031e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031e6:	0222      	lsls	r2, r4, #8
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	6849      	ldr	r1, [r1, #4]
 80031ec:	0849      	lsrs	r1, r1, #1
 80031ee:	2000      	movs	r0, #0
 80031f0:	4688      	mov	r8, r1
 80031f2:	4681      	mov	r9, r0
 80031f4:	eb12 0a08 	adds.w	sl, r2, r8
 80031f8:	eb43 0b09 	adc.w	fp, r3, r9
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800320a:	4650      	mov	r0, sl
 800320c:	4659      	mov	r1, fp
 800320e:	f7fc ffe1 	bl	80001d4 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4613      	mov	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003220:	d308      	bcc.n	8003234 <UART_SetConfig+0x380>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003228:	d204      	bcs.n	8003234 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	e0b5      	b.n	80033a0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800323a:	e0b1      	b.n	80033a0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003244:	d15d      	bne.n	8003302 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324a:	2b08      	cmp	r3, #8
 800324c:	d827      	bhi.n	800329e <UART_SetConfig+0x3ea>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x3a0>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003279 	.word	0x08003279
 8003258:	08003281 	.word	0x08003281
 800325c:	08003289 	.word	0x08003289
 8003260:	0800329f 	.word	0x0800329f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800329f 	.word	0x0800329f
 800326c:	0800329f 	.word	0x0800329f
 8003270:	0800329f 	.word	0x0800329f
 8003274:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7fe feec 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 800327c:	61f8      	str	r0, [r7, #28]
        break;
 800327e:	e014      	b.n	80032aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7fe fefe 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8003284:	61f8      	str	r0, [r7, #28]
        break;
 8003286:	e010      	b.n	80032aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <UART_SetConfig+0x508>)
 800328a:	61fb      	str	r3, [r7, #28]
        break;
 800328c:	e00d      	b.n	80032aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7fe fe49 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8003292:	61f8      	str	r0, [r7, #28]
        break;
 8003294:	e009      	b.n	80032aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61fb      	str	r3, [r7, #28]
        break;
 800329c:	e005      	b.n	80032aa <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d077      	beq.n	80033a0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005a      	lsls	r2, r3, #1
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	441a      	add	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d916      	bls.n	80032fa <UART_SetConfig+0x446>
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d212      	bcs.n	80032fa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f023 030f 	bic.w	r3, r3, #15
 80032dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	8afb      	ldrh	r3, [r7, #22]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	8afa      	ldrh	r2, [r7, #22]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	e052      	b.n	80033a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003300:	e04e      	b.n	80033a0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003306:	2b08      	cmp	r3, #8
 8003308:	d827      	bhi.n	800335a <UART_SetConfig+0x4a6>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x45c>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003335 	.word	0x08003335
 8003314:	0800333d 	.word	0x0800333d
 8003318:	08003345 	.word	0x08003345
 800331c:	0800335b 	.word	0x0800335b
 8003320:	0800334b 	.word	0x0800334b
 8003324:	0800335b 	.word	0x0800335b
 8003328:	0800335b 	.word	0x0800335b
 800332c:	0800335b 	.word	0x0800335b
 8003330:	08003353 	.word	0x08003353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7fe fe8e 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 8003338:	61f8      	str	r0, [r7, #28]
        break;
 800333a:	e014      	b.n	8003366 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800333c:	f7fe fea0 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8003340:	61f8      	str	r0, [r7, #28]
        break;
 8003342:	e010      	b.n	8003366 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <UART_SetConfig+0x508>)
 8003346:	61fb      	str	r3, [r7, #28]
        break;
 8003348:	e00d      	b.n	8003366 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334a:	f7fe fdeb 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 800334e:	61f8      	str	r0, [r7, #28]
        break;
 8003350:	e009      	b.n	8003366 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003356:	61fb      	str	r3, [r7, #28]
        break;
 8003358:	e005      	b.n	8003366 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003364:	bf00      	nop
    }

    if (pclk != 0U)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d019      	beq.n	80033a0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	085a      	lsrs	r2, r3, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	d909      	bls.n	800339a <UART_SetConfig+0x4e6>
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d205      	bcs.n	800339a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	e002      	b.n	80033a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3728      	adds	r7, #40	; 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	00f42400 	.word	0x00f42400

080033c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01a      	beq.n	80034d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d10a      	bne.n	80034d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b098      	sub	sp, #96	; 0x60
 8003508:	af02      	add	r7, sp, #8
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003514:	f7fd fcce 	bl	8000eb4 <HAL_GetTick>
 8003518:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d12e      	bne.n	8003586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f88c 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d021      	beq.n	8003586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003556:	653b      	str	r3, [r7, #80]	; 0x50
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800356e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e062      	b.n	800364c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d149      	bne.n	8003628 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f856 	bl	8003654 <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03c      	beq.n	8003628 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	623b      	str	r3, [r7, #32]
   return(result);
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e6      	bne.n	80035ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3308      	adds	r3, #8
 80035fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003600:	61fa      	str	r2, [r7, #28]
 8003602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003604:	69b9      	ldr	r1, [r7, #24]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	e841 2300 	strex	r3, r2, [r1]
 800360c:	617b      	str	r3, [r7, #20]
   return(result);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e5      	bne.n	80035e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e011      	b.n	800364c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3758      	adds	r7, #88	; 0x58
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003664:	e04f      	b.n	8003706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d04b      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fd fc21 	bl	8000eb4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <UART_WaitOnFlagUntilTimeout+0x30>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e04e      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d037      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d034      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d031      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d110      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f838 	bl	800372e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2208      	movs	r2, #8
 80036c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e029      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e0:	d111      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f81e 	bl	800372e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e00f      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	429a      	cmp	r2, r3
 8003722:	d0a0      	beq.n	8003666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800372e:	b480      	push	{r7}
 8003730:	b095      	sub	sp, #84	; 0x54
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	643b      	str	r3, [r7, #64]	; 0x40
 8003756:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800375a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e6      	bne.n	8003736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	61fb      	str	r3, [r7, #28]
   return(result);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800378e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d118      	bne.n	80037d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 0310 	bic.w	r3, r3, #16
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	613b      	str	r3, [r7, #16]
   return(result);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037ea:	bf00      	nop
 80037ec:	3754      	adds	r7, #84	; 0x54
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <memset>:
 80037f6:	4402      	add	r2, r0
 80037f8:	4603      	mov	r3, r0
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d100      	bne.n	8003800 <memset+0xa>
 80037fe:	4770      	bx	lr
 8003800:	f803 1b01 	strb.w	r1, [r3], #1
 8003804:	e7f9      	b.n	80037fa <memset+0x4>
	...

08003808 <__libc_init_array>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4d0d      	ldr	r5, [pc, #52]	; (8003840 <__libc_init_array+0x38>)
 800380c:	4c0d      	ldr	r4, [pc, #52]	; (8003844 <__libc_init_array+0x3c>)
 800380e:	1b64      	subs	r4, r4, r5
 8003810:	10a4      	asrs	r4, r4, #2
 8003812:	2600      	movs	r6, #0
 8003814:	42a6      	cmp	r6, r4
 8003816:	d109      	bne.n	800382c <__libc_init_array+0x24>
 8003818:	4d0b      	ldr	r5, [pc, #44]	; (8003848 <__libc_init_array+0x40>)
 800381a:	4c0c      	ldr	r4, [pc, #48]	; (800384c <__libc_init_array+0x44>)
 800381c:	f000 f818 	bl	8003850 <_init>
 8003820:	1b64      	subs	r4, r4, r5
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	2600      	movs	r6, #0
 8003826:	42a6      	cmp	r6, r4
 8003828:	d105      	bne.n	8003836 <__libc_init_array+0x2e>
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003830:	4798      	blx	r3
 8003832:	3601      	adds	r6, #1
 8003834:	e7ee      	b.n	8003814 <__libc_init_array+0xc>
 8003836:	f855 3b04 	ldr.w	r3, [r5], #4
 800383a:	4798      	blx	r3
 800383c:	3601      	adds	r6, #1
 800383e:	e7f2      	b.n	8003826 <__libc_init_array+0x1e>
 8003840:	080038b8 	.word	0x080038b8
 8003844:	080038b8 	.word	0x080038b8
 8003848:	080038b8 	.word	0x080038b8
 800384c:	080038bc 	.word	0x080038bc

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	bf00      	nop
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
