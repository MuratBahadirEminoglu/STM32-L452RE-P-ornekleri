
HAL_ADC_Start_potansiyometredenanalogveriokuma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c1c  08004c1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c24  08004c24  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000005c  08004c88  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004c88  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9ef  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001af8  00000000  00000000  0002cabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000085f  00000000  00000000  0002f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002294a  00000000  00000000  0002f907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb8e  00000000  00000000  00052251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc249  00000000  00000000  0005eddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000323c  00000000  00000000  0013b028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0013e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b80 	.word	0x08004b80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004b80 	.word	0x08004b80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t oku = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	81fb      	strh	r3, [r7, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fb29 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f82f 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f913 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8e1 	bl	8000758 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000596:	f000 f87b 	bl	8000690 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <main+0x64>)
 800059c:	f000 fede 	bl	800135c <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc1,10) == HAL_OK){
 80005a0:	210a      	movs	r1, #10
 80005a2:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x64>)
 80005a4:	f000 ff3d 	bl	8001422 <HAL_ADC_PollForConversion>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d113      	bne.n	80005d6 <main+0x5a>
		  oku = HAL_ADC_GetValue(&hadc1);
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <main+0x64>)
 80005b0:	f000 ffc6 	bl	8001540 <HAL_ADC_GetValue>
 80005b4:	4603      	mov	r3, r0
 80005b6:	81fb      	strh	r3, [r7, #14]
		  uint8_t boyut = sprintf(karakter, "%d\r\n",oku);
 80005b8:	89fa      	ldrh	r2, [r7, #14]
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4909      	ldr	r1, [pc, #36]	; (80005e4 <main+0x68>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fe3a 	bl	8004238 <siprintf>
 80005c4:	4603      	mov	r3, r0
 80005c6:	737b      	strb	r3, [r7, #13]
		  HAL_UART_Transmit(&huart2,karakter,boyut,100);
 80005c8:	7b7b      	ldrb	r3, [r7, #13]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	2364      	movs	r3, #100	; 0x64
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <main+0x6c>)
 80005d2:	f003 f905 	bl	80037e0 <HAL_UART_Transmit>
	  }
	  HAL_Delay(100);
 80005d6:	2064      	movs	r0, #100	; 0x64
 80005d8:	f000 fb7c 	bl	8000cd4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80005dc:	e7dd      	b.n	800059a <main+0x1e>
 80005de:	bf00      	nop
 80005e0:	20000078 	.word	0x20000078
 80005e4:	08004b98 	.word	0x08004b98
 80005e8:	200000e0 	.word	0x200000e0

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fe3c 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000612:	f001 feab 	bl	800236c <HAL_PWREx_ControlVoltageScaling>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061c:	f000 f956 	bl	80008cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800062a:	2340      	movs	r3, #64	; 0x40
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063a:	230a      	movs	r3, #10
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fee2 	bl	8002418 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065a:	f000 f937 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2303      	movs	r3, #3
 8000664:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	2104      	movs	r1, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fae2 	bl	8002c40 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000682:	f000 f923 	bl	80008cc <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3758      	adds	r7, #88	; 0x58
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
 80006a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_ADC1_Init+0xbc>)
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <MX_ADC1_Init+0xc0>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_ADC1_Init+0xbc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_ADC1_Init+0xbc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_ADC1_Init+0xbc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_ADC1_Init+0xbc>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0xbc>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_ADC1_Init+0xbc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_ADC1_Init+0xbc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0xbc>)
 80006d8:	2201      	movs	r2, #1
 80006da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_ADC1_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_ADC1_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_ADC1_Init+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ADC1_Init+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_ADC1_Init+0xbc>)
 8000708:	f000 fce2 	bl	80010d0 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000712:	f000 f8db 	bl	80008cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC1_Init+0xc4>)
 8000718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071a:	2306      	movs	r3, #6
 800071c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000722:	237f      	movs	r3, #127	; 0x7f
 8000724:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000726:	2304      	movs	r3, #4
 8000728:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_ADC1_Init+0xbc>)
 8000734:	f000 ff12 	bl	800155c <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800073e:	f000 f8c5 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000078 	.word	0x20000078
 8000750:	50040000 	.word	0x50040000
 8000754:	14f00020 	.word	0x14f00020

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f002 ffd2 	bl	8003744 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f891 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000e0 	.word	0x200000e0
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a3b      	ldr	r2, [pc, #236]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <MX_GPIO_Init+0x108>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MX_GPIO_Init+0x108>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <MX_GPIO_Init+0x108>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_GPIO_Init+0x108>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	21b0      	movs	r1, #176	; 0xb0
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f001 fd73 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	4820      	ldr	r0, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x10c>)
 8000842:	f001 fd6d 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0x110>)
 800085e:	f001 fbe5 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000862:	23b0      	movs	r3, #176	; 0xb0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f001 fbd6 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f001 fbc9 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_GPIO_Init+0x10c>)
 80008b4:	f001 fbba 	bl	800202c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48000800 	.word	0x48000800

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0a4      	sub	sp, #144	; 0x90
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2268      	movs	r2, #104	; 0x68
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f003 fc99 	bl	8004278 <memset>
  if(hadc->Instance==ADC1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <HAL_ADC_MspInit+0xc4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d145      	bne.n	80009dc <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000954:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800095a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000968:	2307      	movs	r3, #7
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000970:	2302      	movs	r3, #2
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fb82 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800098a:	f7ff ff9f 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_ADC_MspInit+0xc8>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <HAL_ADC_MspInit+0xc8>)
 8000994:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_ADC_MspInit+0xc8>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_ADC_MspInit+0xc8>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009be:	2301      	movs	r3, #1
 80009c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009c2:	230b      	movs	r3, #11
 80009c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009d2:	4619      	mov	r1, r3
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f001 fb28 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3790      	adds	r7, #144	; 0x90
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	50040000 	.word	0x50040000
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0a4      	sub	sp, #144	; 0x90
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2268      	movs	r2, #104	; 0x68
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 fc33 	bl	8004278 <memset>
  if(huart->Instance==USART2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <HAL_UART_MspInit+0xb0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d13a      	bne.n	8000a92 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fb2d 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a34:	f7ff ff4a 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0xb4>)
 8000a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a42:	6593      	str	r3, [r2, #88]	; 0x58
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_UART_MspInit+0xb4>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_UART_MspInit+0xb4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a54:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_UART_MspInit+0xb4>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0xb4>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f001 facd 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3790      	adds	r7, #144	; 0x90
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40004400 	.word	0x40004400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f8d0 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <_sbrk+0x5c>)
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <_sbrk+0x60>)
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d102      	bne.n	8000b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x64>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <_sbrk+0x68>)
 8000b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d207      	bcs.n	8000b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b28:	f003 fbae 	bl	8004288 <__errno>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	220c      	movs	r2, #12
 8000b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	e009      	b.n	8000b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <_sbrk+0x64>)
 8000b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20028000 	.word	0x20028000
 8000b58:	00000400 	.word	0x00000400
 8000b5c:	20000168 	.word	0x20000168
 8000b60:	200002b8 	.word	0x200002b8

08000b64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff ffea 	bl	8000b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f003 fb6d 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fcdf 	bl	800057c <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bcc:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 8000bd0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bd4:	200002b8 	.word	0x200002b8

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_Init+0x3c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_Init+0x3c>)
 8000bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f001 f9e6 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 f80f 	bl	8000c1c <HAL_InitTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	e001      	b.n	8000c0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0a:	f7ff fe65 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d023      	beq.n	8000c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_InitTick+0x70>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_InitTick+0x6c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 f9e3 	bl	8002012 <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10f      	bne.n	8000c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d809      	bhi.n	8000c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f001 f9bb 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_InitTick+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e004      	b.n	8000c7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e001      	b.n	8000c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000016c 	.word	0x2000016c

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000016c 	.word	0x2000016c

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	609a      	str	r2, [r3, #8]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3360      	adds	r3, #96	; 0x60
 8000d96:	461a      	mov	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LL_ADC_SetOffset+0x44>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000dbc:	bf00      	nop
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	03fff000 	.word	0x03fff000

08000dcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3360      	adds	r3, #96	; 0x60
 8000dda:	461a      	mov	r2, r3
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3360      	adds	r3, #96	; 0x60
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	615a      	str	r2, [r3, #20]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b087      	sub	sp, #28
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	60f8      	str	r0, [r7, #12]
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3330      	adds	r3, #48	; 0x30
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	4413      	add	r3, r2
 8000e98:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	f003 031f 	and.w	r3, r3, #31
 8000ea4:	211f      	movs	r1, #31
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	401a      	ands	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0e9b      	lsrs	r3, r3, #26
 8000eb2:	f003 011f 	and.w	r1, r3, #31
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b087      	sub	sp, #28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3314      	adds	r3, #20
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	0e5b      	lsrs	r3, r3, #25
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	4413      	add	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	0d1b      	lsrs	r3, r3, #20
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	2107      	movs	r1, #7
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	0d1b      	lsrs	r3, r3, #20
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	431a      	orrs	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f1c:	bf00      	nop
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f40:	43db      	mvns	r3, r3
 8000f42:	401a      	ands	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0318 	and.w	r3, r3, #24
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f4c:	40d9      	lsrs	r1, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	400b      	ands	r3, r1
 8000f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f56:	431a      	orrs	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0007ffff 	.word	0x0007ffff

08000f70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6093      	str	r3, [r2, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fa8:	d101      	bne.n	8000fae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ff8:	d101      	bne.n	8000ffe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800101c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <LL_ADC_IsEnabled+0x18>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <LL_ADC_IsEnabled+0x1a>
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800106a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800106e:	f043 0204 	orr.w	r2, r3, #4
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	2b04      	cmp	r3, #4
 8001094:	d101      	bne.n	800109a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d101      	bne.n	80010c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e129      	b.n	800133e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fc11 	bl	8000920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff3f 	bl	8000f94 <LL_ADC_IsDeepPowerDownEnabled>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff25 	bl	8000f70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff5a 	bl	8000fe4 <LL_ADC_IsInternalRegulatorEnabled>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff3e 	bl	8000fbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001140:	4b81      	ldr	r3, [pc, #516]	; (8001348 <HAL_ADC_Init+0x278>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	099b      	lsrs	r3, r3, #6
 8001146:	4a81      	ldr	r2, [pc, #516]	; (800134c <HAL_ADC_Init+0x27c>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	099b      	lsrs	r3, r3, #6
 800114e:	3301      	adds	r3, #1
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001154:	e002      	b.n	800115c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f9      	bne.n	8001156 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff3c 	bl	8000fe4 <LL_ADC_IsInternalRegulatorEnabled>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10d      	bne.n	800118e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	f043 0210 	orr.w	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff75 	bl	8001082 <LL_ADC_REG_IsConversionOngoing>
 8001198:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f040 80c2 	bne.w	800132c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 80be 	bne.w	800132c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011b8:	f043 0202 	orr.w	r2, r3, #2
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff35 	bl	8001034 <LL_ADC_IsEnabled>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10b      	bne.n	80011e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011d0:	485f      	ldr	r0, [pc, #380]	; (8001350 <HAL_ADC_Init+0x280>)
 80011d2:	f7ff ff2f 	bl	8001034 <LL_ADC_IsEnabled>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	485c      	ldr	r0, [pc, #368]	; (8001354 <HAL_ADC_Init+0x284>)
 80011e4:	f7ff fd9a 	bl	8000d1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7e5b      	ldrb	r3, [r3, #25]
 80011ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001206:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d106      	bne.n	8001224 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	3b01      	subs	r3, #1
 800121c:	045b      	lsls	r3, r3, #17
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	4b44      	ldr	r3, [pc, #272]	; (8001358 <HAL_ADC_Init+0x288>)
 8001248:	4013      	ands	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	430b      	orrs	r3, r1
 8001252:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff25 	bl	80010a8 <LL_ADC_INJ_IsConversionOngoing>
 800125e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d140      	bne.n	80012e8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d13d      	bne.n	80012e8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e1b      	ldrb	r3, [r3, #24]
 8001274:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001276:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800127e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128e:	f023 0306 	bic.w	r3, r3, #6
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	430b      	orrs	r3, r1
 800129a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d118      	bne.n	80012d8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012b0:	f023 0304 	bic.w	r3, r3, #4
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012bc:	4311      	orrs	r1, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012c2:	4311      	orrs	r1, r2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012c8:	430a      	orrs	r2, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0201 	orr.w	r2, r2, #1
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	e007      	b.n	80012e8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10c      	bne.n	800130a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f023 010f 	bic.w	r1, r3, #15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
 8001308:	e007      	b.n	800131a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 020f 	bic.w	r2, r2, #15
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f023 0303 	bic.w	r3, r3, #3
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
 800132a:	e007      	b.n	800133c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	f043 0210 	orr.w	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800133c:	7ffb      	ldrb	r3, [r7, #31]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000000 	.word	0x20000000
 800134c:	053e2d63 	.word	0x053e2d63
 8001350:	50040000 	.word	0x50040000
 8001354:	50040300 	.word	0x50040300
 8001358:	fff0c007 	.word	0xfff0c007

0800135c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe8a 	bl	8001082 <LL_ADC_REG_IsConversionOngoing>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d14f      	bne.n	8001414 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Start+0x26>
 800137e:	2302      	movs	r3, #2
 8001380:	e04b      	b.n	800141a <HAL_ADC_Start+0xbe>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fce2 	bl	8001d54 <ADC_Enable>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d137      	bne.n	800140a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ba:	d106      	bne.n	80013ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	f023 0206 	bic.w	r2, r3, #6
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	221c      	movs	r2, #28
 80013d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe29 	bl	800105a <LL_ADC_REG_StartConversion>
 8001408:	e006      	b.n	8001418 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001412:	e001      	b.n	8001418 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001414:	2302      	movs	r3, #2
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d102      	bne.n	800143a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001434:	2308      	movs	r3, #8
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e010      	b.n	800145c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e06f      	b.n	8001538 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001458:	2304      	movs	r3, #4
 800145a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800145c:	f7ff fc2e 	bl	8000cbc <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001462:	e021      	b.n	80014a8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146a:	d01d      	beq.n	80014a8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800146c:	f7ff fc26 	bl	8000cbc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d302      	bcc.n	8001482 <HAL_ADC_PollForConversion+0x60>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d112      	bne.n	80014a8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10b      	bne.n	80014a8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	f043 0204 	orr.w	r2, r3, #4
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e047      	b.n	8001538 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0d6      	beq.n	8001464 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fcc4 	bl	8000e54 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d01c      	beq.n	800150c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7e5b      	ldrb	r3, [r3, #25]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d111      	bne.n	800150c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d105      	bne.n	800150c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b08      	cmp	r3, #8
 8001518:	d104      	bne.n	8001524 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2208      	movs	r2, #8
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e008      	b.n	8001536 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0b6      	sub	sp, #216	; 0xd8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x22>
 800157a:	2302      	movs	r3, #2
 800157c:	e3d5      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x7ce>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd79 	bl	8001082 <LL_ADC_REG_IsConversionOngoing>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 83ba 	bne.w	8001d0c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d824      	bhi.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	3b02      	subs	r3, #2
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d81b      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x8e>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <HAL_ADC_ConfigChannel+0x5c>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015d1 	.word	0x080015d1
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015e1 	.word	0x080015e1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80015c8:	230c      	movs	r3, #12
 80015ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015ce:	e010      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80015d0:	2312      	movs	r3, #18
 80015d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015d6:	e00c      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80015d8:	2318      	movs	r3, #24
 80015da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015de:	e008      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015e8:	e003      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80015ea:	2306      	movs	r3, #6
 80015ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80015f0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001600:	f7ff fc3b 	bl	8000e7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd3a 	bl	8001082 <LL_ADC_REG_IsConversionOngoing>
 800160e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd46 	bl	80010a8 <LL_ADC_INJ_IsConversionOngoing>
 800161c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 81bf 	bne.w	80019a8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800162a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 81ba 	bne.w	80019a8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800163c:	d10f      	bne.n	800165e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fc42 	bl	8000ed2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fbe9 	bl	8000e2e <LL_ADC_SetSamplingTimeCommonConfig>
 800165c:	e00e      	b.n	800167c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	461a      	mov	r2, r3
 800166c:	f7ff fc31 	bl	8000ed2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fbd9 	bl	8000e2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d00a      	beq.n	80016b4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016ae:	f7ff fb69 	bl	8000d84 <LL_ADC_SetOffset>
 80016b2:	e179      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb86 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x184>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fb7b 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	0e9b      	lsrs	r3, r3, #26
 80016da:	f003 021f 	and.w	r2, r3, #31
 80016de:	e01e      	b.n	800171e <HAL_ADC_ConfigChannel+0x1c2>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb70 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016f6:	fa93 f3a3 	rbit	r3, r3
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800170e:	2320      	movs	r3, #32
 8001710:	e004      	b.n	800171c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x1da>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0e9b      	lsrs	r3, r3, #26
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	e018      	b.n	8001768 <HAL_ADC_ConfigChannel+0x20c>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800174a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e004      	b.n	8001768 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800175e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001768:	429a      	cmp	r2, r3
 800176a:	d106      	bne.n	800177a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb3f 	bl	8000df8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb23 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x24a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb18 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	e01e      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x288>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fb0d 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80017c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80017cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80017d4:	2320      	movs	r3, #32
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80017d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x2a0>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0e9b      	lsrs	r3, r3, #26
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	e018      	b.n	800182e <HAL_ADC_ConfigChannel+0x2d2>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001810:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001820:	2320      	movs	r3, #32
 8001822:	e004      	b.n	800182e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800182e:	429a      	cmp	r2, r3
 8001830:	d106      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fadc 	bl	8000df8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fac0 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x310>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2102      	movs	r1, #2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fab5 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	f003 021f 	and.w	r2, r3, #31
 800186a:	e01e      	b.n	80018aa <HAL_ADC_ConfigChannel+0x34e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff faaa 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800188a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800188e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800189a:	2320      	movs	r3, #32
 800189c:	e004      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800189e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x366>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0e9b      	lsrs	r3, r3, #26
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	e014      	b.n	80018ec <HAL_ADC_ConfigChannel+0x390>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80018d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80018d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80018de:	2320      	movs	r3, #32
 80018e0:	e004      	b.n	80018ec <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80018e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018e6:	fab3 f383 	clz	r3, r3
 80018ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2200      	movs	r2, #0
 80018f6:	2102      	movs	r1, #2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fa7d 	bl	8000df8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2103      	movs	r1, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa61 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_ADC_ConfigChannel+0x3ce>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2103      	movs	r1, #3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa56 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	e017      	b.n	800195a <HAL_ADC_ConfigChannel+0x3fe>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2103      	movs	r1, #3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa4b 	bl	8000dcc <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001944:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800194c:	2320      	movs	r3, #32
 800194e:	e003      	b.n	8001958 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x416>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e9b      	lsrs	r3, r3, #26
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	e011      	b.n	8001996 <HAL_ADC_ConfigChannel+0x43a>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001982:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800198a:	2320      	movs	r3, #32
 800198c:	e003      	b.n	8001996 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800198e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001996:	429a      	cmp	r2, r3
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	2103      	movs	r1, #3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa28 	bl	8000df8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fb41 	bl	8001034 <LL_ADC_IsEnabled>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 813f 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	461a      	mov	r2, r3
 80019c8:	f7ff faae 	bl	8000f28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a8e      	ldr	r2, [pc, #568]	; (8001c0c <HAL_ADC_ConfigChannel+0x6b0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	f040 8130 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x4a4>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e019      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x4d8>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e003      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	bf94      	ite	ls
 8001a2e:	2301      	movls	r3, #1
 8001a30:	2300      	movhi	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d079      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x4f8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0e9b      	lsrs	r3, r3, #26
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	069b      	lsls	r3, r3, #26
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a52:	e015      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x524>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e003      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	069b      	lsls	r3, r3, #26
 8001a7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x544>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	3301      	adds	r3, #1
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	e017      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x574>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e003      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	ea42 0103 	orr.w	r1, r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x59a>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	051b      	lsls	r3, r3, #20
 8001af4:	e018      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x5cc>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	e003      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	e080      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x5ec>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0e9b      	lsrs	r3, r3, #26
 8001b3e:	3301      	adds	r3, #1
 8001b40:	069b      	lsls	r3, r3, #26
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b46:	e015      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x618>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e003      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x638>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	3301      	adds	r3, #1
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	e017      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x668>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e003      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	ea42 0103 	orr.w	r1, r2, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x694>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f003 021f 	and.w	r2, r3, #31
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3b1e      	subs	r3, #30
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bee:	e01d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x6d0>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
  return result;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d103      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e005      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x6bc>
 8001c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fab3 f383 	clz	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f003 021f 	and.w	r2, r3, #31
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	3b1e      	subs	r3, #30
 8001c26:	051b      	lsls	r3, r3, #20
 8001c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7ff f94d 	bl	8000ed2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d06c      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c44:	483c      	ldr	r0, [pc, #240]	; (8001d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c46:	f7ff f88f 	bl	8000d68 <LL_ADC_GetCommonPathInternalCh>
 8001c4a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_ADC_ConfigChannel+0x7e0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d127      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d121      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d157      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c76:	4619      	mov	r1, r3
 8001c78:	482f      	ldr	r0, [pc, #188]	; (8001d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c7a:	f7ff f862 	bl	8000d42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_ADC_ConfigChannel+0x7e8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <HAL_ADC_ConfigChannel+0x7ec>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca6:	e03a      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <HAL_ADC_ConfigChannel+0x7f0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d113      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12a      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4819      	ldr	r0, [pc, #100]	; (8001d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8001cd4:	f7ff f835 	bl	8000d42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd8:	e021      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d11c      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d116      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_ADC_ConfigChannel+0x7e4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d111      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d02:	4619      	mov	r1, r3
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_ADC_ConfigChannel+0x7dc>)
 8001d06:	f7ff f81c 	bl	8000d42 <LL_ADC_SetCommonPathInternalCh>
 8001d0a:	e008      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001d26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	37d8      	adds	r7, #216	; 0xd8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	80080000 	.word	0x80080000
 8001d38:	50040300 	.word	0x50040300
 8001d3c:	c7520000 	.word	0xc7520000
 8001d40:	50040000 	.word	0x50040000
 8001d44:	20000000 	.word	0x20000000
 8001d48:	053e2d63 	.word	0x053e2d63
 8001d4c:	cb840000 	.word	0xcb840000
 8001d50:	80000001 	.word	0x80000001

08001d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f965 	bl	8001034 <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d169      	bne.n	8001e44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <ADC_Enable+0xfc>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e055      	b.n	8001e46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f934 	bl	800100c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001da4:	482b      	ldr	r0, [pc, #172]	; (8001e54 <ADC_Enable+0x100>)
 8001da6:	f7fe ffdf 	bl	8000d68 <LL_ADC_GetCommonPathInternalCh>
 8001daa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <ADC_Enable+0x104>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <ADC_Enable+0x108>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dce:	e002      	b.n	8001dd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f9      	bne.n	8001dd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe ff6e 	bl	8000cbc <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001de2:	e028      	b.n	8001e36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f923 	bl	8001034 <LL_ADC_IsEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f907 	bl	800100c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dfe:	f7fe ff5d 	bl	8000cbc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d914      	bls.n	8001e36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d00d      	beq.n	8001e36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	f043 0210 	orr.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	f043 0201 	orr.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e007      	b.n	8001e46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d1cf      	bne.n	8001de4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	8000003f 	.word	0x8000003f
 8001e54:	50040300 	.word	0x50040300
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	053e2d63 	.word	0x053e2d63

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff47 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff5c 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffb0 	bl	8001f80 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e154      	b.n	80022e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8146 	beq.w	80022e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d005      	beq.n	800206c <HAL_GPIO_Init+0x40>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d017      	beq.n	800210a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d123      	bne.n	800215e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	6939      	ldr	r1, [r7, #16]
 800215a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0203 	and.w	r2, r3, #3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80a0 	beq.w	80022e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a0:	4b58      	ldr	r3, [pc, #352]	; (8002304 <HAL_GPIO_Init+0x2d8>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	4a57      	ldr	r2, [pc, #348]	; (8002304 <HAL_GPIO_Init+0x2d8>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6613      	str	r3, [r2, #96]	; 0x60
 80021ac:	4b55      	ldr	r3, [pc, #340]	; (8002304 <HAL_GPIO_Init+0x2d8>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_GPIO_Init+0x2dc>)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021e2:	d019      	beq.n	8002218 <HAL_GPIO_Init+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_GPIO_Init+0x2e0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_GPIO_Init+0x1e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_GPIO_Init+0x2e4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00d      	beq.n	8002210 <HAL_GPIO_Init+0x1e4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a47      	ldr	r2, [pc, #284]	; (8002314 <HAL_GPIO_Init+0x2e8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d007      	beq.n	800220c <HAL_GPIO_Init+0x1e0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a46      	ldr	r2, [pc, #280]	; (8002318 <HAL_GPIO_Init+0x2ec>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_GPIO_Init+0x1dc>
 8002204:	2304      	movs	r3, #4
 8002206:	e008      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002208:	2307      	movs	r3, #7
 800220a:	e006      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 800220c:	2303      	movs	r3, #3
 800220e:	e004      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002210:	2302      	movs	r3, #2
 8002212:	e002      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002218:	2300      	movs	r3, #0
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	f002 0203 	and.w	r2, r2, #3
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	4093      	lsls	r3, r2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800222a:	4937      	ldr	r1, [pc, #220]	; (8002308 <HAL_GPIO_Init+0x2dc>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_GPIO_Init+0x2f0>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800225c:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_GPIO_Init+0x2f0>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_GPIO_Init+0x2f0>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <HAL_GPIO_Init+0x2f0>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800228c:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_GPIO_Init+0x2f0>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022b0:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_GPIO_Init+0x2f0>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_GPIO_Init+0x2f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_GPIO_Init+0x2f0>)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f aea3 	bne.w	800203c <HAL_GPIO_Init+0x10>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	40010000 	.word	0x40010000
 800230c:	48000400 	.word	0x48000400
 8002310:	48000800 	.word	0x48000800
 8002314:	48000c00 	.word	0x48000c00
 8002318:	48001000 	.word	0x48001000
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800233c:	e002      	b.n	8002344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_PWREx_GetVoltageRange+0x18>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40007000 	.word	0x40007000

0800236c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237a:	d130      	bne.n	80023de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002388:	d038      	beq.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002398:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2232      	movs	r2, #50	; 0x32
 80023a0:	fb02 f303 	mul.w	r3, r2, r3
 80023a4:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	3301      	adds	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b0:	e002      	b.n	80023b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d102      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f2      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d110      	bne.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e00f      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	d007      	beq.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f4:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000
 8002410:	20000000 	.word	0x20000000
 8002414:	431bde83 	.word	0x431bde83

08002418 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f000 bc02 	b.w	8002c30 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242c:	4b96      	ldr	r3, [pc, #600]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002436:	4b94      	ldr	r3, [pc, #592]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80e4 	beq.w	8002616 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_OscConfig+0x4c>
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	f040 808b 	bne.w	8002572 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b01      	cmp	r3, #1
 8002460:	f040 8087 	bne.w	8002572 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002464:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_OscConfig+0x64>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e3d9      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_RCC_OscConfig+0x7e>
 800248c:	4b7e      	ldr	r3, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002494:	e005      	b.n	80024a2 <HAL_RCC_OscConfig+0x8a>
 8002496:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d223      	bcs.n	80024ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fd8c 	bl	8002fc8 <RCC_SetFlashLatencyFromMSIRange>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e3ba      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a72      	ldr	r2, [pc, #456]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	496d      	ldr	r1, [pc, #436]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4968      	ldr	r1, [pc, #416]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
 80024ec:	e025      	b.n	800253a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ee:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4960      	ldr	r1, [pc, #384]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	495b      	ldr	r1, [pc, #364]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fd4c 	bl	8002fc8 <RCC_SetFlashLatencyFromMSIRange>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e37a      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800253a:	f000 fc81 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 800253e:	4602      	mov	r2, r0
 8002540:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	4950      	ldr	r1, [pc, #320]	; (800268c <HAL_RCC_OscConfig+0x274>)
 800254c:	5ccb      	ldrb	r3, [r1, r3]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	fa22 f303 	lsr.w	r3, r2, r3
 8002556:	4a4e      	ldr	r2, [pc, #312]	; (8002690 <HAL_RCC_OscConfig+0x278>)
 8002558:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800255a:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <HAL_RCC_OscConfig+0x27c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fb5c 	bl	8000c1c <HAL_InitTick>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d052      	beq.n	8002614 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	e35e      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d032      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800257a:	4b43      	ldr	r3, [pc, #268]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a42      	ldr	r2, [pc, #264]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002586:	f7fe fb99 	bl	8000cbc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800258e:	f7fe fb95 	bl	8000cbc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e347      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a0:	4b39      	ldr	r3, [pc, #228]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a35      	ldr	r2, [pc, #212]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ca:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	492b      	ldr	r1, [pc, #172]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e01a      	b.n	8002616 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025e0:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fb66 	bl	8000cbc <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f4:	f7fe fb62 	bl	8000cbc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e314      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1dc>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d073      	beq.n	800270a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x21c>
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d10e      	bne.n	800264c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d063      	beq.n	8002708 <HAL_RCC_OscConfig+0x2f0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d15f      	bne.n	8002708 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e2f1      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x24c>
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e025      	b.n	80026b0 <HAL_RCC_OscConfig+0x298>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266c:	d114      	bne.n	8002698 <HAL_RCC_OscConfig+0x280>
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a05      	ldr	r2, [pc, #20]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a02      	ldr	r2, [pc, #8]	; (8002688 <HAL_RCC_OscConfig+0x270>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e013      	b.n	80026b0 <HAL_RCC_OscConfig+0x298>
 8002688:	40021000 	.word	0x40021000
 800268c:	08004ba0 	.word	0x08004ba0
 8002690:	20000000 	.word	0x20000000
 8002694:	20000004 	.word	0x20000004
 8002698:	4ba0      	ldr	r3, [pc, #640]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a9f      	ldr	r2, [pc, #636]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800269e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b9d      	ldr	r3, [pc, #628]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a9c      	ldr	r2, [pc, #624]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d013      	beq.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fb00 	bl	8000cbc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe fafc 	bl	8000cbc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e2ae      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d2:	4b92      	ldr	r3, [pc, #584]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2a8>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe faec 	bl	8000cbc <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fae8 	bl	8000cbc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e29a      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2d0>
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d060      	beq.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d005      	beq.n	8002728 <HAL_RCC_OscConfig+0x310>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d119      	bne.n	8002756 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d116      	bne.n	8002756 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002728:	4b7c      	ldr	r3, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x328>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e277      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	4973      	ldr	r1, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002754:	e040      	b.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d023      	beq.n	80027a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275e:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe faa7 	bl	8000cbc <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe faa3 	bl	8000cbc <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e255      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002784:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b62      	ldr	r3, [pc, #392]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	495f      	ldr	r1, [pc, #380]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e018      	b.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80027ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fa83 	bl	8000cbc <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fa7f 	bl	8000cbc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e231      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027cc:	4b53      	ldr	r3, [pc, #332]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d03c      	beq.n	800285e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01c      	beq.n	8002826 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ec:	4b4b      	ldr	r3, [pc, #300]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80027ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f2:	4a4a      	ldr	r2, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fa5e 	bl	8000cbc <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fa5a 	bl	8000cbc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e20c      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ef      	beq.n	8002804 <HAL_RCC_OscConfig+0x3ec>
 8002824:	e01b      	b.n	800285e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002826:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282c:	4a3b      	ldr	r2, [pc, #236]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fa41 	bl	8000cbc <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe fa3d 	bl	8000cbc <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1ef      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ef      	bne.n	800283e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a6 	beq.w	80029b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10d      	bne.n	8002898 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002886:	6593      	str	r3, [r2, #88]	; 0x58
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002894:	2301      	movs	r3, #1
 8002896:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x508>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d118      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <HAL_RCC_OscConfig+0x508>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_RCC_OscConfig+0x508>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fa04 	bl	8000cbc <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fa00 	bl	8000cbc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1b2      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_RCC_OscConfig+0x508>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d108      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4d8>
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ee:	e029      	b.n	8002944 <HAL_RCC_OscConfig+0x52c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d115      	bne.n	8002924 <HAL_RCC_OscConfig+0x50c>
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_OscConfig+0x504>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_RCC_OscConfig+0x504>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	4a03      	ldr	r2, [pc, #12]	; (800291c <HAL_RCC_OscConfig+0x504>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002918:	e014      	b.n	8002944 <HAL_RCC_OscConfig+0x52c>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
 8002924:	4b9a      	ldr	r3, [pc, #616]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	4a99      	ldr	r2, [pc, #612]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002934:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a95      	ldr	r2, [pc, #596]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d016      	beq.n	800297a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe f9b6 	bl	8000cbc <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe f9b2 	bl	8000cbc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e162      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ed      	beq.n	8002954 <HAL_RCC_OscConfig+0x53c>
 8002978:	e015      	b.n	80029a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe f99f 	bl	8000cbc <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f99b 	bl	8000cbc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e14b      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002998:	4b7d      	ldr	r3, [pc, #500]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ed      	bne.n	8002982 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a6:	7ffb      	ldrb	r3, [r7, #31]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d03c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029cc:	4b70      	ldr	r3, [pc, #448]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 80029ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029d2:	4a6f      	ldr	r2, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe f96e 	bl	8000cbc <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e4:	f7fe f96a 	bl	8000cbc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e11c      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029f6:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 80029f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ef      	beq.n	80029e4 <HAL_RCC_OscConfig+0x5cc>
 8002a04:	e01b      	b.n	8002a3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a06:	4b62      	ldr	r3, [pc, #392]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a0c:	4a60      	ldr	r2, [pc, #384]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7fe f951 	bl	8000cbc <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1e:	f7fe f94d 	bl	8000cbc <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0ff      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a30:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ef      	bne.n	8002a1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80f3 	beq.w	8002c2e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	f040 80c9 	bne.w	8002be4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a52:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 0203 	and.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d12c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	3b01      	subs	r3, #1
 8002a72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d123      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d11b      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d113      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d06b      	beq.n	8002b98 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d062      	beq.n	8002b8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0ac      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae2:	f7fe f8eb 	bl	8000cbc <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe f8e7 	bl	8000cbc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e099      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_OscConfig+0x77c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b18:	3a01      	subs	r2, #1
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b22:	0212      	lsls	r2, r2, #8
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b2a:	0852      	lsrs	r2, r2, #1
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0552      	lsls	r2, r2, #21
 8002b30:	4311      	orrs	r1, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	4311      	orrs	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b42:	06d2      	lsls	r2, r2, #27
 8002b44:	430a      	orrs	r2, r1
 8002b46:	4912      	ldr	r1, [pc, #72]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0f      	ldr	r2, [pc, #60]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b64:	f7fe f8aa 	bl	8000cbc <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe f8a6 	bl	8000cbc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e058      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b8a:	e050      	b.n	8002c2e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04f      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
 8002b90:	40021000 	.word	0x40021000
 8002b94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d144      	bne.n	8002c2e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bbc:	f7fe f87e 	bl	8000cbc <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe f87a 	bl	8000cbc <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e02c      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x7ac>
 8002be2:	e024      	b.n	8002c2e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d01f      	beq.n	8002c2a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe f861 	bl	8000cbc <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7fe f85d 	bl	8000cbc <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e00f      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4905      	ldr	r1, [pc, #20]	; (8002c38 <HAL_RCC_OscConfig+0x820>)
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_OscConfig+0x824>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
 8002c28:	e001      	b.n	8002c2e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	feeefffc 	.word	0xfeeefffc

08002c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0e7      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b75      	ldr	r3, [pc, #468]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d910      	bls.n	8002c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b72      	ldr	r3, [pc, #456]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 0207 	bic.w	r2, r3, #7
 8002c6a:	4970      	ldr	r1, [pc, #448]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cf      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d908      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca0:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4960      	ldr	r1, [pc, #384]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04c      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d121      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e0a6      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d115      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e09a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e08e      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e086      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4943      	ldr	r1, [pc, #268]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fd ffc8 	bl	8000cbc <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fd ffc4 	bl	8000cbc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e06e      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d208      	bcs.n	8002d86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	492b      	ldr	r1, [pc, #172]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d210      	bcs.n	8002db6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 0207 	bic.w	r2, r3, #7
 8002d9c:	4923      	ldr	r1, [pc, #140]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da4:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_RCC_ClockConfig+0x1ec>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e036      	b.n	8002e24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4918      	ldr	r1, [pc, #96]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4910      	ldr	r1, [pc, #64]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df4:	f000 f824 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	490b      	ldr	r1, [pc, #44]	; (8002e34 <HAL_RCC_ClockConfig+0x1f4>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1fc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd feff 	bl	8000c1c <HAL_InitTick>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e22:	7afb      	ldrb	r3, [r7, #11]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40022000 	.word	0x40022000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08004ba0 	.word	0x08004ba0
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_GetSysClockFreq+0x34>
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d121      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d11e      	bne.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e005      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d102      	bne.n	8002ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d134      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d003      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0xac>
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee8:	617b      	str	r3, [r7, #20]
      break;
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eee:	617b      	str	r3, [r7, #20]
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	617b      	str	r3, [r7, #20]
      break;
 8002ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	3301      	adds	r3, #1
 8002f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	0e5b      	lsrs	r3, r3, #25
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f38:	69bb      	ldr	r3, [r7, #24]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	; 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08004bb8 	.word	0x08004bb8
 8002f50:	00f42400 	.word	0x00f42400
 8002f54:	007a1200 	.word	0x007a1200

08002f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000000 	.word	0x20000000

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f74:	f7ff fff0 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4904      	ldr	r1, [pc, #16]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08004bb0 	.word	0x08004bb0

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fa0:	f7ff ffda 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0adb      	lsrs	r3, r3, #11
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08004bb0 	.word	0x08004bb0

08002fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fe0:	f7ff f9b6 	bl	8002350 <HAL_PWREx_GetVoltageRange>
 8002fe4:	6178      	str	r0, [r7, #20]
 8002fe6:	e014      	b.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	4a24      	ldr	r2, [pc, #144]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003000:	f7ff f9a6 	bl	8002350 <HAL_PWREx_GetVoltageRange>
 8003004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d10b      	bne.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d919      	bls.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2ba0      	cmp	r3, #160	; 0xa0
 8003024:	d902      	bls.n	800302c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003026:	2302      	movs	r3, #2
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e013      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800302c:	2301      	movs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	e010      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d902      	bls.n	800303e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003038:	2303      	movs	r3, #3
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	e00a      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d102      	bne.n	800304a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003044:	2302      	movs	r3, #2
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e004      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d101      	bne.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003050:	2301      	movs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 0207 	bic.w	r2, r3, #7
 800305c:	4909      	ldr	r1, [pc, #36]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40022000 	.word	0x40022000

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003090:	2300      	movs	r3, #0
 8003092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003094:	2300      	movs	r3, #0
 8003096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d031      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ac:	d01a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030b2:	d814      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030bc:	d10f      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80030be:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a5c      	ldr	r2, [pc, #368]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ca:	e00c      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa44 	bl	8003560 <RCCEx_PLLSAI1_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030dc:	e003      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	74fb      	strb	r3, [r7, #19]
      break;
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80030e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ec:	4b51      	ldr	r3, [pc, #324]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	494e      	ldr	r1, [pc, #312]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003102:	e001      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 809e 	beq.w	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800311a:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	6593      	str	r3, [r2, #88]	; 0x58
 800313c:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003148:	2301      	movs	r3, #1
 800314a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800314c:	4b3a      	ldr	r3, [pc, #232]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a39      	ldr	r2, [pc, #228]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003158:	f7fd fdb0 	bl	8000cbc <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315e:	e009      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003160:	f7fd fdac 	bl	8000cbc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	74fb      	strb	r3, [r7, #19]
        break;
 8003172:	e005      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003174:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d15a      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01e      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d019      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031ce:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fd6c 	bl	8000cbc <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e6:	e00b      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fd fd68 	bl	8000cbc <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d902      	bls.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	74fb      	strb	r3, [r7, #19]
            break;
 80031fe:	e006      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ec      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003222:	4904      	ldr	r1, [pc, #16]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800322a:	e009      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
 8003230:	e006      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003240:	7c7b      	ldrb	r3, [r7, #17]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003246:	4b9e      	ldr	r3, [pc, #632]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4a9d      	ldr	r2, [pc, #628]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800324c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800325e:	4b98      	ldr	r3, [pc, #608]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f023 0203 	bic.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4994      	ldr	r1, [pc, #592]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003280:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f023 020c 	bic.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	498c      	ldr	r1, [pc, #560]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032a2:	4b87      	ldr	r3, [pc, #540]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	4983      	ldr	r1, [pc, #524]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032c4:	4b7e      	ldr	r3, [pc, #504]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	497b      	ldr	r1, [pc, #492]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4972      	ldr	r1, [pc, #456]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003308:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	496a      	ldr	r1, [pc, #424]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800332a:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800332c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	4961      	ldr	r1, [pc, #388]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334c:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800334e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003352:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	4959      	ldr	r1, [pc, #356]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	4950      	ldr	r1, [pc, #320]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	4948      	ldr	r1, [pc, #288]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033b2:	4b43      	ldr	r3, [pc, #268]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	493f      	ldr	r1, [pc, #252]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d028      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d4:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	4937      	ldr	r1, [pc, #220]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f2:	d106      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fe:	60d3      	str	r3, [r2, #12]
 8003400:	e011      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d10c      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f8a4 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d028      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	491f      	ldr	r1, [pc, #124]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003450:	d106      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800345c:	60d3      	str	r3, [r2, #12]
 800345e:	e011      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003468:	d10c      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f000 f875 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	4908      	ldr	r1, [pc, #32]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ae:	d109      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a02      	ldr	r2, [pc, #8]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ba:	60d3      	str	r3, [r2, #12]
 80034bc:	e014      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f843 	bl	8003560 <RCCEx_PLLSAI1_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01c      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003512:	d10c      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	2102      	movs	r1, #2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f820 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	4904      	ldr	r1, [pc, #16]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003550:	7cbb      	ldrb	r3, [r7, #18]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000

08003560 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356e:	4b74      	ldr	r3, [pc, #464]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800357a:	4b71      	ldr	r3, [pc, #452]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d10d      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
       ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003592:	4b6b      	ldr	r3, [pc, #428]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
       ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d047      	beq.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e044      	b.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d018      	beq.n	80035e6 <RCCEx_PLLSAI1_Config+0x86>
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d825      	bhi.n	8003604 <RCCEx_PLLSAI1_Config+0xa4>
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d002      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x62>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d009      	beq.n	80035d4 <RCCEx_PLLSAI1_Config+0x74>
 80035c0:	e020      	b.n	8003604 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035c2:	4b5f      	ldr	r3, [pc, #380]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d2:	e01a      	b.n	800360a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e013      	b.n	800360e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e6:	4b56      	ldr	r3, [pc, #344]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003602:	e006      	b.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e004      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003612:	bf00      	nop
    }

    if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800361a:	4b49      	ldr	r3, [pc, #292]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	430b      	orrs	r3, r1
 8003630:	4943      	ldr	r1, [pc, #268]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d17c      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800363c:	4b40      	ldr	r3, [pc, #256]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3f      	ldr	r2, [pc, #252]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd fb38 	bl	8000cbc <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003650:	f7fd fb34 	bl	8000cbc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
        break;
 8003662:	e005      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ef      	bne.n	8003650 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d15f      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d110      	bne.n	800369e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003684:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6892      	ldr	r2, [r2, #8]
 800368c:	0211      	lsls	r1, r2, #8
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	06d2      	lsls	r2, r2, #27
 8003694:	430a      	orrs	r2, r1
 8003696:	492a      	ldr	r1, [pc, #168]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]
 800369c:	e027      	b.n	80036ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d112      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	0211      	lsls	r1, r2, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6912      	ldr	r2, [r2, #16]
 80036ba:	0852      	lsrs	r2, r2, #1
 80036bc:	3a01      	subs	r2, #1
 80036be:	0552      	lsls	r2, r2, #21
 80036c0:	430a      	orrs	r2, r1
 80036c2:	491f      	ldr	r1, [pc, #124]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	610b      	str	r3, [r1, #16]
 80036c8:	e011      	b.n	80036ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	0211      	lsls	r1, r2, #8
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6952      	ldr	r2, [r2, #20]
 80036e0:	0852      	lsrs	r2, r2, #1
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0652      	lsls	r2, r2, #25
 80036e6:	430a      	orrs	r2, r1
 80036e8:	4915      	ldr	r1, [pc, #84]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fd fadf 	bl	8000cbc <HAL_GetTick>
 80036fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003700:	e009      	b.n	8003716 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003702:	f7fd fadb 	bl	8000cbc <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d902      	bls.n	8003716 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	73fb      	strb	r3, [r7, #15]
          break;
 8003714:	e005      	b.n	8003722 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ef      	beq.n	8003702 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003732:	4313      	orrs	r3, r2
 8003734:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e040      	b.n	80037d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd f940 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb38 	bl	8003e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8af 	bl	80038f4 <UART_SetConfig>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e01b      	b.n	80037d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fbb7 	bl	8003f44 <UART_CheckIdleState>
 80037d6:	4603      	mov	r3, r0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d178      	bne.n	80038ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_UART_Transmit+0x24>
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e071      	b.n	80038ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2221      	movs	r2, #33	; 0x21
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003816:	f7fd fa51 	bl	8000cbc <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d108      	bne.n	8003848 <HAL_UART_Transmit+0x68>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003850:	e030      	b.n	80038b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fc19 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e03c      	b.n	80038ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	881a      	ldrh	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003884:	b292      	uxth	r2, r2
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	3302      	adds	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e008      	b.n	80038a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b292      	uxth	r2, r2
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3301      	adds	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1c8      	bne.n	8003852 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2140      	movs	r1, #64	; 0x40
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fbe2 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e005      	b.n	80038ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f8:	b08a      	sub	sp, #40	; 0x28
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	4313      	orrs	r3, r2
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4ba5      	ldr	r3, [pc, #660]	; (8003bb8 <UART_SetConfig+0x2c4>)
 8003924:	4013      	ands	r3, r2
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392c:	430b      	orrs	r3, r1
 800392e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a9a      	ldr	r2, [pc, #616]	; (8003bbc <UART_SetConfig+0x2c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	4313      	orrs	r3, r2
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a91      	ldr	r2, [pc, #580]	; (8003bc0 <UART_SetConfig+0x2cc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d126      	bne.n	80039cc <UART_SetConfig+0xd8>
 800397e:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <UART_SetConfig+0x2d0>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d81b      	bhi.n	80039c4 <UART_SetConfig+0xd0>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0xa0>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039b5 	.word	0x080039b5
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e0d6      	b.n	8003b5a <UART_SetConfig+0x266>
 80039ac:	2302      	movs	r3, #2
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e0d2      	b.n	8003b5a <UART_SetConfig+0x266>
 80039b4:	2304      	movs	r3, #4
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e0ce      	b.n	8003b5a <UART_SetConfig+0x266>
 80039bc:	2308      	movs	r3, #8
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e0ca      	b.n	8003b5a <UART_SetConfig+0x266>
 80039c4:	2310      	movs	r3, #16
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e0c6      	b.n	8003b5a <UART_SetConfig+0x266>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7d      	ldr	r2, [pc, #500]	; (8003bc8 <UART_SetConfig+0x2d4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d138      	bne.n	8003a48 <UART_SetConfig+0x154>
 80039d6:	4b7b      	ldr	r3, [pc, #492]	; (8003bc4 <UART_SetConfig+0x2d0>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d82d      	bhi.n	8003a40 <UART_SetConfig+0x14c>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <UART_SetConfig+0xf8>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a41 	.word	0x08003a41
 80039f8:	08003a41 	.word	0x08003a41
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a41 	.word	0x08003a41
 8003a08:	08003a41 	.word	0x08003a41
 8003a0c:	08003a29 	.word	0x08003a29
 8003a10:	08003a41 	.word	0x08003a41
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003a41 	.word	0x08003a41
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e098      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e094      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e090      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e08c      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e088      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <UART_SetConfig+0x2d8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d125      	bne.n	8003a9e <UART_SetConfig+0x1aa>
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <UART_SetConfig+0x2d0>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d016      	beq.n	8003a8e <UART_SetConfig+0x19a>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d818      	bhi.n	8003a96 <UART_SetConfig+0x1a2>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d00a      	beq.n	8003a7e <UART_SetConfig+0x18a>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d814      	bhi.n	8003a96 <UART_SetConfig+0x1a2>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <UART_SetConfig+0x182>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d008      	beq.n	8003a86 <UART_SetConfig+0x192>
 8003a74:	e00f      	b.n	8003a96 <UART_SetConfig+0x1a2>
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7c:	e06d      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a84:	e069      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a86:	2304      	movs	r3, #4
 8003a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8c:	e065      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a94:	e061      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a96:	2310      	movs	r3, #16
 8003a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9c:	e05d      	b.n	8003b5a <UART_SetConfig+0x266>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <UART_SetConfig+0x2dc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d125      	bne.n	8003af4 <UART_SetConfig+0x200>
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <UART_SetConfig+0x2d0>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab4:	d016      	beq.n	8003ae4 <UART_SetConfig+0x1f0>
 8003ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab8:	d818      	bhi.n	8003aec <UART_SetConfig+0x1f8>
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d00a      	beq.n	8003ad4 <UART_SetConfig+0x1e0>
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d814      	bhi.n	8003aec <UART_SetConfig+0x1f8>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <UART_SetConfig+0x1d8>
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d008      	beq.n	8003adc <UART_SetConfig+0x1e8>
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x1f8>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e042      	b.n	8003b5a <UART_SetConfig+0x266>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e03e      	b.n	8003b5a <UART_SetConfig+0x266>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae2:	e03a      	b.n	8003b5a <UART_SetConfig+0x266>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aea:	e036      	b.n	8003b5a <UART_SetConfig+0x266>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e032      	b.n	8003b5a <UART_SetConfig+0x266>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a30      	ldr	r2, [pc, #192]	; (8003bbc <UART_SetConfig+0x2c8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d12a      	bne.n	8003b54 <UART_SetConfig+0x260>
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <UART_SetConfig+0x2d0>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0c:	d01a      	beq.n	8003b44 <UART_SetConfig+0x250>
 8003b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b12:	d81b      	bhi.n	8003b4c <UART_SetConfig+0x258>
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d00c      	beq.n	8003b34 <UART_SetConfig+0x240>
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1e:	d815      	bhi.n	8003b4c <UART_SetConfig+0x258>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <UART_SetConfig+0x238>
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b28:	d008      	beq.n	8003b3c <UART_SetConfig+0x248>
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x258>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e012      	b.n	8003b5a <UART_SetConfig+0x266>
 8003b34:	2302      	movs	r3, #2
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	e00e      	b.n	8003b5a <UART_SetConfig+0x266>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e00a      	b.n	8003b5a <UART_SetConfig+0x266>
 8003b44:	2308      	movs	r3, #8
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e006      	b.n	8003b5a <UART_SetConfig+0x266>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e002      	b.n	8003b5a <UART_SetConfig+0x266>
 8003b54:	2310      	movs	r3, #16
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <UART_SetConfig+0x2c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f040 808b 	bne.w	8003c7c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d834      	bhi.n	8003bd8 <UART_SetConfig+0x2e4>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0x280>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003bd9 	.word	0x08003bd9
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003bd9 	.word	0x08003bd9
 8003b84:	08003ba7 	.word	0x08003ba7
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003bd9 	.word	0x08003bd9
 8003b94:	08003baf 	.word	0x08003baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b98:	f7ff f9ea 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8003b9c:	61f8      	str	r0, [r7, #28]
        break;
 8003b9e:	e021      	b.n	8003be4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <UART_SetConfig+0x2e0>)
 8003ba2:	61fb      	str	r3, [r7, #28]
        break;
 8003ba4:	e01e      	b.n	8003be4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba6:	f7ff f94b 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003baa:	61f8      	str	r0, [r7, #28]
        break;
 8003bac:	e01a      	b.n	8003be4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb2:	61fb      	str	r3, [r7, #28]
        break;
 8003bb4:	e016      	b.n	8003be4 <UART_SetConfig+0x2f0>
 8003bb6:	bf00      	nop
 8003bb8:	efff69f3 	.word	0xefff69f3
 8003bbc:	40008000 	.word	0x40008000
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40004400 	.word	0x40004400
 8003bcc:	40004800 	.word	0x40004800
 8003bd0:	40004c00 	.word	0x40004c00
 8003bd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80fa 	beq.w	8003de0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d305      	bcc.n	8003c08 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d903      	bls.n	8003c10 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c0e:	e0e7      	b.n	8003de0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2200      	movs	r2, #0
 8003c14:	461c      	mov	r4, r3
 8003c16:	4615      	mov	r5, r2
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	022b      	lsls	r3, r5, #8
 8003c22:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c26:	0222      	lsls	r2, r4, #8
 8003c28:	68f9      	ldr	r1, [r7, #12]
 8003c2a:	6849      	ldr	r1, [r1, #4]
 8003c2c:	0849      	lsrs	r1, r1, #1
 8003c2e:	2000      	movs	r0, #0
 8003c30:	4688      	mov	r8, r1
 8003c32:	4681      	mov	r9, r0
 8003c34:	eb12 0a08 	adds.w	sl, r2, r8
 8003c38:	eb43 0b09 	adc.w	fp, r3, r9
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	f7fc fb17 	bl	8000280 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4613      	mov	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c60:	d308      	bcc.n	8003c74 <UART_SetConfig+0x380>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c68:	d204      	bcs.n	8003c74 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	e0b5      	b.n	8003de0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c7a:	e0b1      	b.n	8003de0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c84:	d15d      	bne.n	8003d42 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d827      	bhi.n	8003cde <UART_SetConfig+0x3ea>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x3a0>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7ff f95a 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	61f8      	str	r0, [r7, #28]
        break;
 8003cbe:	e014      	b.n	8003cea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7ff f96c 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8003cc4:	61f8      	str	r0, [r7, #28]
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <UART_SetConfig+0x508>)
 8003cca:	61fb      	str	r3, [r7, #28]
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7ff f8b7 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003cd2:	61f8      	str	r0, [r7, #28]
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	61fb      	str	r3, [r7, #28]
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d077      	beq.n	8003de0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005a      	lsls	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	d916      	bls.n	8003d3a <UART_SetConfig+0x446>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d212      	bcs.n	8003d3a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f023 030f 	bic.w	r3, r3, #15
 8003d1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	8afb      	ldrh	r3, [r7, #22]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	8afa      	ldrh	r2, [r7, #22]
 8003d36:	60da      	str	r2, [r3, #12]
 8003d38:	e052      	b.n	8003de0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d40:	e04e      	b.n	8003de0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d827      	bhi.n	8003d9a <UART_SetConfig+0x4a6>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0x45c>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d75 	.word	0x08003d75
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	08003d9b 	.word	0x08003d9b
 8003d60:	08003d8b 	.word	0x08003d8b
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003d9b 	.word	0x08003d9b
 8003d6c:	08003d9b 	.word	0x08003d9b
 8003d70:	08003d93 	.word	0x08003d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d74:	f7ff f8fc 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8003d78:	61f8      	str	r0, [r7, #28]
        break;
 8003d7a:	e014      	b.n	8003da6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7ff f90e 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8003d80:	61f8      	str	r0, [r7, #28]
        break;
 8003d82:	e010      	b.n	8003da6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <UART_SetConfig+0x508>)
 8003d86:	61fb      	str	r3, [r7, #28]
        break;
 8003d88:	e00d      	b.n	8003da6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8a:	f7ff f859 	bl	8002e40 <HAL_RCC_GetSysClockFreq>
 8003d8e:	61f8      	str	r0, [r7, #28]
        break;
 8003d90:	e009      	b.n	8003da6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d96:	61fb      	str	r3, [r7, #28]
        break;
 8003d98:	e005      	b.n	8003da6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003da4:	bf00      	nop
    }

    if (pclk != 0U)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d019      	beq.n	8003de0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	085a      	lsrs	r2, r3, #1
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	441a      	add	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	d909      	bls.n	8003dda <UART_SetConfig+0x4e6>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dcc:	d205      	bcs.n	8003dda <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	e002      	b.n	8003de0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003dec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3728      	adds	r7, #40	; 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfa:	bf00      	nop
 8003dfc:	00f42400 	.word	0x00f42400

08003e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d10a      	bne.n	8003f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b098      	sub	sp, #96	; 0x60
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f54:	f7fc feb2 	bl	8000cbc <HAL_GetTick>
 8003f58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d12e      	bne.n	8003fc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f88c 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d021      	beq.n	8003fc6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e062      	b.n	800408c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d149      	bne.n	8004068 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f856 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d03c      	beq.n	8004068 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	633b      	str	r3, [r7, #48]	; 0x30
 800400e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e6      	bne.n	8003fee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004040:	61fa      	str	r2, [r7, #28]
 8004042:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	617b      	str	r3, [r7, #20]
   return(result);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e5      	bne.n	8004020 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e011      	b.n	800408c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3758      	adds	r7, #88	; 0x58
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	e04f      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d04b      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fc fe05 	bl	8000cbc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e04e      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d037      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d034      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d031      	beq.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d110      	bne.n	8004112 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2208      	movs	r2, #8
 80040f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f838 	bl	800416e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2208      	movs	r2, #8
 8004102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e029      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004120:	d111      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800412a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f81e 	bl	800416e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	429a      	cmp	r2, r3
 8004162:	d0a0      	beq.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416e:	b480      	push	{r7}
 8004170:	b095      	sub	sp, #84	; 0x54
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
 8004196:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800419a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e6      	bne.n	8004176 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3308      	adds	r3, #8
 80041c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d118      	bne.n	8004216 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	647b      	str	r3, [r7, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6979      	ldr	r1, [r7, #20]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	613b      	str	r3, [r7, #16]
   return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e6      	bne.n	80041e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	669a      	str	r2, [r3, #104]	; 0x68
}
 800422a:	bf00      	nop
 800422c:	3754      	adds	r7, #84	; 0x54
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <siprintf>:
 8004238:	b40e      	push	{r1, r2, r3}
 800423a:	b500      	push	{lr}
 800423c:	b09c      	sub	sp, #112	; 0x70
 800423e:	ab1d      	add	r3, sp, #116	; 0x74
 8004240:	9002      	str	r0, [sp, #8]
 8004242:	9006      	str	r0, [sp, #24]
 8004244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004248:	4809      	ldr	r0, [pc, #36]	; (8004270 <siprintf+0x38>)
 800424a:	9107      	str	r1, [sp, #28]
 800424c:	9104      	str	r1, [sp, #16]
 800424e:	4909      	ldr	r1, [pc, #36]	; (8004274 <siprintf+0x3c>)
 8004250:	f853 2b04 	ldr.w	r2, [r3], #4
 8004254:	9105      	str	r1, [sp, #20]
 8004256:	6800      	ldr	r0, [r0, #0]
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	a902      	add	r1, sp, #8
 800425c:	f000 f992 	bl	8004584 <_svfiprintf_r>
 8004260:	9b02      	ldr	r3, [sp, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	b01c      	add	sp, #112	; 0x70
 8004268:	f85d eb04 	ldr.w	lr, [sp], #4
 800426c:	b003      	add	sp, #12
 800426e:	4770      	bx	lr
 8004270:	20000058 	.word	0x20000058
 8004274:	ffff0208 	.word	0xffff0208

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000058 	.word	0x20000058

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4d0d      	ldr	r5, [pc, #52]	; (80042cc <__libc_init_array+0x38>)
 8004298:	4c0d      	ldr	r4, [pc, #52]	; (80042d0 <__libc_init_array+0x3c>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	2600      	movs	r6, #0
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	4d0b      	ldr	r5, [pc, #44]	; (80042d4 <__libc_init_array+0x40>)
 80042a6:	4c0c      	ldr	r4, [pc, #48]	; (80042d8 <__libc_init_array+0x44>)
 80042a8:	f000 fc6a 	bl	8004b80 <_init>
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	2600      	movs	r6, #0
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	08004c24 	.word	0x08004c24
 80042d0:	08004c24 	.word	0x08004c24
 80042d4:	08004c24 	.word	0x08004c24
 80042d8:	08004c28 	.word	0x08004c28

080042dc <__retarget_lock_acquire_recursive>:
 80042dc:	4770      	bx	lr

080042de <__retarget_lock_release_recursive>:
 80042de:	4770      	bx	lr

080042e0 <_free_r>:
 80042e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d044      	beq.n	8004370 <_free_r+0x90>
 80042e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ea:	9001      	str	r0, [sp, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f1a1 0404 	sub.w	r4, r1, #4
 80042f2:	bfb8      	it	lt
 80042f4:	18e4      	addlt	r4, r4, r3
 80042f6:	f000 f8df 	bl	80044b8 <__malloc_lock>
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <_free_r+0x94>)
 80042fc:	9801      	ldr	r0, [sp, #4]
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	b933      	cbnz	r3, 8004310 <_free_r+0x30>
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6014      	str	r4, [r2, #0]
 8004306:	b003      	add	sp, #12
 8004308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800430c:	f000 b8da 	b.w	80044c4 <__malloc_unlock>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d908      	bls.n	8004326 <_free_r+0x46>
 8004314:	6825      	ldr	r5, [r4, #0]
 8004316:	1961      	adds	r1, r4, r5
 8004318:	428b      	cmp	r3, r1
 800431a:	bf01      	itttt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	1949      	addeq	r1, r1, r5
 8004322:	6021      	streq	r1, [r4, #0]
 8004324:	e7ed      	b.n	8004302 <_free_r+0x22>
 8004326:	461a      	mov	r2, r3
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b10b      	cbz	r3, 8004330 <_free_r+0x50>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d9fa      	bls.n	8004326 <_free_r+0x46>
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	1855      	adds	r5, r2, r1
 8004334:	42a5      	cmp	r5, r4
 8004336:	d10b      	bne.n	8004350 <_free_r+0x70>
 8004338:	6824      	ldr	r4, [r4, #0]
 800433a:	4421      	add	r1, r4
 800433c:	1854      	adds	r4, r2, r1
 800433e:	42a3      	cmp	r3, r4
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	d1e0      	bne.n	8004306 <_free_r+0x26>
 8004344:	681c      	ldr	r4, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	6053      	str	r3, [r2, #4]
 800434a:	440c      	add	r4, r1
 800434c:	6014      	str	r4, [r2, #0]
 800434e:	e7da      	b.n	8004306 <_free_r+0x26>
 8004350:	d902      	bls.n	8004358 <_free_r+0x78>
 8004352:	230c      	movs	r3, #12
 8004354:	6003      	str	r3, [r0, #0]
 8004356:	e7d6      	b.n	8004306 <_free_r+0x26>
 8004358:	6825      	ldr	r5, [r4, #0]
 800435a:	1961      	adds	r1, r4, r5
 800435c:	428b      	cmp	r3, r1
 800435e:	bf04      	itt	eq
 8004360:	6819      	ldreq	r1, [r3, #0]
 8004362:	685b      	ldreq	r3, [r3, #4]
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	bf04      	itt	eq
 8004368:	1949      	addeq	r1, r1, r5
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	6054      	str	r4, [r2, #4]
 800436e:	e7ca      	b.n	8004306 <_free_r+0x26>
 8004370:	b003      	add	sp, #12
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	200002b0 	.word	0x200002b0

08004378 <sbrk_aligned>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4e0e      	ldr	r6, [pc, #56]	; (80043b4 <sbrk_aligned+0x3c>)
 800437c:	460c      	mov	r4, r1
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	4605      	mov	r5, r0
 8004382:	b911      	cbnz	r1, 800438a <sbrk_aligned+0x12>
 8004384:	f000 fba6 	bl	8004ad4 <_sbrk_r>
 8004388:	6030      	str	r0, [r6, #0]
 800438a:	4621      	mov	r1, r4
 800438c:	4628      	mov	r0, r5
 800438e:	f000 fba1 	bl	8004ad4 <_sbrk_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d00a      	beq.n	80043ac <sbrk_aligned+0x34>
 8004396:	1cc4      	adds	r4, r0, #3
 8004398:	f024 0403 	bic.w	r4, r4, #3
 800439c:	42a0      	cmp	r0, r4
 800439e:	d007      	beq.n	80043b0 <sbrk_aligned+0x38>
 80043a0:	1a21      	subs	r1, r4, r0
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 fb96 	bl	8004ad4 <_sbrk_r>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d101      	bne.n	80043b0 <sbrk_aligned+0x38>
 80043ac:	f04f 34ff 	mov.w	r4, #4294967295
 80043b0:	4620      	mov	r0, r4
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	200002b4 	.word	0x200002b4

080043b8 <_malloc_r>:
 80043b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043bc:	1ccd      	adds	r5, r1, #3
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	4607      	mov	r7, r0
 80043ce:	db01      	blt.n	80043d4 <_malloc_r+0x1c>
 80043d0:	42a9      	cmp	r1, r5
 80043d2:	d905      	bls.n	80043e0 <_malloc_r+0x28>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	2600      	movs	r6, #0
 80043da:	4630      	mov	r0, r6
 80043dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80044b4 <_malloc_r+0xfc>
 80043e4:	f000 f868 	bl	80044b8 <__malloc_lock>
 80043e8:	f8d8 3000 	ldr.w	r3, [r8]
 80043ec:	461c      	mov	r4, r3
 80043ee:	bb5c      	cbnz	r4, 8004448 <_malloc_r+0x90>
 80043f0:	4629      	mov	r1, r5
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7ff ffc0 	bl	8004378 <sbrk_aligned>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	4604      	mov	r4, r0
 80043fc:	d155      	bne.n	80044aa <_malloc_r+0xf2>
 80043fe:	f8d8 4000 	ldr.w	r4, [r8]
 8004402:	4626      	mov	r6, r4
 8004404:	2e00      	cmp	r6, #0
 8004406:	d145      	bne.n	8004494 <_malloc_r+0xdc>
 8004408:	2c00      	cmp	r4, #0
 800440a:	d048      	beq.n	800449e <_malloc_r+0xe6>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	4631      	mov	r1, r6
 8004410:	4638      	mov	r0, r7
 8004412:	eb04 0903 	add.w	r9, r4, r3
 8004416:	f000 fb5d 	bl	8004ad4 <_sbrk_r>
 800441a:	4581      	cmp	r9, r0
 800441c:	d13f      	bne.n	800449e <_malloc_r+0xe6>
 800441e:	6821      	ldr	r1, [r4, #0]
 8004420:	1a6d      	subs	r5, r5, r1
 8004422:	4629      	mov	r1, r5
 8004424:	4638      	mov	r0, r7
 8004426:	f7ff ffa7 	bl	8004378 <sbrk_aligned>
 800442a:	3001      	adds	r0, #1
 800442c:	d037      	beq.n	800449e <_malloc_r+0xe6>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	442b      	add	r3, r5
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	f8d8 3000 	ldr.w	r3, [r8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d038      	beq.n	80044ae <_malloc_r+0xf6>
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	42a2      	cmp	r2, r4
 8004440:	d12b      	bne.n	800449a <_malloc_r+0xe2>
 8004442:	2200      	movs	r2, #0
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	e00f      	b.n	8004468 <_malloc_r+0xb0>
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	1b52      	subs	r2, r2, r5
 800444c:	d41f      	bmi.n	800448e <_malloc_r+0xd6>
 800444e:	2a0b      	cmp	r2, #11
 8004450:	d917      	bls.n	8004482 <_malloc_r+0xca>
 8004452:	1961      	adds	r1, r4, r5
 8004454:	42a3      	cmp	r3, r4
 8004456:	6025      	str	r5, [r4, #0]
 8004458:	bf18      	it	ne
 800445a:	6059      	strne	r1, [r3, #4]
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	bf08      	it	eq
 8004460:	f8c8 1000 	streq.w	r1, [r8]
 8004464:	5162      	str	r2, [r4, r5]
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	4638      	mov	r0, r7
 800446a:	f104 060b 	add.w	r6, r4, #11
 800446e:	f000 f829 	bl	80044c4 <__malloc_unlock>
 8004472:	f026 0607 	bic.w	r6, r6, #7
 8004476:	1d23      	adds	r3, r4, #4
 8004478:	1af2      	subs	r2, r6, r3
 800447a:	d0ae      	beq.n	80043da <_malloc_r+0x22>
 800447c:	1b9b      	subs	r3, r3, r6
 800447e:	50a3      	str	r3, [r4, r2]
 8004480:	e7ab      	b.n	80043da <_malloc_r+0x22>
 8004482:	42a3      	cmp	r3, r4
 8004484:	6862      	ldr	r2, [r4, #4]
 8004486:	d1dd      	bne.n	8004444 <_malloc_r+0x8c>
 8004488:	f8c8 2000 	str.w	r2, [r8]
 800448c:	e7ec      	b.n	8004468 <_malloc_r+0xb0>
 800448e:	4623      	mov	r3, r4
 8004490:	6864      	ldr	r4, [r4, #4]
 8004492:	e7ac      	b.n	80043ee <_malloc_r+0x36>
 8004494:	4634      	mov	r4, r6
 8004496:	6876      	ldr	r6, [r6, #4]
 8004498:	e7b4      	b.n	8004404 <_malloc_r+0x4c>
 800449a:	4613      	mov	r3, r2
 800449c:	e7cc      	b.n	8004438 <_malloc_r+0x80>
 800449e:	230c      	movs	r3, #12
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4638      	mov	r0, r7
 80044a4:	f000 f80e 	bl	80044c4 <__malloc_unlock>
 80044a8:	e797      	b.n	80043da <_malloc_r+0x22>
 80044aa:	6025      	str	r5, [r4, #0]
 80044ac:	e7dc      	b.n	8004468 <_malloc_r+0xb0>
 80044ae:	605b      	str	r3, [r3, #4]
 80044b0:	deff      	udf	#255	; 0xff
 80044b2:	bf00      	nop
 80044b4:	200002b0 	.word	0x200002b0

080044b8 <__malloc_lock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	; (80044c0 <__malloc_lock+0x8>)
 80044ba:	f7ff bf0f 	b.w	80042dc <__retarget_lock_acquire_recursive>
 80044be:	bf00      	nop
 80044c0:	200002ac 	.word	0x200002ac

080044c4 <__malloc_unlock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	; (80044cc <__malloc_unlock+0x8>)
 80044c6:	f7ff bf0a 	b.w	80042de <__retarget_lock_release_recursive>
 80044ca:	bf00      	nop
 80044cc:	200002ac 	.word	0x200002ac

080044d0 <__ssputs_r>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	688e      	ldr	r6, [r1, #8]
 80044d6:	461f      	mov	r7, r3
 80044d8:	42be      	cmp	r6, r7
 80044da:	680b      	ldr	r3, [r1, #0]
 80044dc:	4682      	mov	sl, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	4690      	mov	r8, r2
 80044e2:	d82c      	bhi.n	800453e <__ssputs_r+0x6e>
 80044e4:	898a      	ldrh	r2, [r1, #12]
 80044e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ea:	d026      	beq.n	800453a <__ssputs_r+0x6a>
 80044ec:	6965      	ldr	r5, [r4, #20]
 80044ee:	6909      	ldr	r1, [r1, #16]
 80044f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044f4:	eba3 0901 	sub.w	r9, r3, r1
 80044f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044fc:	1c7b      	adds	r3, r7, #1
 80044fe:	444b      	add	r3, r9
 8004500:	106d      	asrs	r5, r5, #1
 8004502:	429d      	cmp	r5, r3
 8004504:	bf38      	it	cc
 8004506:	461d      	movcc	r5, r3
 8004508:	0553      	lsls	r3, r2, #21
 800450a:	d527      	bpl.n	800455c <__ssputs_r+0x8c>
 800450c:	4629      	mov	r1, r5
 800450e:	f7ff ff53 	bl	80043b8 <_malloc_r>
 8004512:	4606      	mov	r6, r0
 8004514:	b360      	cbz	r0, 8004570 <__ssputs_r+0xa0>
 8004516:	6921      	ldr	r1, [r4, #16]
 8004518:	464a      	mov	r2, r9
 800451a:	f000 faeb 	bl	8004af4 <memcpy>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	81a3      	strh	r3, [r4, #12]
 800452a:	6126      	str	r6, [r4, #16]
 800452c:	6165      	str	r5, [r4, #20]
 800452e:	444e      	add	r6, r9
 8004530:	eba5 0509 	sub.w	r5, r5, r9
 8004534:	6026      	str	r6, [r4, #0]
 8004536:	60a5      	str	r5, [r4, #8]
 8004538:	463e      	mov	r6, r7
 800453a:	42be      	cmp	r6, r7
 800453c:	d900      	bls.n	8004540 <__ssputs_r+0x70>
 800453e:	463e      	mov	r6, r7
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	4632      	mov	r2, r6
 8004544:	4641      	mov	r1, r8
 8004546:	f000 faab 	bl	8004aa0 <memmove>
 800454a:	68a3      	ldr	r3, [r4, #8]
 800454c:	1b9b      	subs	r3, r3, r6
 800454e:	60a3      	str	r3, [r4, #8]
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	4433      	add	r3, r6
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	2000      	movs	r0, #0
 8004558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455c:	462a      	mov	r2, r5
 800455e:	f000 fad7 	bl	8004b10 <_realloc_r>
 8004562:	4606      	mov	r6, r0
 8004564:	2800      	cmp	r0, #0
 8004566:	d1e0      	bne.n	800452a <__ssputs_r+0x5a>
 8004568:	6921      	ldr	r1, [r4, #16]
 800456a:	4650      	mov	r0, sl
 800456c:	f7ff feb8 	bl	80042e0 <_free_r>
 8004570:	230c      	movs	r3, #12
 8004572:	f8ca 3000 	str.w	r3, [sl]
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	f04f 30ff 	mov.w	r0, #4294967295
 8004582:	e7e9      	b.n	8004558 <__ssputs_r+0x88>

08004584 <_svfiprintf_r>:
 8004584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004588:	4698      	mov	r8, r3
 800458a:	898b      	ldrh	r3, [r1, #12]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	b09d      	sub	sp, #116	; 0x74
 8004590:	4607      	mov	r7, r0
 8004592:	460d      	mov	r5, r1
 8004594:	4614      	mov	r4, r2
 8004596:	d50e      	bpl.n	80045b6 <_svfiprintf_r+0x32>
 8004598:	690b      	ldr	r3, [r1, #16]
 800459a:	b963      	cbnz	r3, 80045b6 <_svfiprintf_r+0x32>
 800459c:	2140      	movs	r1, #64	; 0x40
 800459e:	f7ff ff0b 	bl	80043b8 <_malloc_r>
 80045a2:	6028      	str	r0, [r5, #0]
 80045a4:	6128      	str	r0, [r5, #16]
 80045a6:	b920      	cbnz	r0, 80045b2 <_svfiprintf_r+0x2e>
 80045a8:	230c      	movs	r3, #12
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	e0d0      	b.n	8004754 <_svfiprintf_r+0x1d0>
 80045b2:	2340      	movs	r3, #64	; 0x40
 80045b4:	616b      	str	r3, [r5, #20]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ba:	2320      	movs	r3, #32
 80045bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c4:	2330      	movs	r3, #48	; 0x30
 80045c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800476c <_svfiprintf_r+0x1e8>
 80045ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ce:	f04f 0901 	mov.w	r9, #1
 80045d2:	4623      	mov	r3, r4
 80045d4:	469a      	mov	sl, r3
 80045d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045da:	b10a      	cbz	r2, 80045e0 <_svfiprintf_r+0x5c>
 80045dc:	2a25      	cmp	r2, #37	; 0x25
 80045de:	d1f9      	bne.n	80045d4 <_svfiprintf_r+0x50>
 80045e0:	ebba 0b04 	subs.w	fp, sl, r4
 80045e4:	d00b      	beq.n	80045fe <_svfiprintf_r+0x7a>
 80045e6:	465b      	mov	r3, fp
 80045e8:	4622      	mov	r2, r4
 80045ea:	4629      	mov	r1, r5
 80045ec:	4638      	mov	r0, r7
 80045ee:	f7ff ff6f 	bl	80044d0 <__ssputs_r>
 80045f2:	3001      	adds	r0, #1
 80045f4:	f000 80a9 	beq.w	800474a <_svfiprintf_r+0x1c6>
 80045f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fa:	445a      	add	r2, fp
 80045fc:	9209      	str	r2, [sp, #36]	; 0x24
 80045fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80a1 	beq.w	800474a <_svfiprintf_r+0x1c6>
 8004608:	2300      	movs	r3, #0
 800460a:	f04f 32ff 	mov.w	r2, #4294967295
 800460e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004612:	f10a 0a01 	add.w	sl, sl, #1
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	9307      	str	r3, [sp, #28]
 800461a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800461e:	931a      	str	r3, [sp, #104]	; 0x68
 8004620:	4654      	mov	r4, sl
 8004622:	2205      	movs	r2, #5
 8004624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004628:	4850      	ldr	r0, [pc, #320]	; (800476c <_svfiprintf_r+0x1e8>)
 800462a:	f7fb fdd9 	bl	80001e0 <memchr>
 800462e:	9a04      	ldr	r2, [sp, #16]
 8004630:	b9d8      	cbnz	r0, 800466a <_svfiprintf_r+0xe6>
 8004632:	06d0      	lsls	r0, r2, #27
 8004634:	bf44      	itt	mi
 8004636:	2320      	movmi	r3, #32
 8004638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800463c:	0711      	lsls	r1, r2, #28
 800463e:	bf44      	itt	mi
 8004640:	232b      	movmi	r3, #43	; 0x2b
 8004642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004646:	f89a 3000 	ldrb.w	r3, [sl]
 800464a:	2b2a      	cmp	r3, #42	; 0x2a
 800464c:	d015      	beq.n	800467a <_svfiprintf_r+0xf6>
 800464e:	9a07      	ldr	r2, [sp, #28]
 8004650:	4654      	mov	r4, sl
 8004652:	2000      	movs	r0, #0
 8004654:	f04f 0c0a 	mov.w	ip, #10
 8004658:	4621      	mov	r1, r4
 800465a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800465e:	3b30      	subs	r3, #48	; 0x30
 8004660:	2b09      	cmp	r3, #9
 8004662:	d94d      	bls.n	8004700 <_svfiprintf_r+0x17c>
 8004664:	b1b0      	cbz	r0, 8004694 <_svfiprintf_r+0x110>
 8004666:	9207      	str	r2, [sp, #28]
 8004668:	e014      	b.n	8004694 <_svfiprintf_r+0x110>
 800466a:	eba0 0308 	sub.w	r3, r0, r8
 800466e:	fa09 f303 	lsl.w	r3, r9, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	46a2      	mov	sl, r4
 8004678:	e7d2      	b.n	8004620 <_svfiprintf_r+0x9c>
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	1d19      	adds	r1, r3, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	9103      	str	r1, [sp, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	bfbb      	ittet	lt
 8004686:	425b      	neglt	r3, r3
 8004688:	f042 0202 	orrlt.w	r2, r2, #2
 800468c:	9307      	strge	r3, [sp, #28]
 800468e:	9307      	strlt	r3, [sp, #28]
 8004690:	bfb8      	it	lt
 8004692:	9204      	strlt	r2, [sp, #16]
 8004694:	7823      	ldrb	r3, [r4, #0]
 8004696:	2b2e      	cmp	r3, #46	; 0x2e
 8004698:	d10c      	bne.n	80046b4 <_svfiprintf_r+0x130>
 800469a:	7863      	ldrb	r3, [r4, #1]
 800469c:	2b2a      	cmp	r3, #42	; 0x2a
 800469e:	d134      	bne.n	800470a <_svfiprintf_r+0x186>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	9203      	str	r2, [sp, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bfb8      	it	lt
 80046ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80046b0:	3402      	adds	r4, #2
 80046b2:	9305      	str	r3, [sp, #20]
 80046b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800477c <_svfiprintf_r+0x1f8>
 80046b8:	7821      	ldrb	r1, [r4, #0]
 80046ba:	2203      	movs	r2, #3
 80046bc:	4650      	mov	r0, sl
 80046be:	f7fb fd8f 	bl	80001e0 <memchr>
 80046c2:	b138      	cbz	r0, 80046d4 <_svfiprintf_r+0x150>
 80046c4:	9b04      	ldr	r3, [sp, #16]
 80046c6:	eba0 000a 	sub.w	r0, r0, sl
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	4082      	lsls	r2, r0
 80046ce:	4313      	orrs	r3, r2
 80046d0:	3401      	adds	r4, #1
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d8:	4825      	ldr	r0, [pc, #148]	; (8004770 <_svfiprintf_r+0x1ec>)
 80046da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046de:	2206      	movs	r2, #6
 80046e0:	f7fb fd7e 	bl	80001e0 <memchr>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d038      	beq.n	800475a <_svfiprintf_r+0x1d6>
 80046e8:	4b22      	ldr	r3, [pc, #136]	; (8004774 <_svfiprintf_r+0x1f0>)
 80046ea:	bb1b      	cbnz	r3, 8004734 <_svfiprintf_r+0x1b0>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	3307      	adds	r3, #7
 80046f0:	f023 0307 	bic.w	r3, r3, #7
 80046f4:	3308      	adds	r3, #8
 80046f6:	9303      	str	r3, [sp, #12]
 80046f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fa:	4433      	add	r3, r6
 80046fc:	9309      	str	r3, [sp, #36]	; 0x24
 80046fe:	e768      	b.n	80045d2 <_svfiprintf_r+0x4e>
 8004700:	fb0c 3202 	mla	r2, ip, r2, r3
 8004704:	460c      	mov	r4, r1
 8004706:	2001      	movs	r0, #1
 8004708:	e7a6      	b.n	8004658 <_svfiprintf_r+0xd4>
 800470a:	2300      	movs	r3, #0
 800470c:	3401      	adds	r4, #1
 800470e:	9305      	str	r3, [sp, #20]
 8004710:	4619      	mov	r1, r3
 8004712:	f04f 0c0a 	mov.w	ip, #10
 8004716:	4620      	mov	r0, r4
 8004718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800471c:	3a30      	subs	r2, #48	; 0x30
 800471e:	2a09      	cmp	r2, #9
 8004720:	d903      	bls.n	800472a <_svfiprintf_r+0x1a6>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0c6      	beq.n	80046b4 <_svfiprintf_r+0x130>
 8004726:	9105      	str	r1, [sp, #20]
 8004728:	e7c4      	b.n	80046b4 <_svfiprintf_r+0x130>
 800472a:	fb0c 2101 	mla	r1, ip, r1, r2
 800472e:	4604      	mov	r4, r0
 8004730:	2301      	movs	r3, #1
 8004732:	e7f0      	b.n	8004716 <_svfiprintf_r+0x192>
 8004734:	ab03      	add	r3, sp, #12
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	462a      	mov	r2, r5
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <_svfiprintf_r+0x1f4>)
 800473c:	a904      	add	r1, sp, #16
 800473e:	4638      	mov	r0, r7
 8004740:	f3af 8000 	nop.w
 8004744:	1c42      	adds	r2, r0, #1
 8004746:	4606      	mov	r6, r0
 8004748:	d1d6      	bne.n	80046f8 <_svfiprintf_r+0x174>
 800474a:	89ab      	ldrh	r3, [r5, #12]
 800474c:	065b      	lsls	r3, r3, #25
 800474e:	f53f af2d 	bmi.w	80045ac <_svfiprintf_r+0x28>
 8004752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004754:	b01d      	add	sp, #116	; 0x74
 8004756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475a:	ab03      	add	r3, sp, #12
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	462a      	mov	r2, r5
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <_svfiprintf_r+0x1f4>)
 8004762:	a904      	add	r1, sp, #16
 8004764:	4638      	mov	r0, r7
 8004766:	f000 f879 	bl	800485c <_printf_i>
 800476a:	e7eb      	b.n	8004744 <_svfiprintf_r+0x1c0>
 800476c:	08004be8 	.word	0x08004be8
 8004770:	08004bf2 	.word	0x08004bf2
 8004774:	00000000 	.word	0x00000000
 8004778:	080044d1 	.word	0x080044d1
 800477c:	08004bee 	.word	0x08004bee

08004780 <_printf_common>:
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	4616      	mov	r6, r2
 8004786:	4699      	mov	r9, r3
 8004788:	688a      	ldr	r2, [r1, #8]
 800478a:	690b      	ldr	r3, [r1, #16]
 800478c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004790:	4293      	cmp	r3, r2
 8004792:	bfb8      	it	lt
 8004794:	4613      	movlt	r3, r2
 8004796:	6033      	str	r3, [r6, #0]
 8004798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800479c:	4607      	mov	r7, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b10a      	cbz	r2, 80047a6 <_printf_common+0x26>
 80047a2:	3301      	adds	r3, #1
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	0699      	lsls	r1, r3, #26
 80047aa:	bf42      	ittt	mi
 80047ac:	6833      	ldrmi	r3, [r6, #0]
 80047ae:	3302      	addmi	r3, #2
 80047b0:	6033      	strmi	r3, [r6, #0]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d106      	bne.n	80047c8 <_printf_common+0x48>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	6832      	ldr	r2, [r6, #0]
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	42ab      	cmp	r3, r5
 80047c6:	dc26      	bgt.n	8004816 <_printf_common+0x96>
 80047c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047cc:	1e13      	subs	r3, r2, #0
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	bf18      	it	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	0692      	lsls	r2, r2, #26
 80047d6:	d42b      	bmi.n	8004830 <_printf_common+0xb0>
 80047d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047dc:	4649      	mov	r1, r9
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d01e      	beq.n	8004824 <_printf_common+0xa4>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	6922      	ldr	r2, [r4, #16]
 80047ea:	f003 0306 	and.w	r3, r3, #6
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	bf02      	ittt	eq
 80047f2:	68e5      	ldreq	r5, [r4, #12]
 80047f4:	6833      	ldreq	r3, [r6, #0]
 80047f6:	1aed      	subeq	r5, r5, r3
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	bf0c      	ite	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	2500      	movne	r5, #0
 8004802:	4293      	cmp	r3, r2
 8004804:	bfc4      	itt	gt
 8004806:	1a9b      	subgt	r3, r3, r2
 8004808:	18ed      	addgt	r5, r5, r3
 800480a:	2600      	movs	r6, #0
 800480c:	341a      	adds	r4, #26
 800480e:	42b5      	cmp	r5, r6
 8004810:	d11a      	bne.n	8004848 <_printf_common+0xc8>
 8004812:	2000      	movs	r0, #0
 8004814:	e008      	b.n	8004828 <_printf_common+0xa8>
 8004816:	2301      	movs	r3, #1
 8004818:	4652      	mov	r2, sl
 800481a:	4649      	mov	r1, r9
 800481c:	4638      	mov	r0, r7
 800481e:	47c0      	blx	r8
 8004820:	3001      	adds	r0, #1
 8004822:	d103      	bne.n	800482c <_printf_common+0xac>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482c:	3501      	adds	r5, #1
 800482e:	e7c6      	b.n	80047be <_printf_common+0x3e>
 8004830:	18e1      	adds	r1, r4, r3
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	2030      	movs	r0, #48	; 0x30
 8004836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800483a:	4422      	add	r2, r4
 800483c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004844:	3302      	adds	r3, #2
 8004846:	e7c7      	b.n	80047d8 <_printf_common+0x58>
 8004848:	2301      	movs	r3, #1
 800484a:	4622      	mov	r2, r4
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d0e6      	beq.n	8004824 <_printf_common+0xa4>
 8004856:	3601      	adds	r6, #1
 8004858:	e7d9      	b.n	800480e <_printf_common+0x8e>
	...

0800485c <_printf_i>:
 800485c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	7e0f      	ldrb	r7, [r1, #24]
 8004862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004864:	2f78      	cmp	r7, #120	; 0x78
 8004866:	4691      	mov	r9, r2
 8004868:	4680      	mov	r8, r0
 800486a:	460c      	mov	r4, r1
 800486c:	469a      	mov	sl, r3
 800486e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004872:	d807      	bhi.n	8004884 <_printf_i+0x28>
 8004874:	2f62      	cmp	r7, #98	; 0x62
 8004876:	d80a      	bhi.n	800488e <_printf_i+0x32>
 8004878:	2f00      	cmp	r7, #0
 800487a:	f000 80d4 	beq.w	8004a26 <_printf_i+0x1ca>
 800487e:	2f58      	cmp	r7, #88	; 0x58
 8004880:	f000 80c0 	beq.w	8004a04 <_printf_i+0x1a8>
 8004884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800488c:	e03a      	b.n	8004904 <_printf_i+0xa8>
 800488e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004892:	2b15      	cmp	r3, #21
 8004894:	d8f6      	bhi.n	8004884 <_printf_i+0x28>
 8004896:	a101      	add	r1, pc, #4	; (adr r1, 800489c <_printf_i+0x40>)
 8004898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004885 	.word	0x08004885
 80048a8:	08004885 	.word	0x08004885
 80048ac:	08004885 	.word	0x08004885
 80048b0:	08004885 	.word	0x08004885
 80048b4:	08004909 	.word	0x08004909
 80048b8:	08004885 	.word	0x08004885
 80048bc:	08004885 	.word	0x08004885
 80048c0:	08004885 	.word	0x08004885
 80048c4:	08004885 	.word	0x08004885
 80048c8:	08004a0d 	.word	0x08004a0d
 80048cc:	08004935 	.word	0x08004935
 80048d0:	080049c7 	.word	0x080049c7
 80048d4:	08004885 	.word	0x08004885
 80048d8:	08004885 	.word	0x08004885
 80048dc:	08004a2f 	.word	0x08004a2f
 80048e0:	08004885 	.word	0x08004885
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004885 	.word	0x08004885
 80048ec:	08004885 	.word	0x08004885
 80048f0:	080049cf 	.word	0x080049cf
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	602a      	str	r2, [r5, #0]
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004904:	2301      	movs	r3, #1
 8004906:	e09f      	b.n	8004a48 <_printf_i+0x1ec>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	0607      	lsls	r7, r0, #24
 800490e:	f103 0104 	add.w	r1, r3, #4
 8004912:	6029      	str	r1, [r5, #0]
 8004914:	d501      	bpl.n	800491a <_printf_i+0xbe>
 8004916:	681e      	ldr	r6, [r3, #0]
 8004918:	e003      	b.n	8004922 <_printf_i+0xc6>
 800491a:	0646      	lsls	r6, r0, #25
 800491c:	d5fb      	bpl.n	8004916 <_printf_i+0xba>
 800491e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004922:	2e00      	cmp	r6, #0
 8004924:	da03      	bge.n	800492e <_printf_i+0xd2>
 8004926:	232d      	movs	r3, #45	; 0x2d
 8004928:	4276      	negs	r6, r6
 800492a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800492e:	485a      	ldr	r0, [pc, #360]	; (8004a98 <_printf_i+0x23c>)
 8004930:	230a      	movs	r3, #10
 8004932:	e012      	b.n	800495a <_printf_i+0xfe>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	1d19      	adds	r1, r3, #4
 800493a:	6029      	str	r1, [r5, #0]
 800493c:	0605      	lsls	r5, r0, #24
 800493e:	d501      	bpl.n	8004944 <_printf_i+0xe8>
 8004940:	681e      	ldr	r6, [r3, #0]
 8004942:	e002      	b.n	800494a <_printf_i+0xee>
 8004944:	0641      	lsls	r1, r0, #25
 8004946:	d5fb      	bpl.n	8004940 <_printf_i+0xe4>
 8004948:	881e      	ldrh	r6, [r3, #0]
 800494a:	4853      	ldr	r0, [pc, #332]	; (8004a98 <_printf_i+0x23c>)
 800494c:	2f6f      	cmp	r7, #111	; 0x6f
 800494e:	bf0c      	ite	eq
 8004950:	2308      	moveq	r3, #8
 8004952:	230a      	movne	r3, #10
 8004954:	2100      	movs	r1, #0
 8004956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800495a:	6865      	ldr	r5, [r4, #4]
 800495c:	60a5      	str	r5, [r4, #8]
 800495e:	2d00      	cmp	r5, #0
 8004960:	bfa2      	ittt	ge
 8004962:	6821      	ldrge	r1, [r4, #0]
 8004964:	f021 0104 	bicge.w	r1, r1, #4
 8004968:	6021      	strge	r1, [r4, #0]
 800496a:	b90e      	cbnz	r6, 8004970 <_printf_i+0x114>
 800496c:	2d00      	cmp	r5, #0
 800496e:	d04b      	beq.n	8004a08 <_printf_i+0x1ac>
 8004970:	4615      	mov	r5, r2
 8004972:	fbb6 f1f3 	udiv	r1, r6, r3
 8004976:	fb03 6711 	mls	r7, r3, r1, r6
 800497a:	5dc7      	ldrb	r7, [r0, r7]
 800497c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004980:	4637      	mov	r7, r6
 8004982:	42bb      	cmp	r3, r7
 8004984:	460e      	mov	r6, r1
 8004986:	d9f4      	bls.n	8004972 <_printf_i+0x116>
 8004988:	2b08      	cmp	r3, #8
 800498a:	d10b      	bne.n	80049a4 <_printf_i+0x148>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	07de      	lsls	r6, r3, #31
 8004990:	d508      	bpl.n	80049a4 <_printf_i+0x148>
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	6861      	ldr	r1, [r4, #4]
 8004996:	4299      	cmp	r1, r3
 8004998:	bfde      	ittt	le
 800499a:	2330      	movle	r3, #48	; 0x30
 800499c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049a4:	1b52      	subs	r2, r2, r5
 80049a6:	6122      	str	r2, [r4, #16]
 80049a8:	f8cd a000 	str.w	sl, [sp]
 80049ac:	464b      	mov	r3, r9
 80049ae:	aa03      	add	r2, sp, #12
 80049b0:	4621      	mov	r1, r4
 80049b2:	4640      	mov	r0, r8
 80049b4:	f7ff fee4 	bl	8004780 <_printf_common>
 80049b8:	3001      	adds	r0, #1
 80049ba:	d14a      	bne.n	8004a52 <_printf_i+0x1f6>
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	b004      	add	sp, #16
 80049c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f043 0320 	orr.w	r3, r3, #32
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	4833      	ldr	r0, [pc, #204]	; (8004a9c <_printf_i+0x240>)
 80049d0:	2778      	movs	r7, #120	; 0x78
 80049d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	6829      	ldr	r1, [r5, #0]
 80049da:	061f      	lsls	r7, r3, #24
 80049dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80049e0:	d402      	bmi.n	80049e8 <_printf_i+0x18c>
 80049e2:	065f      	lsls	r7, r3, #25
 80049e4:	bf48      	it	mi
 80049e6:	b2b6      	uxthmi	r6, r6
 80049e8:	07df      	lsls	r7, r3, #31
 80049ea:	bf48      	it	mi
 80049ec:	f043 0320 	orrmi.w	r3, r3, #32
 80049f0:	6029      	str	r1, [r5, #0]
 80049f2:	bf48      	it	mi
 80049f4:	6023      	strmi	r3, [r4, #0]
 80049f6:	b91e      	cbnz	r6, 8004a00 <_printf_i+0x1a4>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f023 0320 	bic.w	r3, r3, #32
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	2310      	movs	r3, #16
 8004a02:	e7a7      	b.n	8004954 <_printf_i+0xf8>
 8004a04:	4824      	ldr	r0, [pc, #144]	; (8004a98 <_printf_i+0x23c>)
 8004a06:	e7e4      	b.n	80049d2 <_printf_i+0x176>
 8004a08:	4615      	mov	r5, r2
 8004a0a:	e7bd      	b.n	8004988 <_printf_i+0x12c>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	6826      	ldr	r6, [r4, #0]
 8004a10:	6961      	ldr	r1, [r4, #20]
 8004a12:	1d18      	adds	r0, r3, #4
 8004a14:	6028      	str	r0, [r5, #0]
 8004a16:	0635      	lsls	r5, r6, #24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	d501      	bpl.n	8004a20 <_printf_i+0x1c4>
 8004a1c:	6019      	str	r1, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <_printf_i+0x1ca>
 8004a20:	0670      	lsls	r0, r6, #25
 8004a22:	d5fb      	bpl.n	8004a1c <_printf_i+0x1c0>
 8004a24:	8019      	strh	r1, [r3, #0]
 8004a26:	2300      	movs	r3, #0
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	4615      	mov	r5, r2
 8004a2c:	e7bc      	b.n	80049a8 <_printf_i+0x14c>
 8004a2e:	682b      	ldr	r3, [r5, #0]
 8004a30:	1d1a      	adds	r2, r3, #4
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	681d      	ldr	r5, [r3, #0]
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f7fb fbd0 	bl	80001e0 <memchr>
 8004a40:	b108      	cbz	r0, 8004a46 <_printf_i+0x1ea>
 8004a42:	1b40      	subs	r0, r0, r5
 8004a44:	6060      	str	r0, [r4, #4]
 8004a46:	6863      	ldr	r3, [r4, #4]
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a50:	e7aa      	b.n	80049a8 <_printf_i+0x14c>
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	462a      	mov	r2, r5
 8004a56:	4649      	mov	r1, r9
 8004a58:	4640      	mov	r0, r8
 8004a5a:	47d0      	blx	sl
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d0ad      	beq.n	80049bc <_printf_i+0x160>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	079b      	lsls	r3, r3, #30
 8004a64:	d413      	bmi.n	8004a8e <_printf_i+0x232>
 8004a66:	68e0      	ldr	r0, [r4, #12]
 8004a68:	9b03      	ldr	r3, [sp, #12]
 8004a6a:	4298      	cmp	r0, r3
 8004a6c:	bfb8      	it	lt
 8004a6e:	4618      	movlt	r0, r3
 8004a70:	e7a6      	b.n	80049c0 <_printf_i+0x164>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4632      	mov	r2, r6
 8004a76:	4649      	mov	r1, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	47d0      	blx	sl
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d09d      	beq.n	80049bc <_printf_i+0x160>
 8004a80:	3501      	adds	r5, #1
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	9903      	ldr	r1, [sp, #12]
 8004a86:	1a5b      	subs	r3, r3, r1
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	dcf2      	bgt.n	8004a72 <_printf_i+0x216>
 8004a8c:	e7eb      	b.n	8004a66 <_printf_i+0x20a>
 8004a8e:	2500      	movs	r5, #0
 8004a90:	f104 0619 	add.w	r6, r4, #25
 8004a94:	e7f5      	b.n	8004a82 <_printf_i+0x226>
 8004a96:	bf00      	nop
 8004a98:	08004bf9 	.word	0x08004bf9
 8004a9c:	08004c0a 	.word	0x08004c0a

08004aa0 <memmove>:
 8004aa0:	4288      	cmp	r0, r1
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	eb01 0402 	add.w	r4, r1, r2
 8004aa8:	d902      	bls.n	8004ab0 <memmove+0x10>
 8004aaa:	4284      	cmp	r4, r0
 8004aac:	4623      	mov	r3, r4
 8004aae:	d807      	bhi.n	8004ac0 <memmove+0x20>
 8004ab0:	1e43      	subs	r3, r0, #1
 8004ab2:	42a1      	cmp	r1, r4
 8004ab4:	d008      	beq.n	8004ac8 <memmove+0x28>
 8004ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004abe:	e7f8      	b.n	8004ab2 <memmove+0x12>
 8004ac0:	4402      	add	r2, r0
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	428a      	cmp	r2, r1
 8004ac6:	d100      	bne.n	8004aca <memmove+0x2a>
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ad2:	e7f7      	b.n	8004ac4 <memmove+0x24>

08004ad4 <_sbrk_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d06      	ldr	r5, [pc, #24]	; (8004af0 <_sbrk_r+0x1c>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	602b      	str	r3, [r5, #0]
 8004ae0:	f7fc f80a 	bl	8000af8 <_sbrk>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_sbrk_r+0x1a>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_sbrk_r+0x1a>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	200002a8 	.word	0x200002a8

08004af4 <memcpy>:
 8004af4:	440a      	add	r2, r1
 8004af6:	4291      	cmp	r1, r2
 8004af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004afc:	d100      	bne.n	8004b00 <memcpy+0xc>
 8004afe:	4770      	bx	lr
 8004b00:	b510      	push	{r4, lr}
 8004b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	d1f9      	bne.n	8004b02 <memcpy+0xe>
 8004b0e:	bd10      	pop	{r4, pc}

08004b10 <_realloc_r>:
 8004b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b14:	4680      	mov	r8, r0
 8004b16:	4614      	mov	r4, r2
 8004b18:	460e      	mov	r6, r1
 8004b1a:	b921      	cbnz	r1, 8004b26 <_realloc_r+0x16>
 8004b1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b20:	4611      	mov	r1, r2
 8004b22:	f7ff bc49 	b.w	80043b8 <_malloc_r>
 8004b26:	b92a      	cbnz	r2, 8004b34 <_realloc_r+0x24>
 8004b28:	f7ff fbda 	bl	80042e0 <_free_r>
 8004b2c:	4625      	mov	r5, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b34:	f000 f81b 	bl	8004b6e <_malloc_usable_size_r>
 8004b38:	4284      	cmp	r4, r0
 8004b3a:	4607      	mov	r7, r0
 8004b3c:	d802      	bhi.n	8004b44 <_realloc_r+0x34>
 8004b3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b42:	d812      	bhi.n	8004b6a <_realloc_r+0x5a>
 8004b44:	4621      	mov	r1, r4
 8004b46:	4640      	mov	r0, r8
 8004b48:	f7ff fc36 	bl	80043b8 <_malloc_r>
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d0ed      	beq.n	8004b2e <_realloc_r+0x1e>
 8004b52:	42bc      	cmp	r4, r7
 8004b54:	4622      	mov	r2, r4
 8004b56:	4631      	mov	r1, r6
 8004b58:	bf28      	it	cs
 8004b5a:	463a      	movcs	r2, r7
 8004b5c:	f7ff ffca 	bl	8004af4 <memcpy>
 8004b60:	4631      	mov	r1, r6
 8004b62:	4640      	mov	r0, r8
 8004b64:	f7ff fbbc 	bl	80042e0 <_free_r>
 8004b68:	e7e1      	b.n	8004b2e <_realloc_r+0x1e>
 8004b6a:	4635      	mov	r5, r6
 8004b6c:	e7df      	b.n	8004b2e <_realloc_r+0x1e>

08004b6e <_malloc_usable_size_r>:
 8004b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b72:	1f18      	subs	r0, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bfbc      	itt	lt
 8004b78:	580b      	ldrlt	r3, [r1, r0]
 8004b7a:	18c0      	addlt	r0, r0, r3
 8004b7c:	4770      	bx	lr
	...

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
