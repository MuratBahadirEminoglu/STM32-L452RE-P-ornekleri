
HAL_GPIO_ESP-01wifiledblink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e0  080047e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e8  080047e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000005c  0800484c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  0800484c  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a499  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181b  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b6  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219e3  00000000  00000000  0002cd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae4f  00000000  00000000  0004e6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd529  00000000  00000000  00059538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000285c  00000000  00000000  00126a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001292c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004288 	.word	0x08004288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004288 	.word	0x08004288

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	f5ad 6de7 	sub.w	sp, sp, #1848	; 0x738
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fe5a 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 fbb4 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fc64 	bl	8000e68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 fc32 	bl	8000e08 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 fc00 	bl	8000da8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rxBuffer[512] = {0};
 80005a8:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80005ac:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	3304      	adds	r3, #4
 80005b6:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f9bb 	bl	8003938 <memset>
   uint8_t ATisOK;
   int channel;
   int onoff;
   int led = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
   char ATcommand[64];
   char ATcommandB[1024];
   char ATcommandN[100];
   char ATcommandF[100];
   char ATcommandT[16];
   sprintf(ATcommandB,"<!DOCTYPE html><html>\n<head>\n\
 80005c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80005cc:	49db      	ldr	r1, [pc, #876]	; (800093c <main+0x3b0>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f992 	bl	80038f8 <siprintf>
   .button-on {background-color: #008000;}\n.button-on:active\
   {background-color: #008000;}\n.button-off {background-color: #808080;}\n\
   .button-off:active {background-color: #808080;}\n\
   p {font-size: 14px;color: #808080;margin-bottom: 20px;}\n\
   </style>\n</head>\n<body>\n<h1>STM32 - ESP8266</h1>");
   sprintf(ATcommandN,"<p>Light is currently on\
 80005d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005d8:	49d9      	ldr	r1, [pc, #868]	; (8000940 <main+0x3b4>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f98c 	bl	80038f8 <siprintf>
   </p><a class=\"button button-off\" href=\"/lightoff\">OFF</a>");
   sprintf(ATcommandF,"<p>Light is currently off\
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	49d7      	ldr	r1, [pc, #860]	; (8000944 <main+0x3b8>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f986 	bl	80038f8 <siprintf>
   </p><a class=\"button button-on\" href=\"/lighton\">ON</a>");
   sprintf(ATcommandT,"</body></html>");
 80005ec:	463b      	mov	r3, r7
 80005ee:	49d6      	ldr	r1, [pc, #856]	; (8000948 <main+0x3bc>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 f981 	bl	80038f8 <siprintf>
   int countB = strlen(ATcommandB);
 80005f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf0 	bl	80001e0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
   int countN = strlen(ATcommandN);
 8000606:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fde8 	bl	80001e0 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	f8c7 3720 	str.w	r3, [r7, #1824]	; 0x720
   int countF = strlen(ATcommandF);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fde0 	bl	80001e0 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
   int countT = strlen(ATcommandT);
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdd9 	bl	80001e0 <strlen>
 800062e:	4603      	mov	r3, r0
 8000630:	f8c7 3718 	str.w	r3, [r7, #1816]	; 0x718

   sprintf(ATcommand,"AT+RST\r\n");
 8000634:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000638:	49c4      	ldr	r1, [pc, #784]	; (800094c <main+0x3c0>)
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f95c 	bl	80038f8 <siprintf>
   memset(rxBuffer,0,sizeof(rxBuffer));
 8000640:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f974 	bl	8003938 <memset>
   HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000650:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdc3 	bl	80001e0 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	48ba      	ldr	r0, [pc, #744]	; (8000950 <main+0x3c4>)
 8000668:	f002 fb50 	bl	8002d0c <HAL_UART_Transmit>
   HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 800066c:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000676:	48b6      	ldr	r0, [pc, #728]	; (8000950 <main+0x3c4>)
 8000678:	f002 fbd2 	bl	8002e20 <HAL_UART_Receive>
   HAL_Delay(500);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f000 fe60 	bl	8001344 <HAL_Delay>

   ATisOK = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
   while(!ATisOK){
 800068a:	e034      	b.n	80006f6 <main+0x16a>
     sprintf(ATcommand,"AT+CWMODE_CUR=2\r\n");
 800068c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000690:	49b0      	ldr	r1, [pc, #704]	; (8000954 <main+0x3c8>)
 8000692:	4618      	mov	r0, r3
 8000694:	f003 f930 	bl	80038f8 <siprintf>
       memset(rxBuffer,0,sizeof(rxBuffer));
 8000698:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 f948 	bl	8003938 <memset>
       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80006a8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd97 	bl	80001e0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	48a4      	ldr	r0, [pc, #656]	; (8000950 <main+0x3c4>)
 80006c0:	f002 fb24 	bl	8002d0c <HAL_UART_Transmit>
       HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80006c4:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	489f      	ldr	r0, [pc, #636]	; (8000950 <main+0x3c4>)
 80006d2:	f002 fba5 	bl	8002e20 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 80006d6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80006da:	499f      	ldr	r1, [pc, #636]	; (8000958 <main+0x3cc>)
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f940 	bl	8003962 <strstr>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <main+0x162>
       ATisOK = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
     }
     HAL_Delay(500);
 80006ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f2:	f000 fe27 	bl	8001344 <HAL_Delay>
   while(!ATisOK){
 80006f6:	f897 3737 	ldrb.w	r3, [r7, #1847]	; 0x737
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0c6      	beq.n	800068c <main+0x100>
   }

   ATisOK = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
   while(!ATisOK){
 8000704:	e034      	b.n	8000770 <main+0x1e4>
     sprintf(ATcommand,"AT+CWSAP_CUR=\"STM32\",\"12345678\",1,3,4,0\r\n");
 8000706:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800070a:	4994      	ldr	r1, [pc, #592]	; (800095c <main+0x3d0>)
 800070c:	4618      	mov	r0, r3
 800070e:	f003 f8f3 	bl	80038f8 <siprintf>
       memset(rxBuffer,0,sizeof(rxBuffer));
 8000712:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f003 f90b 	bl	8003938 <memset>
       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000722:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd5a 	bl	80001e0 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000738:	4885      	ldr	r0, [pc, #532]	; (8000950 <main+0x3c4>)
 800073a:	f002 fae7 	bl	8002d0c <HAL_UART_Transmit>
       HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 800073e:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	4881      	ldr	r0, [pc, #516]	; (8000950 <main+0x3c4>)
 800074c:	f002 fb68 	bl	8002e20 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 8000750:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000754:	4980      	ldr	r1, [pc, #512]	; (8000958 <main+0x3cc>)
 8000756:	4618      	mov	r0, r3
 8000758:	f003 f903 	bl	8003962 <strstr>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <main+0x1dc>
       ATisOK = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
     }
     HAL_Delay(500);
 8000768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076c:	f000 fdea 	bl	8001344 <HAL_Delay>
   while(!ATisOK){
 8000770:	f897 3737 	ldrb.w	r3, [r7, #1847]	; 0x737
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0c6      	beq.n	8000706 <main+0x17a>
   }

   ATisOK = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
   while(!ATisOK){
 800077e:	e034      	b.n	80007ea <main+0x25e>
     sprintf(ATcommand,"AT+CIPAP_CUR=\"192.168.51.1\"\r\n");
 8000780:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000784:	4976      	ldr	r1, [pc, #472]	; (8000960 <main+0x3d4>)
 8000786:	4618      	mov	r0, r3
 8000788:	f003 f8b6 	bl	80038f8 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 800078c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f8ce 	bl	8003938 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800079c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd1d 	bl	80001e0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	4867      	ldr	r0, [pc, #412]	; (8000950 <main+0x3c4>)
 80007b4:	f002 faaa 	bl	8002d0c <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80007b8:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	4862      	ldr	r0, [pc, #392]	; (8000950 <main+0x3c4>)
 80007c6:	f002 fb2b 	bl	8002e20 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 80007ca:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80007ce:	4962      	ldr	r1, [pc, #392]	; (8000958 <main+0x3cc>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 f8c6 	bl	8003962 <strstr>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <main+0x256>
       ATisOK = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
     }
     HAL_Delay(500);
 80007e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e6:	f000 fdad 	bl	8001344 <HAL_Delay>
   while(!ATisOK){
 80007ea:	f897 3737 	ldrb.w	r3, [r7, #1847]	; 0x737
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0c6      	beq.n	8000780 <main+0x1f4>
   }

   ATisOK = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
   while(!ATisOK){
 80007f8:	e034      	b.n	8000864 <main+0x2d8>
     sprintf(ATcommand,"AT+CIPMUX=1\r\n");
 80007fa:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80007fe:	4959      	ldr	r1, [pc, #356]	; (8000964 <main+0x3d8>)
 8000800:	4618      	mov	r0, r3
 8000802:	f003 f879 	bl	80038f8 <siprintf>
       memset(rxBuffer,0,sizeof(rxBuffer));
 8000806:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800080a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f003 f891 	bl	8003938 <memset>
       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000816:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fce0 	bl	80001e0 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	4848      	ldr	r0, [pc, #288]	; (8000950 <main+0x3c4>)
 800082e:	f002 fa6d 	bl	8002d0c <HAL_UART_Transmit>
       HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000832:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083e:	4844      	ldr	r0, [pc, #272]	; (8000950 <main+0x3c4>)
 8000840:	f002 faee 	bl	8002e20 <HAL_UART_Receive>
       if(strstr((char *)rxBuffer,"OK")){
 8000844:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000848:	4943      	ldr	r1, [pc, #268]	; (8000958 <main+0x3cc>)
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f889 	bl	8003962 <strstr>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <main+0x2d0>
         ATisOK = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
       }
       HAL_Delay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f000 fd70 	bl	8001344 <HAL_Delay>
   while(!ATisOK){
 8000864:	f897 3737 	ldrb.w	r3, [r7, #1847]	; 0x737
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0c6      	beq.n	80007fa <main+0x26e>
   }

   ATisOK = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
   while(!ATisOK){
 8000872:	e034      	b.n	80008de <main+0x352>
     sprintf(ATcommand,"AT+CIPSERVER=1,80\r\n");
 8000874:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000878:	493b      	ldr	r1, [pc, #236]	; (8000968 <main+0x3dc>)
 800087a:	4618      	mov	r0, r3
 800087c:	f003 f83c 	bl	80038f8 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 8000880:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 f854 	bl	8003938 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000890:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fca3 	bl	80001e0 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80008a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a6:	482a      	ldr	r0, [pc, #168]	; (8000950 <main+0x3c4>)
 80008a8:	f002 fa30 	bl	8002d0c <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80008ac:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80008b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b8:	4825      	ldr	r0, [pc, #148]	; (8000950 <main+0x3c4>)
 80008ba:	f002 fab1 	bl	8002e20 <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 80008be:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80008c2:	4925      	ldr	r1, [pc, #148]	; (8000958 <main+0x3cc>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f84c 	bl	8003962 <strstr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <main+0x34a>
         ATisOK = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	f887 3737 	strb.w	r3, [r7, #1847]	; 0x737
     }
     HAL_Delay(500);
 80008d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008da:	f000 fd33 	bl	8001344 <HAL_Delay>
   while(!ATisOK){
 80008de:	f897 3737 	ldrb.w	r3, [r7, #1847]	; 0x737
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0c6      	beq.n	8000874 <main+0x2e8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  memset(rxBuffer,0,sizeof(rxBuffer));
 80008e6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 f821 	bl	8003938 <memset>
	     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80008f6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000902:	4813      	ldr	r0, [pc, #76]	; (8000950 <main+0x3c4>)
 8000904:	f002 fa8c 	bl	8002e20 <HAL_UART_Receive>
	     if(strstr((char *)rxBuffer,"+IPD,0")) channel = 0;
 8000908:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800090c:	4917      	ldr	r1, [pc, #92]	; (800096c <main+0x3e0>)
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f827 	bl	8003962 <strstr>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <main+0x396>
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 8000920:	e079      	b.n	8000a16 <main+0x48a>
	     else if(strstr((char *)rxBuffer,"+IPD,1")) channel = 1;
 8000922:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000926:	4912      	ldr	r1, [pc, #72]	; (8000970 <main+0x3e4>)
 8000928:	4618      	mov	r0, r3
 800092a:	f003 f81a 	bl	8003962 <strstr>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01f      	beq.n	8000974 <main+0x3e8>
 8000934:	2301      	movs	r3, #1
 8000936:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 800093a:	e06c      	b.n	8000a16 <main+0x48a>
 800093c:	080042a0 	.word	0x080042a0
 8000940:	0800458c 	.word	0x0800458c
 8000944:	080045e4 	.word	0x080045e4
 8000948:	08004638 	.word	0x08004638
 800094c:	08004648 	.word	0x08004648
 8000950:	20000078 	.word	0x20000078
 8000954:	08004654 	.word	0x08004654
 8000958:	08004668 	.word	0x08004668
 800095c:	0800466c 	.word	0x0800466c
 8000960:	08004698 	.word	0x08004698
 8000964:	080046b8 	.word	0x080046b8
 8000968:	080046c8 	.word	0x080046c8
 800096c:	080046dc 	.word	0x080046dc
 8000970:	080046e4 	.word	0x080046e4
	     else if(strstr((char *)rxBuffer,"+IPD,2")) channel = 2;
 8000974:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000978:	49d6      	ldr	r1, [pc, #856]	; (8000cd4 <main+0x748>)
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fff1 	bl	8003962 <strstr>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <main+0x402>
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 800098c:	e043      	b.n	8000a16 <main+0x48a>
	     else if(strstr((char *)rxBuffer,"+IPD,3")) channel = 3;
 800098e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000992:	49d1      	ldr	r1, [pc, #836]	; (8000cd8 <main+0x74c>)
 8000994:	4618      	mov	r0, r3
 8000996:	f002 ffe4 	bl	8003962 <strstr>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <main+0x41c>
 80009a0:	2303      	movs	r3, #3
 80009a2:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80009a6:	e036      	b.n	8000a16 <main+0x48a>
	     else if(strstr((char *)rxBuffer,"+IPD,4")) channel = 4;
 80009a8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80009ac:	49cb      	ldr	r1, [pc, #812]	; (8000cdc <main+0x750>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 ffd7 	bl	8003962 <strstr>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <main+0x436>
 80009ba:	2304      	movs	r3, #4
 80009bc:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80009c0:	e029      	b.n	8000a16 <main+0x48a>
	     else if(strstr((char *)rxBuffer,"+IPD,5")) channel = 5;
 80009c2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80009c6:	49c6      	ldr	r1, [pc, #792]	; (8000ce0 <main+0x754>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 ffca 	bl	8003962 <strstr>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <main+0x450>
 80009d4:	2305      	movs	r3, #5
 80009d6:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80009da:	e01c      	b.n	8000a16 <main+0x48a>
	     else if(strstr((char *)rxBuffer,"+IPD,6")) channel = 6;
 80009dc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80009e0:	49c0      	ldr	r1, [pc, #768]	; (8000ce4 <main+0x758>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 ffbd 	bl	8003962 <strstr>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <main+0x46a>
 80009ee:	2306      	movs	r3, #6
 80009f0:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80009f4:	e00f      	b.n	8000a16 <main+0x48a>
	     else if(strstr((char *)rxBuffer,"+IPD,7")) channel = 7;
 80009f6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80009fa:	49bb      	ldr	r1, [pc, #748]	; (8000ce8 <main+0x75c>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 ffb0 	bl	8003962 <strstr>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <main+0x484>
 8000a08:	2307      	movs	r3, #7
 8000a0a:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 8000a0e:	e002      	b.n	8000a16 <main+0x48a>
	     else channel = 100;
 8000a10:	2364      	movs	r3, #100	; 0x64
 8000a12:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730

	     if(strstr((char *)rxBuffer,"GET /lighton")) onoff = 0;
 8000a16:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000a1a:	49b4      	ldr	r1, [pc, #720]	; (8000cec <main+0x760>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 ffa0 	bl	8003962 <strstr>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <main+0x4a4>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8000a2e:	e010      	b.n	8000a52 <main+0x4c6>
	     else if(strstr((char *)rxBuffer,"GET /lightoff")) onoff = 1;
 8000a30:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000a34:	49ae      	ldr	r1, [pc, #696]	; (8000cf0 <main+0x764>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 ff93 	bl	8003962 <strstr>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <main+0x4be>
 8000a42:	2301      	movs	r3, #1
 8000a44:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8000a48:	e003      	b.n	8000a52 <main+0x4c6>
	     else onoff = led;
 8000a4a:	f8d7 3728 	ldr.w	r3, [r7, #1832]	; 0x728
 8000a4e:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c

	     if(channel<8 && onoff == 1)
 8000a52:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	f300 809b 	bgt.w	8000b92 <main+0x606>
 8000a5c:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	f040 8096 	bne.w	8000b92 <main+0x606>
	     {
	       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	48a1      	ldr	r0, [pc, #644]	; (8000cf4 <main+0x768>)
 8000a6e:	f000 feed 	bl	800184c <HAL_GPIO_WritePin>
	       led = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
	       sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countF+countT);
 8000a78:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 8000a7c:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8000a80:	441a      	add	r2, r3
 8000a82:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8000a86:	4413      	add	r3, r2
 8000a88:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 8000a8c:	f8d7 2730 	ldr.w	r2, [r7, #1840]	; 0x730
 8000a90:	4999      	ldr	r1, [pc, #612]	; (8000cf8 <main+0x76c>)
 8000a92:	f002 ff31 	bl	80038f8 <siprintf>
	       memset(rxBuffer,0,sizeof(rxBuffer));
 8000a96:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 ff49 	bl	8003938 <memset>
	       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000aa6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fb98 	bl	80001e0 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	488f      	ldr	r0, [pc, #572]	; (8000cfc <main+0x770>)
 8000abe:	f002 f925 	bl	8002d0c <HAL_UART_Transmit>
	       HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000ac2:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000ac6:	2364      	movs	r3, #100	; 0x64
 8000ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000acc:	488b      	ldr	r0, [pc, #556]	; (8000cfc <main+0x770>)
 8000ace:	f002 f9a7 	bl	8002e20 <HAL_UART_Receive>
	       if(strstr((char *)rxBuffer,">"))
 8000ad2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000ad6:	213e      	movs	r1, #62	; 0x3e
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 ff35 	bl	8003948 <strchr>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d02c      	beq.n	8000b3e <main+0x5b2>
	       {
	         memset(rxBuffer,0,sizeof(rxBuffer));
 8000ae4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 ff22 	bl	8003938 <memset>
	           HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 8000af4:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	487e      	ldr	r0, [pc, #504]	; (8000cfc <main+0x770>)
 8000b04:	f002 f902 	bl	8002d0c <HAL_UART_Transmit>
	           HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandF,countF,1000);
 8000b08:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f107 0110 	add.w	r1, r7, #16
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	4879      	ldr	r0, [pc, #484]	; (8000cfc <main+0x770>)
 8000b18:	f002 f8f8 	bl	8002d0c <HAL_UART_Transmit>
	           HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8000b1c:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4639      	mov	r1, r7
 8000b24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b28:	4874      	ldr	r0, [pc, #464]	; (8000cfc <main+0x770>)
 8000b2a:	f002 f8ef 	bl	8002d0c <HAL_UART_Transmit>
	          HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000b2e:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	4870      	ldr	r0, [pc, #448]	; (8000cfc <main+0x770>)
 8000b3a:	f002 f971 	bl	8002e20 <HAL_UART_Receive>
	       }
	       sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 8000b3e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000b42:	f8d7 2730 	ldr.w	r2, [r7, #1840]	; 0x730
 8000b46:	496e      	ldr	r1, [pc, #440]	; (8000d00 <main+0x774>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fed5 	bl	80038f8 <siprintf>
	       memset(rxBuffer,0,sizeof(rxBuffer));
 8000b4e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 feed 	bl	8003938 <memset>
	       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000b5e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fb3c 	bl	80001e0 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b74:	4861      	ldr	r0, [pc, #388]	; (8000cfc <main+0x770>)
 8000b76:	f002 f8c9 	bl	8002d0c <HAL_UART_Transmit>
	       HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000b7a:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	485d      	ldr	r0, [pc, #372]	; (8000cfc <main+0x770>)
 8000b86:	f002 f94b 	bl	8002e20 <HAL_UART_Receive>
	       channel=100;
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 8000b90:	e09e      	b.n	8000cd0 <main+0x744>
	     }
	     else if(channel<8 && onoff == 0)
 8000b92:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000b96:	2b07      	cmp	r3, #7
 8000b98:	f73f aea5 	bgt.w	80008e6 <main+0x35a>
 8000b9c:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f47f aea0 	bne.w	80008e6 <main+0x35a>
	     {
	       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	4851      	ldr	r0, [pc, #324]	; (8000cf4 <main+0x768>)
 8000bae:	f000 fe4d 	bl	800184c <HAL_GPIO_WritePin>
	       led = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 3728 	str.w	r3, [r7, #1832]	; 0x728
	       sprintf(ATcommand,"AT+CIPSEND=%d,%d\r\n",channel,countB+countN+countT);
 8000bb8:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
 8000bbc:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8000bc0:	441a      	add	r2, r3
 8000bc2:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8000bc6:	4413      	add	r3, r2
 8000bc8:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 8000bcc:	f8d7 2730 	ldr.w	r2, [r7, #1840]	; 0x730
 8000bd0:	4949      	ldr	r1, [pc, #292]	; (8000cf8 <main+0x76c>)
 8000bd2:	f002 fe91 	bl	80038f8 <siprintf>
	       memset(rxBuffer,0,sizeof(rxBuffer));
 8000bd6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fea9 	bl	8003938 <memset>
	       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000be6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff faf8 	bl	80001e0 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	483f      	ldr	r0, [pc, #252]	; (8000cfc <main+0x770>)
 8000bfe:	f002 f885 	bl	8002d0c <HAL_UART_Transmit>
	       HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000c02:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	483b      	ldr	r0, [pc, #236]	; (8000cfc <main+0x770>)
 8000c0e:	f002 f907 	bl	8002e20 <HAL_UART_Receive>
	       if(strstr((char *)rxBuffer,">"))
 8000c12:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000c16:	213e      	movs	r1, #62	; 0x3e
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fe95 	bl	8003948 <strchr>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02c      	beq.n	8000c7e <main+0x6f2>
	       {
	         memset(rxBuffer,0,sizeof(rxBuffer));
 8000c24:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fe82 	bl	8003938 <memset>
	           HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandB,countB,1000);
 8000c34:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <main+0x770>)
 8000c44:	f002 f862 	bl	8002d0c <HAL_UART_Transmit>
	           HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandN,countN,1000);
 8000c48:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	4829      	ldr	r0, [pc, #164]	; (8000cfc <main+0x770>)
 8000c58:	f002 f858 	bl	8002d0c <HAL_UART_Transmit>
	           HAL_UART_Transmit(&huart1,(uint8_t *)ATcommandT,countT,1000);
 8000c5c:	f8d7 3718 	ldr.w	r3, [r7, #1816]	; 0x718
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4639      	mov	r1, r7
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	4824      	ldr	r0, [pc, #144]	; (8000cfc <main+0x770>)
 8000c6a:	f002 f84f 	bl	8002d0c <HAL_UART_Transmit>
	           HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000c6e:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	4820      	ldr	r0, [pc, #128]	; (8000cfc <main+0x770>)
 8000c7a:	f002 f8d1 	bl	8002e20 <HAL_UART_Receive>
	       }
	       sprintf(ATcommand,"AT+CIPCLOSE=%d\r\n",channel);
 8000c7e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000c82:	f8d7 2730 	ldr.w	r2, [r7, #1840]	; 0x730
 8000c86:	491e      	ldr	r1, [pc, #120]	; (8000d00 <main+0x774>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fe35 	bl	80038f8 <siprintf>
	       memset(rxBuffer,0,sizeof(rxBuffer));
 8000c8e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 fe4d 	bl	8003938 <memset>
	       HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000c9e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fa9c 	bl	80001e0 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8000cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <main+0x770>)
 8000cb6:	f002 f829 	bl	8002d0c <HAL_UART_Transmit>
	       HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 8000cba:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <main+0x770>)
 8000cc6:	f002 f8ab 	bl	8002e20 <HAL_UART_Receive>
	       channel=100;
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
	  memset(rxBuffer,0,sizeof(rxBuffer));
 8000cd0:	e609      	b.n	80008e6 <main+0x35a>
 8000cd2:	bf00      	nop
 8000cd4:	080046ec 	.word	0x080046ec
 8000cd8:	080046f4 	.word	0x080046f4
 8000cdc:	080046fc 	.word	0x080046fc
 8000ce0:	08004704 	.word	0x08004704
 8000ce4:	0800470c 	.word	0x0800470c
 8000ce8:	08004714 	.word	0x08004714
 8000cec:	0800471c 	.word	0x0800471c
 8000cf0:	0800472c 	.word	0x0800472c
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	0800473c 	.word	0x0800473c
 8000cfc:	20000078 	.word	0x20000078
 8000d00:	08004750 	.word	0x08004750

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b096      	sub	sp, #88	; 0x58
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2244      	movs	r2, #68	; 0x44
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fe10 	bl	8003938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d2a:	f000 fdb5 	bl	8001898 <HAL_PWREx_ControlVoltageScaling>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d34:	f000 f922 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d42:	2340      	movs	r3, #64	; 0x40
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d52:	230a      	movs	r3, #10
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d56:	2307      	movs	r3, #7
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fdec 	bl	8001944 <HAL_RCC_OscConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d72:	f000 f903 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	230f      	movs	r3, #15
 8000d78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 f9ec 	bl	800216c <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d9a:	f000 f8ef 	bl	8000f7c <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3758      	adds	r7, #88	; 0x58
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MX_USART1_UART_Init+0x5c>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART1_UART_Init+0x58>)
 8000dec:	f001 ff40 	bl	8002c70 <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000df6:	f000 f8c1 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000078 	.word	0x20000078
 8000e04:	40013800 	.word	0x40013800

08000e08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e0e:	4a15      	ldr	r2, [pc, #84]	; (8000e64 <MX_USART2_UART_Init+0x5c>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USART2_UART_Init+0x58>)
 8000e4c:	f001 ff10 	bl	8002c70 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 f891 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000100 	.word	0x20000100
 8000e64:	40004400 	.word	0x40004400

08000e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a3b      	ldr	r2, [pc, #236]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a35      	ldr	r2, [pc, #212]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_GPIO_Init+0x108>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	21b0      	movs	r1, #176	; 0xb0
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f000 fcb1 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	4820      	ldr	r0, [pc, #128]	; (8000f74 <MX_GPIO_Init+0x10c>)
 8000ef2:	f000 fcab 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481a      	ldr	r0, [pc, #104]	; (8000f78 <MX_GPIO_Init+0x110>)
 8000f0e:	f000 fb23 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000f12:	23b0      	movs	r3, #176	; 0xb0
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f000 fb14 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 fb07 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_GPIO_Init+0x10c>)
 8000f64:	f000 faf8 	bl	8001558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48000800 	.word	0x48000800

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x44>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x44>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_MspInit+0x44>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_MspInit+0x44>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0a6      	sub	sp, #152	; 0x98
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2268      	movs	r2, #104	; 0x68
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fca1 	bl	8003938 <memset>
  if(huart->Instance==USART1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a43      	ldr	r2, [pc, #268]	; (8001108 <HAL_UART_MspInit+0x138>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13d      	bne.n	800107c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001004:	2300      	movs	r3, #0
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fad1 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff ffb0 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <HAL_UART_MspInit+0x13c>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	4a3a      	ldr	r2, [pc, #232]	; (800110c <HAL_UART_MspInit+0x13c>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6613      	str	r3, [r2, #96]	; 0x60
 8001028:	4b38      	ldr	r3, [pc, #224]	; (800110c <HAL_UART_MspInit+0x13c>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_UART_MspInit+0x13c>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	4a34      	ldr	r2, [pc, #208]	; (800110c <HAL_UART_MspInit+0x13c>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_UART_MspInit+0x13c>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800104c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001066:	2307      	movs	r3, #7
 8001068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f000 fa6f 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107a:	e040      	b.n	80010fe <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_UART_MspInit+0x140>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d13b      	bne.n	80010fe <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108a:	2300      	movs	r3, #0
 800108c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fa8e 	bl	80025b4 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800109e:	f7ff ff6d 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_UART_MspInit+0x13c>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_UART_MspInit+0x13c>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_UART_MspInit+0x13c>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_UART_MspInit+0x13c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <HAL_UART_MspInit+0x13c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_UART_MspInit+0x13c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d2:	230c      	movs	r3, #12
 80010d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ea:	2307      	movs	r3, #7
 80010ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f000 fa2d 	bl	8001558 <HAL_GPIO_Init>
}
 80010fe:	bf00      	nop
 8001100:	3798      	adds	r7, #152	; 0x98
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40013800 	.word	0x40013800
 800110c:	40021000 	.word	0x40021000
 8001110:	40004400 	.word	0x40004400

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f8d0 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f002 fbfa 	bl	8003990 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20028000 	.word	0x20028000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	20000188 	.word	0x20000188
 80011d0:	200002d8 	.word	0x200002d8

080011d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff ffea 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f002 fbb9 	bl	800399c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122a:	f7ff f9af 	bl	800058c <main>

0800122e <LoopForever>:

LoopForever:
    b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001230:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800123c:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 8001240:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001244:	200002d8 	.word	0x200002d8

08001248 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_IRQHandler>
	...

0800124c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_Init+0x3c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x3c>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f944 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001268:	2000      	movs	r0, #0
 800126a:	f000 f80f 	bl	800128c <HAL_InitTick>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	e001      	b.n	800127e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127a:	f7ff fe85 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127e:	79fb      	ldrb	r3, [r7, #7]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_InitTick+0x70>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_InitTick+0x6c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f941 	bl	800153e <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d809      	bhi.n	80012dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f919 	bl	8001506 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e007      	b.n	80012ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e004      	b.n	80012ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	2000018c 	.word	0x2000018c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000018c 	.word	0x2000018c

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff5c 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffb0 	bl	80014ac <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e154      	b.n	8001812 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8146 	beq.w	800180c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b01      	cmp	r3, #1
 800158a:	d005      	beq.n	8001598 <HAL_GPIO_Init+0x40>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d130      	bne.n	80015fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ce:	2201      	movs	r2, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 0201 	and.w	r2, r3, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b03      	cmp	r3, #3
 8001604:	d017      	beq.n	8001636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d123      	bne.n	800168a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	6939      	ldr	r1, [r7, #16]
 8001686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0203 	and.w	r2, r3, #3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80a0 	beq.w	800180c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <HAL_GPIO_Init+0x2d8>)
 80016ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d0:	4a57      	ldr	r2, [pc, #348]	; (8001830 <HAL_GPIO_Init+0x2d8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6613      	str	r3, [r2, #96]	; 0x60
 80016d8:	4b55      	ldr	r3, [pc, #340]	; (8001830 <HAL_GPIO_Init+0x2d8>)
 80016da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016e4:	4a53      	ldr	r2, [pc, #332]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800170e:	d019      	beq.n	8001744 <HAL_GPIO_Init+0x1ec>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_GPIO_Init+0x2e0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d013      	beq.n	8001740 <HAL_GPIO_Init+0x1e8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2e4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00d      	beq.n	800173c <HAL_GPIO_Init+0x1e4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d007      	beq.n	8001738 <HAL_GPIO_Init+0x1e0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a46      	ldr	r2, [pc, #280]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_GPIO_Init+0x1dc>
 8001730:	2304      	movs	r3, #4
 8001732:	e008      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001734:	2307      	movs	r3, #7
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001738:	2303      	movs	r3, #3
 800173a:	e004      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 800173c:	2302      	movs	r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_GPIO_Init+0x1ee>
 8001744:	2300      	movs	r3, #0
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	f002 0203 	and.w	r2, r2, #3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	4093      	lsls	r3, r2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001756:	4937      	ldr	r1, [pc, #220]	; (8001834 <HAL_GPIO_Init+0x2dc>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001764:	4b38      	ldr	r3, [pc, #224]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001788:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017b2:	4a25      	ldr	r2, [pc, #148]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017dc:	4a1a      	ldr	r2, [pc, #104]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f aea3 	bne.w	8001568 <HAL_GPIO_Init+0x10>
  }
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800
 8001840:	48000c00 	.word	0x48000c00
 8001844:	48001000 	.word	0x48001000
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001868:	e002      	b.n	8001870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_PWREx_GetVoltageRange+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a6:	d130      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b4:	d038      	beq.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2232      	movs	r2, #50	; 0x32
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9b      	lsrs	r3, r3, #18
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018dc:	e002      	b.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f0:	d102      	bne.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f2      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001904:	d110      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e00f      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001916:	d007      	beq.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000
 800193c:	20000000 	.word	0x20000000
 8001940:	431bde83 	.word	0x431bde83

08001944 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f000 bc02 	b.w	800215c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001958:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001962:	4b94      	ldr	r3, [pc, #592]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80e4 	beq.w	8001b42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_RCC_OscConfig+0x4c>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	f040 808b 	bne.w	8001a9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b01      	cmp	r3, #1
 800198c:	f040 8087 	bne.w	8001a9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_OscConfig+0x64>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e3d9      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_RCC_OscConfig+0x7e>
 80019b8:	4b7e      	ldr	r3, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c0:	e005      	b.n	80019ce <HAL_RCC_OscConfig+0x8a>
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d223      	bcs.n	8001a1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fd8c 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e3ba      	b.n	800215c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	496d      	ldr	r1, [pc, #436]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a04:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	4968      	ldr	r1, [pc, #416]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e025      	b.n	8001a66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1a:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4960      	ldr	r1, [pc, #384]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	495b      	ldr	r1, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fd4c 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e37a      	b.n	800215c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a66:	f000 fc81 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4950      	ldr	r1, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001a84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a86:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fbfe 	bl	800128c <HAL_InitTick>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d052      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	e35e      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d032      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a42      	ldr	r2, [pc, #264]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fc3b 	bl	800132c <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aba:	f7ff fc37 	bl	800132c <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e347      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a35      	ldr	r2, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4930      	ldr	r1, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
 8001b0a:	e01a      	b.n	8001b42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc08 	bl	800132c <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b20:	f7ff fc04 	bl	800132c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e314      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1dc>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d073      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x21c>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d10e      	bne.n	8001b78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d063      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d15f      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e2f1      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x24c>
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e025      	b.n	8001bdc <HAL_RCC_OscConfig+0x298>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d114      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x280>
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a02      	ldr	r2, [pc, #8]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e013      	b.n	8001bdc <HAL_RCC_OscConfig+0x298>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08004764 	.word	0x08004764
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	4ba0      	ldr	r3, [pc, #640]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a9f      	ldr	r2, [pc, #636]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b9d      	ldr	r3, [pc, #628]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a9c      	ldr	r2, [pc, #624]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fba2 	bl	800132c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb9e 	bl	800132c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e2ae      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x2a8>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb8e 	bl	800132c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb8a 	bl	800132c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e29a      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2d0>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d060      	beq.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x310>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d116      	bne.n	8001c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c54:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_OscConfig+0x328>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e277      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b76      	ldr	r3, [pc, #472]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	4973      	ldr	r1, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	e040      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d023      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb49 	bl	800132c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fb45 	bl	800132c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e255      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b62      	ldr	r3, [pc, #392]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	495f      	ldr	r1, [pc, #380]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5c      	ldr	r2, [pc, #368]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb25 	bl	800132c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fb21 	bl	800132c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e231      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d03c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1e:	4a4a      	ldr	r2, [pc, #296]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fb00 	bl	800132c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fafc 	bl	800132c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e20c      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ef      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3ec>
 8001d50:	e01b      	b.n	8001d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d58:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fae3 	bl	800132c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fadf 	bl	800132c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1ef      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ef      	bne.n	8001d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80a6 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6593      	str	r3, [r2, #88]	; 0x58
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d118      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff faa6 	bl	800132c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7ff faa2 	bl	800132c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1b2      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4d8>
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1a:	e029      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d115      	bne.n	8001e50 <HAL_RCC_OscConfig+0x50c>
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	4a03      	ldr	r2, [pc, #12]	; (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	4b9a      	ldr	r3, [pc, #616]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	4a99      	ldr	r2, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e60:	4b96      	ldr	r3, [pc, #600]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	4a95      	ldr	r2, [pc, #596]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff fa58 	bl	800132c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff fa54 	bl	800132c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e162      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ed      	beq.n	8001e80 <HAL_RCC_OscConfig+0x53c>
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa41 	bl	800132c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fa3d 	bl	800132c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e14b      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ed      	bne.n	8001eae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d03c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001efe:	4a6f      	ldr	r2, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff fa10 	bl	800132c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f10:	f7ff fa0c 	bl	800132c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e11c      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ef      	beq.n	8001f10 <HAL_RCC_OscConfig+0x5cc>
 8001f30:	e01b      	b.n	8001f6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f32:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f38:	4a60      	ldr	r2, [pc, #384]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f9f3 	bl	800132c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4a:	f7ff f9ef 	bl	800132c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0ff      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ef      	bne.n	8001f4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80f3 	beq.w	800215a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	f040 80c9 	bne.w	8002110 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f7e:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d12c      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d123      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11b      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d113      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d109      	bne.n	8001fec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d06b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d062      	beq.n	80020b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ff2:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0ac      	b.n	800215c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800200e:	f7ff f98d 	bl	800132c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff f989 	bl	800132c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e099      	b.n	800215c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_OscConfig+0x77c>)
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002044:	3a01      	subs	r2, #1
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800204e:	0212      	lsls	r2, r2, #8
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002056:	0852      	lsrs	r2, r2, #1
 8002058:	3a01      	subs	r2, #1
 800205a:	0552      	lsls	r2, r2, #21
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002062:	0852      	lsrs	r2, r2, #1
 8002064:	3a01      	subs	r2, #1
 8002066:	0652      	lsls	r2, r2, #25
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800206e:	06d2      	lsls	r2, r2, #27
 8002070:	430a      	orrs	r2, r1
 8002072:	4912      	ldr	r1, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002090:	f7ff f94c 	bl	800132c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff f948 	bl	800132c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e058      	b.n	800215c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCC_OscConfig+0x778>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b6:	e050      	b.n	800215a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04f      	b.n	800215c <HAL_RCC_OscConfig+0x818>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d144      	bne.n	800215a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020e8:	f7ff f920 	bl	800132c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff f91c 	bl	800132c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e02c      	b.n	800215c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x7ac>
 800210e:	e024      	b.n	800215a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d01f      	beq.n	8002156 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff f903 	bl	800132c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff f8ff 	bl	800132c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e00f      	b.n	800215c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4905      	ldr	r1, [pc, #20]	; (8002164 <HAL_RCC_OscConfig+0x820>)
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_OscConfig+0x824>)
 8002150:	4013      	ands	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
 8002154:	e001      	b.n	800215a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	feeefffc 	.word	0xfeeefffc

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0e7      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b75      	ldr	r3, [pc, #468]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4970      	ldr	r1, [pc, #448]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b6e      	ldr	r3, [pc, #440]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0cf      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d010      	beq.n	80021de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b66      	ldr	r3, [pc, #408]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d908      	bls.n	80021de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4960      	ldr	r1, [pc, #384]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d04c      	beq.n	8002284 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d121      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0a6      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d115      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e09a      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e08e      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e086      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f023 0203 	bic.w	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4943      	ldr	r1, [pc, #268]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7ff f86a 	bl	800132c <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	e00a      	b.n	8002272 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7ff f866 	bl	800132c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	f241 3288 	movw	r2, #5000	; 0x1388
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e06e      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 020c 	and.w	r2, r3, #12
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	429a      	cmp	r2, r3
 8002282:	d1eb      	bne.n	800225c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	429a      	cmp	r2, r3
 800229e:	d208      	bcs.n	80022b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	492b      	ldr	r1, [pc, #172]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d210      	bcs.n	80022e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 0207 	bic.w	r2, r3, #7
 80022c8:	4923      	ldr	r1, [pc, #140]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_RCC_ClockConfig+0x1ec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e036      	b.n	8002350 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4918      	ldr	r1, [pc, #96]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4910      	ldr	r1, [pc, #64]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002320:	f000 f824 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	490b      	ldr	r1, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1f4>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1f8>)
 800233e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1fc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe ffa1 	bl	800128c <HAL_InitTick>
 800234a:	4603      	mov	r3, r0
 800234c:	72fb      	strb	r3, [r7, #11]

  return status;
 800234e:	7afb      	ldrb	r3, [r7, #11]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	08004764 	.word	0x08004764
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d121      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d11e      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c8:	4a2b      	ldr	r2, [pc, #172]	; (8002478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e004      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 80023f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d134      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0xa6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xac>
 8002410:	e005      	b.n	800241e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_RCC_GetSysClockFreq+0x110>)
 8002414:	617b      	str	r3, [r7, #20]
      break;
 8002416:	e005      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_GetSysClockFreq+0x114>)
 800241a:	617b      	str	r3, [r7, #20]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	617b      	str	r3, [r7, #20]
      break;
 8002422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	3301      	adds	r3, #1
 8002430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	fb03 f202 	mul.w	r2, r3, r2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0e5b      	lsrs	r3, r3, #25
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	3301      	adds	r3, #1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002464:	69bb      	ldr	r3, [r7, #24]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	0800477c 	.word	0x0800477c
 800247c:	00f42400 	.word	0x00f42400
 8002480:	007a1200 	.word	0x007a1200

08002484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4904      	ldr	r1, [pc, #16]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08004774 	.word	0x08004774

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024cc:	f7ff ffda 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0adb      	lsrs	r3, r3, #11
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004774 	.word	0x08004774

080024f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800250c:	f7ff f9b6 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8002510:	6178      	str	r0, [r7, #20]
 8002512:	e014      	b.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b22      	ldr	r3, [pc, #136]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800252c:	f7ff f9a6 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8002530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d10b      	bne.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d919      	bls.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2ba0      	cmp	r3, #160	; 0xa0
 8002550:	d902      	bls.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002552:	2302      	movs	r3, #2
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	e013      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002558:	2301      	movs	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e010      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d902      	bls.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002564:	2303      	movs	r3, #3
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e00a      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d102      	bne.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002570:	2302      	movs	r3, #2
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e004      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d101      	bne.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 0207 	bic.w	r2, r3, #7
 8002588:	4909      	ldr	r1, [pc, #36]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c0:	2300      	movs	r3, #0
 80025c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d031      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025d8:	d01a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025de:	d814      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e8:	d10f      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f6:	e00c      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fa44 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002608:	e003      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	74fb      	strb	r3, [r7, #19]
      break;
 800260e:	e000      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002618:	4b51      	ldr	r3, [pc, #324]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	494e      	ldr	r1, [pc, #312]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800262e:	e001      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002630:	7cfb      	ldrb	r3, [r7, #19]
 8002632:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 809e 	beq.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002646:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00d      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b40      	ldr	r3, [pc, #256]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4a3f      	ldr	r2, [pc, #252]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	; 0x58
 8002668:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002678:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002684:	f7fe fe52 	bl	800132c <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800268a:	e009      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fe4e 	bl	800132c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	74fb      	strb	r3, [r7, #19]
        break;
 800269e:	e005      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ef      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d15a      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01e      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d019      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fe0e 	bl	800132c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	e00b      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7fe fe0a 	bl	800132c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d902      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	74fb      	strb	r3, [r7, #19]
            break;
 800272a:	e006      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ec      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274e:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002756:	e009      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	74bb      	strb	r3, [r7, #18]
 800275c:	e006      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276c:	7c7b      	ldrb	r3, [r7, #17]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b9e      	ldr	r3, [pc, #632]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4a9d      	ldr	r2, [pc, #628]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278a:	4b98      	ldr	r3, [pc, #608]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	f023 0203 	bic.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4994      	ldr	r1, [pc, #592]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ac:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f023 020c 	bic.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	498c      	ldr	r1, [pc, #560]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ce:	4b87      	ldr	r3, [pc, #540]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	4983      	ldr	r1, [pc, #524]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f0:	4b7e      	ldr	r3, [pc, #504]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	497b      	ldr	r1, [pc, #492]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002812:	4b76      	ldr	r3, [pc, #472]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4972      	ldr	r1, [pc, #456]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002834:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	496a      	ldr	r1, [pc, #424]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002856:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	4961      	ldr	r1, [pc, #388]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002878:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	4959      	ldr	r1, [pc, #356]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289a:	4b54      	ldr	r3, [pc, #336]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4950      	ldr	r1, [pc, #320]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028bc:	4b4b      	ldr	r3, [pc, #300]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ca:	4948      	ldr	r1, [pc, #288]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028de:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028e4:	f023 0203 	bic.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	493f      	ldr	r1, [pc, #252]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d028      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290e:	4937      	ldr	r1, [pc, #220]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291e:	d106      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292a:	60d3      	str	r3, [r2, #12]
 800292c:	e011      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002936:	d10c      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f8a4 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d028      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	491f      	ldr	r1, [pc, #124]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297c:	d106      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002988:	60d3      	str	r3, [r2, #12]
 800298a:	e011      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f875 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d02b      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	4908      	ldr	r1, [pc, #32]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029da:	d109      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a02      	ldr	r2, [pc, #8]	; (80029ec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029e6:	60d3      	str	r3, [r2, #12]
 80029e8:	e014      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2101      	movs	r1, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f843 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01c      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f820 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	4904      	ldr	r1, [pc, #16]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000

08002a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a9a:	4b74      	ldr	r3, [pc, #464]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002abe:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d047      	beq.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e044      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d018      	beq.n	8002b12 <RCCEx_PLLSAI1_Config+0x86>
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d825      	bhi.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d002      	beq.n	8002aee <RCCEx_PLLSAI1_Config+0x62>
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d009      	beq.n	8002b00 <RCCEx_PLLSAI1_Config+0x74>
 8002aec:	e020      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aee:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afe:	e01a      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b00:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d116      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e013      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b12:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b1e:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b2e:	e006      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
      break;
 8002b34:	e004      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	4943      	ldr	r1, [pc, #268]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d17c      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b68:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe fbda 	bl	800132c <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b7a:	e009      	b.n	8002b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b7c:	f7fe fbd6 	bl	800132c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d902      	bls.n	8002b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b8e:	e005      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b90:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ef      	bne.n	8002b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d15f      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d110      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	0211      	lsls	r1, r2, #8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	06d2      	lsls	r2, r2, #27
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	492a      	ldr	r1, [pc, #168]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
 8002bc8:	e027      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d112      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd0:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6912      	ldr	r2, [r2, #16]
 8002be6:	0852      	lsrs	r2, r2, #1
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0552      	lsls	r2, r2, #21
 8002bec:	430a      	orrs	r2, r1
 8002bee:	491f      	ldr	r1, [pc, #124]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	610b      	str	r3, [r1, #16]
 8002bf4:	e011      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	0211      	lsls	r1, r2, #8
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6952      	ldr	r2, [r2, #20]
 8002c0c:	0852      	lsrs	r2, r2, #1
 8002c0e:	3a01      	subs	r2, #1
 8002c10:	0652      	lsls	r2, r2, #25
 8002c12:	430a      	orrs	r2, r1
 8002c14:	4915      	ldr	r1, [pc, #84]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe fb81 	bl	800132c <HAL_GetTick>
 8002c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c2c:	e009      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2e:	f7fe fb7d 	bl	800132c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d902      	bls.n	8002c42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8002c40:	e005      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ef      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e040      	b.n	8002d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe f99c 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fc02 	bl	80034c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f979 	bl	8002fb4 <UART_SetConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e01b      	b.n	8002d04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fc81 	bl	8003604 <UART_CheckIdleState>
 8002d02:	4603      	mov	r3, r0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d178      	bne.n	8002e16 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Transmit+0x24>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e071      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2221      	movs	r2, #33	; 0x21
 8002d40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d42:	f7fe faf3 	bl	800132c <HAL_GetTick>
 8002d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x68>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d7c:	e030      	b.n	8002de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fce3 	bl	8003754 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e03c      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db0:	b292      	uxth	r2, r2
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	3302      	adds	r3, #2
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	e008      	b.n	8002dce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1c8      	bne.n	8002d7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fcac 	bl	8003754 <UART_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e005      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	f040 80b6 	bne.w	8002fa8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_UART_Receive+0x28>
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0ae      	b.n	8002faa <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2222      	movs	r2, #34	; 0x22
 8002e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e62:	f7fe fa63 	bl	800132c <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d10e      	bne.n	8002ea0 <HAL_UART_Receive+0x80>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d105      	bne.n	8002e96 <HAL_UART_Receive+0x76>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e94:	e02d      	b.n	8002ef2 <HAL_UART_Receive+0xd2>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	22ff      	movs	r2, #255	; 0xff
 8002e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e9e:	e028      	b.n	8002ef2 <HAL_UART_Receive+0xd2>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_UART_Receive+0xa4>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d104      	bne.n	8002eba <HAL_UART_Receive+0x9a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	22ff      	movs	r2, #255	; 0xff
 8002eb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002eb8:	e01b      	b.n	8002ef2 <HAL_UART_Receive+0xd2>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	227f      	movs	r2, #127	; 0x7f
 8002ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ec2:	e016      	b.n	8002ef2 <HAL_UART_Receive+0xd2>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ecc:	d10d      	bne.n	8002eea <HAL_UART_Receive+0xca>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_UART_Receive+0xc0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	227f      	movs	r2, #127	; 0x7f
 8002eda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ede:	e008      	b.n	8002ef2 <HAL_UART_Receive+0xd2>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	223f      	movs	r2, #63	; 0x3f
 8002ee4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ee8:	e003      	b.n	8002ef2 <HAL_UART_Receive+0xd2>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	d108      	bne.n	8002f16 <HAL_UART_Receive+0xf6>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d104      	bne.n	8002f16 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e003      	b.n	8002f1e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f1e:	e037      	b.n	8002f90 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2120      	movs	r1, #32
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fc12 	bl	8003754 <UART_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e033      	b.n	8002faa <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10c      	bne.n	8002f62 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	8a7b      	ldrh	r3, [r7, #18]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e00d      	b.n	8002f7e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	8a7b      	ldrh	r3, [r7, #18]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4013      	ands	r3, r2
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1c1      	bne.n	8002f20 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b08a      	sub	sp, #40	; 0x28
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4ba5      	ldr	r3, [pc, #660]	; (8003278 <UART_SetConfig+0x2c4>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a9a      	ldr	r2, [pc, #616]	; (800327c <UART_SetConfig+0x2c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	4313      	orrs	r3, r2
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a91      	ldr	r2, [pc, #580]	; (8003280 <UART_SetConfig+0x2cc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d126      	bne.n	800308c <UART_SetConfig+0xd8>
 800303e:	4b91      	ldr	r3, [pc, #580]	; (8003284 <UART_SetConfig+0x2d0>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b03      	cmp	r3, #3
 800304a:	d81b      	bhi.n	8003084 <UART_SetConfig+0xd0>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0xa0>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003065 	.word	0x08003065
 8003058:	08003075 	.word	0x08003075
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307d 	.word	0x0800307d
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e0d6      	b.n	800321a <UART_SetConfig+0x266>
 800306c:	2302      	movs	r3, #2
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e0d2      	b.n	800321a <UART_SetConfig+0x266>
 8003074:	2304      	movs	r3, #4
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e0ce      	b.n	800321a <UART_SetConfig+0x266>
 800307c:	2308      	movs	r3, #8
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e0ca      	b.n	800321a <UART_SetConfig+0x266>
 8003084:	2310      	movs	r3, #16
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e0c6      	b.n	800321a <UART_SetConfig+0x266>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a7d      	ldr	r2, [pc, #500]	; (8003288 <UART_SetConfig+0x2d4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d138      	bne.n	8003108 <UART_SetConfig+0x154>
 8003096:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <UART_SetConfig+0x2d0>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d82d      	bhi.n	8003100 <UART_SetConfig+0x14c>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0xf8>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003101 	.word	0x08003101
 80030b8:	08003101 	.word	0x08003101
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003101 	.word	0x08003101
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	08003101 	.word	0x08003101
 80030dc:	080030f9 	.word	0x080030f9
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e098      	b.n	800321a <UART_SetConfig+0x266>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e094      	b.n	800321a <UART_SetConfig+0x266>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e090      	b.n	800321a <UART_SetConfig+0x266>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e08c      	b.n	800321a <UART_SetConfig+0x266>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e088      	b.n	800321a <UART_SetConfig+0x266>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5f      	ldr	r2, [pc, #380]	; (800328c <UART_SetConfig+0x2d8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d125      	bne.n	800315e <UART_SetConfig+0x1aa>
 8003112:	4b5c      	ldr	r3, [pc, #368]	; (8003284 <UART_SetConfig+0x2d0>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d016      	beq.n	800314e <UART_SetConfig+0x19a>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d818      	bhi.n	8003156 <UART_SetConfig+0x1a2>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d00a      	beq.n	800313e <UART_SetConfig+0x18a>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d814      	bhi.n	8003156 <UART_SetConfig+0x1a2>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <UART_SetConfig+0x182>
 8003130:	2b10      	cmp	r3, #16
 8003132:	d008      	beq.n	8003146 <UART_SetConfig+0x192>
 8003134:	e00f      	b.n	8003156 <UART_SetConfig+0x1a2>
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313c:	e06d      	b.n	800321a <UART_SetConfig+0x266>
 800313e:	2302      	movs	r3, #2
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003144:	e069      	b.n	800321a <UART_SetConfig+0x266>
 8003146:	2304      	movs	r3, #4
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314c:	e065      	b.n	800321a <UART_SetConfig+0x266>
 800314e:	2308      	movs	r3, #8
 8003150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003154:	e061      	b.n	800321a <UART_SetConfig+0x266>
 8003156:	2310      	movs	r3, #16
 8003158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315c:	e05d      	b.n	800321a <UART_SetConfig+0x266>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4b      	ldr	r2, [pc, #300]	; (8003290 <UART_SetConfig+0x2dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d125      	bne.n	80031b4 <UART_SetConfig+0x200>
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <UART_SetConfig+0x2d0>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003172:	2bc0      	cmp	r3, #192	; 0xc0
 8003174:	d016      	beq.n	80031a4 <UART_SetConfig+0x1f0>
 8003176:	2bc0      	cmp	r3, #192	; 0xc0
 8003178:	d818      	bhi.n	80031ac <UART_SetConfig+0x1f8>
 800317a:	2b80      	cmp	r3, #128	; 0x80
 800317c:	d00a      	beq.n	8003194 <UART_SetConfig+0x1e0>
 800317e:	2b80      	cmp	r3, #128	; 0x80
 8003180:	d814      	bhi.n	80031ac <UART_SetConfig+0x1f8>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <UART_SetConfig+0x1d8>
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d008      	beq.n	800319c <UART_SetConfig+0x1e8>
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x1f8>
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e042      	b.n	800321a <UART_SetConfig+0x266>
 8003194:	2302      	movs	r3, #2
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e03e      	b.n	800321a <UART_SetConfig+0x266>
 800319c:	2304      	movs	r3, #4
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e03a      	b.n	800321a <UART_SetConfig+0x266>
 80031a4:	2308      	movs	r3, #8
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e036      	b.n	800321a <UART_SetConfig+0x266>
 80031ac:	2310      	movs	r3, #16
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e032      	b.n	800321a <UART_SetConfig+0x266>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a30      	ldr	r2, [pc, #192]	; (800327c <UART_SetConfig+0x2c8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d12a      	bne.n	8003214 <UART_SetConfig+0x260>
 80031be:	4b31      	ldr	r3, [pc, #196]	; (8003284 <UART_SetConfig+0x2d0>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031cc:	d01a      	beq.n	8003204 <UART_SetConfig+0x250>
 80031ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031d2:	d81b      	bhi.n	800320c <UART_SetConfig+0x258>
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d8:	d00c      	beq.n	80031f4 <UART_SetConfig+0x240>
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031de:	d815      	bhi.n	800320c <UART_SetConfig+0x258>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <UART_SetConfig+0x238>
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d008      	beq.n	80031fc <UART_SetConfig+0x248>
 80031ea:	e00f      	b.n	800320c <UART_SetConfig+0x258>
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e012      	b.n	800321a <UART_SetConfig+0x266>
 80031f4:	2302      	movs	r3, #2
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e00e      	b.n	800321a <UART_SetConfig+0x266>
 80031fc:	2304      	movs	r3, #4
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e00a      	b.n	800321a <UART_SetConfig+0x266>
 8003204:	2308      	movs	r3, #8
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e006      	b.n	800321a <UART_SetConfig+0x266>
 800320c:	2310      	movs	r3, #16
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e002      	b.n	800321a <UART_SetConfig+0x266>
 8003214:	2310      	movs	r3, #16
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <UART_SetConfig+0x2c8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	f040 808b 	bne.w	800333c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322a:	2b08      	cmp	r3, #8
 800322c:	d834      	bhi.n	8003298 <UART_SetConfig+0x2e4>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0x280>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003259 	.word	0x08003259
 8003238:	08003299 	.word	0x08003299
 800323c:	08003261 	.word	0x08003261
 8003240:	08003299 	.word	0x08003299
 8003244:	08003267 	.word	0x08003267
 8003248:	08003299 	.word	0x08003299
 800324c:	08003299 	.word	0x08003299
 8003250:	08003299 	.word	0x08003299
 8003254:	0800326f 	.word	0x0800326f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff f920 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 800325c:	61f8      	str	r0, [r7, #28]
        break;
 800325e:	e021      	b.n	80032a4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <UART_SetConfig+0x2e0>)
 8003262:	61fb      	str	r3, [r7, #28]
        break;
 8003264:	e01e      	b.n	80032a4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003266:	f7ff f881 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800326a:	61f8      	str	r0, [r7, #28]
        break;
 800326c:	e01a      	b.n	80032a4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800326e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003272:	61fb      	str	r3, [r7, #28]
        break;
 8003274:	e016      	b.n	80032a4 <UART_SetConfig+0x2f0>
 8003276:	bf00      	nop
 8003278:	efff69f3 	.word	0xefff69f3
 800327c:	40008000 	.word	0x40008000
 8003280:	40013800 	.word	0x40013800
 8003284:	40021000 	.word	0x40021000
 8003288:	40004400 	.word	0x40004400
 800328c:	40004800 	.word	0x40004800
 8003290:	40004c00 	.word	0x40004c00
 8003294:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80fa 	beq.w	80034a0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d305      	bcc.n	80032c8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d903      	bls.n	80032d0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032ce:	e0e7      	b.n	80034a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2200      	movs	r2, #0
 80032d4:	461c      	mov	r4, r3
 80032d6:	4615      	mov	r5, r2
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	022b      	lsls	r3, r5, #8
 80032e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032e6:	0222      	lsls	r2, r4, #8
 80032e8:	68f9      	ldr	r1, [r7, #12]
 80032ea:	6849      	ldr	r1, [r1, #4]
 80032ec:	0849      	lsrs	r1, r1, #1
 80032ee:	2000      	movs	r0, #0
 80032f0:	4688      	mov	r8, r1
 80032f2:	4681      	mov	r9, r0
 80032f4:	eb12 0a08 	adds.w	sl, r2, r8
 80032f8:	eb43 0b09 	adc.w	fp, r3, r9
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800330a:	4650      	mov	r0, sl
 800330c:	4659      	mov	r1, fp
 800330e:	f7fc ffbf 	bl	8000290 <__aeabi_uldivmod>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4613      	mov	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003320:	d308      	bcc.n	8003334 <UART_SetConfig+0x380>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003328:	d204      	bcs.n	8003334 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	e0b5      	b.n	80034a0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800333a:	e0b1      	b.n	80034a0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d15d      	bne.n	8003402 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800334a:	2b08      	cmp	r3, #8
 800334c:	d827      	bhi.n	800339e <UART_SetConfig+0x3ea>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <UART_SetConfig+0x3a0>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003379 	.word	0x08003379
 8003358:	08003381 	.word	0x08003381
 800335c:	08003389 	.word	0x08003389
 8003360:	0800339f 	.word	0x0800339f
 8003364:	0800338f 	.word	0x0800338f
 8003368:	0800339f 	.word	0x0800339f
 800336c:	0800339f 	.word	0x0800339f
 8003370:	0800339f 	.word	0x0800339f
 8003374:	08003397 	.word	0x08003397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003378:	f7ff f890 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 800337c:	61f8      	str	r0, [r7, #28]
        break;
 800337e:	e014      	b.n	80033aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003380:	f7ff f8a2 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8003384:	61f8      	str	r0, [r7, #28]
        break;
 8003386:	e010      	b.n	80033aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003388:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <UART_SetConfig+0x508>)
 800338a:	61fb      	str	r3, [r7, #28]
        break;
 800338c:	e00d      	b.n	80033aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338e:	f7fe ffed 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8003392:	61f8      	str	r0, [r7, #28]
        break;
 8003394:	e009      	b.n	80033aa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339a:	61fb      	str	r3, [r7, #28]
        break;
 800339c:	e005      	b.n	80033aa <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d077      	beq.n	80034a0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005a      	lsls	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	441a      	add	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d916      	bls.n	80033fa <UART_SetConfig+0x446>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d212      	bcs.n	80033fa <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f023 030f 	bic.w	r3, r3, #15
 80033dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	8afb      	ldrh	r3, [r7, #22]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	8afa      	ldrh	r2, [r7, #22]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e052      	b.n	80034a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003400:	e04e      	b.n	80034a0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003406:	2b08      	cmp	r3, #8
 8003408:	d827      	bhi.n	800345a <UART_SetConfig+0x4a6>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0x45c>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003435 	.word	0x08003435
 8003414:	0800343d 	.word	0x0800343d
 8003418:	08003445 	.word	0x08003445
 800341c:	0800345b 	.word	0x0800345b
 8003420:	0800344b 	.word	0x0800344b
 8003424:	0800345b 	.word	0x0800345b
 8003428:	0800345b 	.word	0x0800345b
 800342c:	0800345b 	.word	0x0800345b
 8003430:	08003453 	.word	0x08003453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003434:	f7ff f832 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003438:	61f8      	str	r0, [r7, #28]
        break;
 800343a:	e014      	b.n	8003466 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800343c:	f7ff f844 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 8003440:	61f8      	str	r0, [r7, #28]
        break;
 8003442:	e010      	b.n	8003466 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <UART_SetConfig+0x508>)
 8003446:	61fb      	str	r3, [r7, #28]
        break;
 8003448:	e00d      	b.n	8003466 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344a:	f7fe ff8f 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800344e:	61f8      	str	r0, [r7, #28]
        break;
 8003450:	e009      	b.n	8003466 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003456:	61fb      	str	r3, [r7, #28]
        break;
 8003458:	e005      	b.n	8003466 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003464:	bf00      	nop
    }

    if (pclk != 0U)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d019      	beq.n	80034a0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	085a      	lsrs	r2, r3, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	441a      	add	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d909      	bls.n	800349a <UART_SetConfig+0x4e6>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d205      	bcs.n	800349a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e002      	b.n	80034a0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	00f42400 	.word	0x00f42400

080034c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01a      	beq.n	80035d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035be:	d10a      	bne.n	80035d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b098      	sub	sp, #96	; 0x60
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003614:	f7fd fe8a 	bl	800132c <HAL_GetTick>
 8003618:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d12e      	bne.n	8003686 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f88c 	bl	8003754 <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d021      	beq.n	8003686 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
 8003662:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003668:	e841 2300 	strex	r3, r2, [r1]
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800366e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e6      	bne.n	8003642 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e062      	b.n	800374c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d149      	bne.n	8003728 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f856 	bl	8003754 <UART_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d03c      	beq.n	8003728 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	623b      	str	r3, [r7, #32]
   return(result);
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036cc:	633b      	str	r3, [r7, #48]	; 0x30
 80036ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e6      	bne.n	80036ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3308      	adds	r3, #8
 80036e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	617b      	str	r3, [r7, #20]
   return(result);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e011      	b.n	800374c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3758      	adds	r7, #88	; 0x58
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003764:	e04f      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d04b      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fd fddd 	bl	800132c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <UART_WaitOnFlagUntilTimeout+0x30>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e04e      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d037      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d034      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb2>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d031      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d110      	bne.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2208      	movs	r2, #8
 80037b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f838 	bl	800382e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2208      	movs	r2, #8
 80037c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e029      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d111      	bne.n	8003806 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f81e 	bl	800382e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e00f      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4013      	ands	r3, r2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	429a      	cmp	r2, r3
 8003822:	d0a0      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382e:	b480      	push	{r7}
 8003830:	b095      	sub	sp, #84	; 0x54
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	643b      	str	r3, [r7, #64]	; 0x40
 8003856:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800385a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e6      	bne.n	8003836 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	61fb      	str	r3, [r7, #28]
   return(result);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3308      	adds	r3, #8
 8003886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800388e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d118      	bne.n	80038d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f023 0310 	bic.w	r3, r3, #16
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6979      	ldr	r1, [r7, #20]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	613b      	str	r3, [r7, #16]
   return(result);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e6      	bne.n	80038a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038ea:	bf00      	nop
 80038ec:	3754      	adds	r7, #84	; 0x54
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <siprintf>:
 80038f8:	b40e      	push	{r1, r2, r3}
 80038fa:	b500      	push	{lr}
 80038fc:	b09c      	sub	sp, #112	; 0x70
 80038fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003900:	9002      	str	r0, [sp, #8]
 8003902:	9006      	str	r0, [sp, #24]
 8003904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003908:	4809      	ldr	r0, [pc, #36]	; (8003930 <siprintf+0x38>)
 800390a:	9107      	str	r1, [sp, #28]
 800390c:	9104      	str	r1, [sp, #16]
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <siprintf+0x3c>)
 8003910:	f853 2b04 	ldr.w	r2, [r3], #4
 8003914:	9105      	str	r1, [sp, #20]
 8003916:	6800      	ldr	r0, [r0, #0]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	a902      	add	r1, sp, #8
 800391c:	f000 f9b6 	bl	8003c8c <_svfiprintf_r>
 8003920:	9b02      	ldr	r3, [sp, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	b01c      	add	sp, #112	; 0x70
 8003928:	f85d eb04 	ldr.w	lr, [sp], #4
 800392c:	b003      	add	sp, #12
 800392e:	4770      	bx	lr
 8003930:	20000058 	.word	0x20000058
 8003934:	ffff0208 	.word	0xffff0208

08003938 <memset>:
 8003938:	4402      	add	r2, r0
 800393a:	4603      	mov	r3, r0
 800393c:	4293      	cmp	r3, r2
 800393e:	d100      	bne.n	8003942 <memset+0xa>
 8003940:	4770      	bx	lr
 8003942:	f803 1b01 	strb.w	r1, [r3], #1
 8003946:	e7f9      	b.n	800393c <memset+0x4>

08003948 <strchr>:
 8003948:	b2c9      	uxtb	r1, r1
 800394a:	4603      	mov	r3, r0
 800394c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003950:	b11a      	cbz	r2, 800395a <strchr+0x12>
 8003952:	428a      	cmp	r2, r1
 8003954:	d1f9      	bne.n	800394a <strchr+0x2>
 8003956:	4618      	mov	r0, r3
 8003958:	4770      	bx	lr
 800395a:	2900      	cmp	r1, #0
 800395c:	bf18      	it	ne
 800395e:	2300      	movne	r3, #0
 8003960:	e7f9      	b.n	8003956 <strchr+0xe>

08003962 <strstr>:
 8003962:	780a      	ldrb	r2, [r1, #0]
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	b96a      	cbnz	r2, 8003984 <strstr+0x22>
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	429a      	cmp	r2, r3
 800396c:	d109      	bne.n	8003982 <strstr+0x20>
 800396e:	460c      	mov	r4, r1
 8003970:	4605      	mov	r5, r0
 8003972:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f6      	beq.n	8003968 <strstr+0x6>
 800397a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800397e:	429e      	cmp	r6, r3
 8003980:	d0f7      	beq.n	8003972 <strstr+0x10>
 8003982:	3001      	adds	r0, #1
 8003984:	7803      	ldrb	r3, [r0, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1ef      	bne.n	800396a <strstr+0x8>
 800398a:	4618      	mov	r0, r3
 800398c:	e7ec      	b.n	8003968 <strstr+0x6>
	...

08003990 <__errno>:
 8003990:	4b01      	ldr	r3, [pc, #4]	; (8003998 <__errno+0x8>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000058 	.word	0x20000058

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4d0d      	ldr	r5, [pc, #52]	; (80039d4 <__libc_init_array+0x38>)
 80039a0:	4c0d      	ldr	r4, [pc, #52]	; (80039d8 <__libc_init_array+0x3c>)
 80039a2:	1b64      	subs	r4, r4, r5
 80039a4:	10a4      	asrs	r4, r4, #2
 80039a6:	2600      	movs	r6, #0
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	4d0b      	ldr	r5, [pc, #44]	; (80039dc <__libc_init_array+0x40>)
 80039ae:	4c0c      	ldr	r4, [pc, #48]	; (80039e0 <__libc_init_array+0x44>)
 80039b0:	f000 fc6a 	bl	8004288 <_init>
 80039b4:	1b64      	subs	r4, r4, r5
 80039b6:	10a4      	asrs	r4, r4, #2
 80039b8:	2600      	movs	r6, #0
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	080047e8 	.word	0x080047e8
 80039d8:	080047e8 	.word	0x080047e8
 80039dc:	080047e8 	.word	0x080047e8
 80039e0:	080047ec 	.word	0x080047ec

080039e4 <__retarget_lock_acquire_recursive>:
 80039e4:	4770      	bx	lr

080039e6 <__retarget_lock_release_recursive>:
 80039e6:	4770      	bx	lr

080039e8 <_free_r>:
 80039e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ea:	2900      	cmp	r1, #0
 80039ec:	d044      	beq.n	8003a78 <_free_r+0x90>
 80039ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f2:	9001      	str	r0, [sp, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f1a1 0404 	sub.w	r4, r1, #4
 80039fa:	bfb8      	it	lt
 80039fc:	18e4      	addlt	r4, r4, r3
 80039fe:	f000 f8df 	bl	8003bc0 <__malloc_lock>
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <_free_r+0x94>)
 8003a04:	9801      	ldr	r0, [sp, #4]
 8003a06:	6813      	ldr	r3, [r2, #0]
 8003a08:	b933      	cbnz	r3, 8003a18 <_free_r+0x30>
 8003a0a:	6063      	str	r3, [r4, #4]
 8003a0c:	6014      	str	r4, [r2, #0]
 8003a0e:	b003      	add	sp, #12
 8003a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a14:	f000 b8da 	b.w	8003bcc <__malloc_unlock>
 8003a18:	42a3      	cmp	r3, r4
 8003a1a:	d908      	bls.n	8003a2e <_free_r+0x46>
 8003a1c:	6825      	ldr	r5, [r4, #0]
 8003a1e:	1961      	adds	r1, r4, r5
 8003a20:	428b      	cmp	r3, r1
 8003a22:	bf01      	itttt	eq
 8003a24:	6819      	ldreq	r1, [r3, #0]
 8003a26:	685b      	ldreq	r3, [r3, #4]
 8003a28:	1949      	addeq	r1, r1, r5
 8003a2a:	6021      	streq	r1, [r4, #0]
 8003a2c:	e7ed      	b.n	8003a0a <_free_r+0x22>
 8003a2e:	461a      	mov	r2, r3
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b10b      	cbz	r3, 8003a38 <_free_r+0x50>
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	d9fa      	bls.n	8003a2e <_free_r+0x46>
 8003a38:	6811      	ldr	r1, [r2, #0]
 8003a3a:	1855      	adds	r5, r2, r1
 8003a3c:	42a5      	cmp	r5, r4
 8003a3e:	d10b      	bne.n	8003a58 <_free_r+0x70>
 8003a40:	6824      	ldr	r4, [r4, #0]
 8003a42:	4421      	add	r1, r4
 8003a44:	1854      	adds	r4, r2, r1
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	6011      	str	r1, [r2, #0]
 8003a4a:	d1e0      	bne.n	8003a0e <_free_r+0x26>
 8003a4c:	681c      	ldr	r4, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	6053      	str	r3, [r2, #4]
 8003a52:	440c      	add	r4, r1
 8003a54:	6014      	str	r4, [r2, #0]
 8003a56:	e7da      	b.n	8003a0e <_free_r+0x26>
 8003a58:	d902      	bls.n	8003a60 <_free_r+0x78>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	6003      	str	r3, [r0, #0]
 8003a5e:	e7d6      	b.n	8003a0e <_free_r+0x26>
 8003a60:	6825      	ldr	r5, [r4, #0]
 8003a62:	1961      	adds	r1, r4, r5
 8003a64:	428b      	cmp	r3, r1
 8003a66:	bf04      	itt	eq
 8003a68:	6819      	ldreq	r1, [r3, #0]
 8003a6a:	685b      	ldreq	r3, [r3, #4]
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	bf04      	itt	eq
 8003a70:	1949      	addeq	r1, r1, r5
 8003a72:	6021      	streq	r1, [r4, #0]
 8003a74:	6054      	str	r4, [r2, #4]
 8003a76:	e7ca      	b.n	8003a0e <_free_r+0x26>
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd30      	pop	{r4, r5, pc}
 8003a7c:	200002d0 	.word	0x200002d0

08003a80 <sbrk_aligned>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4e0e      	ldr	r6, [pc, #56]	; (8003abc <sbrk_aligned+0x3c>)
 8003a84:	460c      	mov	r4, r1
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	4605      	mov	r5, r0
 8003a8a:	b911      	cbnz	r1, 8003a92 <sbrk_aligned+0x12>
 8003a8c:	f000 fba6 	bl	80041dc <_sbrk_r>
 8003a90:	6030      	str	r0, [r6, #0]
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 fba1 	bl	80041dc <_sbrk_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d00a      	beq.n	8003ab4 <sbrk_aligned+0x34>
 8003a9e:	1cc4      	adds	r4, r0, #3
 8003aa0:	f024 0403 	bic.w	r4, r4, #3
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d007      	beq.n	8003ab8 <sbrk_aligned+0x38>
 8003aa8:	1a21      	subs	r1, r4, r0
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f000 fb96 	bl	80041dc <_sbrk_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d101      	bne.n	8003ab8 <sbrk_aligned+0x38>
 8003ab4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	200002d4 	.word	0x200002d4

08003ac0 <_malloc_r>:
 8003ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac4:	1ccd      	adds	r5, r1, #3
 8003ac6:	f025 0503 	bic.w	r5, r5, #3
 8003aca:	3508      	adds	r5, #8
 8003acc:	2d0c      	cmp	r5, #12
 8003ace:	bf38      	it	cc
 8003ad0:	250c      	movcc	r5, #12
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	db01      	blt.n	8003adc <_malloc_r+0x1c>
 8003ad8:	42a9      	cmp	r1, r5
 8003ada:	d905      	bls.n	8003ae8 <_malloc_r+0x28>
 8003adc:	230c      	movs	r3, #12
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bbc <_malloc_r+0xfc>
 8003aec:	f000 f868 	bl	8003bc0 <__malloc_lock>
 8003af0:	f8d8 3000 	ldr.w	r3, [r8]
 8003af4:	461c      	mov	r4, r3
 8003af6:	bb5c      	cbnz	r4, 8003b50 <_malloc_r+0x90>
 8003af8:	4629      	mov	r1, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	f7ff ffc0 	bl	8003a80 <sbrk_aligned>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	4604      	mov	r4, r0
 8003b04:	d155      	bne.n	8003bb2 <_malloc_r+0xf2>
 8003b06:	f8d8 4000 	ldr.w	r4, [r8]
 8003b0a:	4626      	mov	r6, r4
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d145      	bne.n	8003b9c <_malloc_r+0xdc>
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	d048      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	4631      	mov	r1, r6
 8003b18:	4638      	mov	r0, r7
 8003b1a:	eb04 0903 	add.w	r9, r4, r3
 8003b1e:	f000 fb5d 	bl	80041dc <_sbrk_r>
 8003b22:	4581      	cmp	r9, r0
 8003b24:	d13f      	bne.n	8003ba6 <_malloc_r+0xe6>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1a6d      	subs	r5, r5, r1
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f7ff ffa7 	bl	8003a80 <sbrk_aligned>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d037      	beq.n	8003ba6 <_malloc_r+0xe6>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	442b      	add	r3, r5
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d038      	beq.n	8003bb6 <_malloc_r+0xf6>
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	42a2      	cmp	r2, r4
 8003b48:	d12b      	bne.n	8003ba2 <_malloc_r+0xe2>
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xb0>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d41f      	bmi.n	8003b96 <_malloc_r+0xd6>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xca>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4638      	mov	r0, r7
 8003b72:	f104 060b 	add.w	r6, r4, #11
 8003b76:	f000 f829 	bl	8003bcc <__malloc_unlock>
 8003b7a:	f026 0607 	bic.w	r6, r6, #7
 8003b7e:	1d23      	adds	r3, r4, #4
 8003b80:	1af2      	subs	r2, r6, r3
 8003b82:	d0ae      	beq.n	8003ae2 <_malloc_r+0x22>
 8003b84:	1b9b      	subs	r3, r3, r6
 8003b86:	50a3      	str	r3, [r4, r2]
 8003b88:	e7ab      	b.n	8003ae2 <_malloc_r+0x22>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	d1dd      	bne.n	8003b4c <_malloc_r+0x8c>
 8003b90:	f8c8 2000 	str.w	r2, [r8]
 8003b94:	e7ec      	b.n	8003b70 <_malloc_r+0xb0>
 8003b96:	4623      	mov	r3, r4
 8003b98:	6864      	ldr	r4, [r4, #4]
 8003b9a:	e7ac      	b.n	8003af6 <_malloc_r+0x36>
 8003b9c:	4634      	mov	r4, r6
 8003b9e:	6876      	ldr	r6, [r6, #4]
 8003ba0:	e7b4      	b.n	8003b0c <_malloc_r+0x4c>
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	e7cc      	b.n	8003b40 <_malloc_r+0x80>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4638      	mov	r0, r7
 8003bac:	f000 f80e 	bl	8003bcc <__malloc_unlock>
 8003bb0:	e797      	b.n	8003ae2 <_malloc_r+0x22>
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	e7dc      	b.n	8003b70 <_malloc_r+0xb0>
 8003bb6:	605b      	str	r3, [r3, #4]
 8003bb8:	deff      	udf	#255	; 0xff
 8003bba:	bf00      	nop
 8003bbc:	200002d0 	.word	0x200002d0

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bf0f 	b.w	80039e4 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	200002cc 	.word	0x200002cc

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bf0a 	b.w	80039e6 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	200002cc 	.word	0x200002cc

08003bd8 <__ssputs_r>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	688e      	ldr	r6, [r1, #8]
 8003bde:	461f      	mov	r7, r3
 8003be0:	42be      	cmp	r6, r7
 8003be2:	680b      	ldr	r3, [r1, #0]
 8003be4:	4682      	mov	sl, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4690      	mov	r8, r2
 8003bea:	d82c      	bhi.n	8003c46 <__ssputs_r+0x6e>
 8003bec:	898a      	ldrh	r2, [r1, #12]
 8003bee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf2:	d026      	beq.n	8003c42 <__ssputs_r+0x6a>
 8003bf4:	6965      	ldr	r5, [r4, #20]
 8003bf6:	6909      	ldr	r1, [r1, #16]
 8003bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bfc:	eba3 0901 	sub.w	r9, r3, r1
 8003c00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c04:	1c7b      	adds	r3, r7, #1
 8003c06:	444b      	add	r3, r9
 8003c08:	106d      	asrs	r5, r5, #1
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	bf38      	it	cc
 8003c0e:	461d      	movcc	r5, r3
 8003c10:	0553      	lsls	r3, r2, #21
 8003c12:	d527      	bpl.n	8003c64 <__ssputs_r+0x8c>
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7ff ff53 	bl	8003ac0 <_malloc_r>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	b360      	cbz	r0, 8003c78 <__ssputs_r+0xa0>
 8003c1e:	6921      	ldr	r1, [r4, #16]
 8003c20:	464a      	mov	r2, r9
 8003c22:	f000 faeb 	bl	80041fc <memcpy>
 8003c26:	89a3      	ldrh	r3, [r4, #12]
 8003c28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	81a3      	strh	r3, [r4, #12]
 8003c32:	6126      	str	r6, [r4, #16]
 8003c34:	6165      	str	r5, [r4, #20]
 8003c36:	444e      	add	r6, r9
 8003c38:	eba5 0509 	sub.w	r5, r5, r9
 8003c3c:	6026      	str	r6, [r4, #0]
 8003c3e:	60a5      	str	r5, [r4, #8]
 8003c40:	463e      	mov	r6, r7
 8003c42:	42be      	cmp	r6, r7
 8003c44:	d900      	bls.n	8003c48 <__ssputs_r+0x70>
 8003c46:	463e      	mov	r6, r7
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	f000 faab 	bl	80041a8 <memmove>
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	1b9b      	subs	r3, r3, r6
 8003c56:	60a3      	str	r3, [r4, #8]
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	4433      	add	r3, r6
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	462a      	mov	r2, r5
 8003c66:	f000 fad7 	bl	8004218 <_realloc_r>
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1e0      	bne.n	8003c32 <__ssputs_r+0x5a>
 8003c70:	6921      	ldr	r1, [r4, #16]
 8003c72:	4650      	mov	r0, sl
 8003c74:	f7ff feb8 	bl	80039e8 <_free_r>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	f8ca 3000 	str.w	r3, [sl]
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	e7e9      	b.n	8003c60 <__ssputs_r+0x88>

08003c8c <_svfiprintf_r>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	4698      	mov	r8, r3
 8003c92:	898b      	ldrh	r3, [r1, #12]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	b09d      	sub	sp, #116	; 0x74
 8003c98:	4607      	mov	r7, r0
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	d50e      	bpl.n	8003cbe <_svfiprintf_r+0x32>
 8003ca0:	690b      	ldr	r3, [r1, #16]
 8003ca2:	b963      	cbnz	r3, 8003cbe <_svfiprintf_r+0x32>
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	f7ff ff0b 	bl	8003ac0 <_malloc_r>
 8003caa:	6028      	str	r0, [r5, #0]
 8003cac:	6128      	str	r0, [r5, #16]
 8003cae:	b920      	cbnz	r0, 8003cba <_svfiprintf_r+0x2e>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	e0d0      	b.n	8003e5c <_svfiprintf_r+0x1d0>
 8003cba:	2340      	movs	r3, #64	; 0x40
 8003cbc:	616b      	str	r3, [r5, #20]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc2:	2320      	movs	r3, #32
 8003cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ccc:	2330      	movs	r3, #48	; 0x30
 8003cce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e74 <_svfiprintf_r+0x1e8>
 8003cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cd6:	f04f 0901 	mov.w	r9, #1
 8003cda:	4623      	mov	r3, r4
 8003cdc:	469a      	mov	sl, r3
 8003cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce2:	b10a      	cbz	r2, 8003ce8 <_svfiprintf_r+0x5c>
 8003ce4:	2a25      	cmp	r2, #37	; 0x25
 8003ce6:	d1f9      	bne.n	8003cdc <_svfiprintf_r+0x50>
 8003ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cec:	d00b      	beq.n	8003d06 <_svfiprintf_r+0x7a>
 8003cee:	465b      	mov	r3, fp
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f7ff ff6f 	bl	8003bd8 <__ssputs_r>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f000 80a9 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d02:	445a      	add	r2, fp
 8003d04:	9209      	str	r2, [sp, #36]	; 0x24
 8003d06:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80a1 	beq.w	8003e52 <_svfiprintf_r+0x1c6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	f04f 32ff 	mov.w	r2, #4294967295
 8003d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d1a:	f10a 0a01 	add.w	sl, sl, #1
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	9307      	str	r3, [sp, #28]
 8003d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d26:	931a      	str	r3, [sp, #104]	; 0x68
 8003d28:	4654      	mov	r4, sl
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d30:	4850      	ldr	r0, [pc, #320]	; (8003e74 <_svfiprintf_r+0x1e8>)
 8003d32:	f7fc fa5d 	bl	80001f0 <memchr>
 8003d36:	9a04      	ldr	r2, [sp, #16]
 8003d38:	b9d8      	cbnz	r0, 8003d72 <_svfiprintf_r+0xe6>
 8003d3a:	06d0      	lsls	r0, r2, #27
 8003d3c:	bf44      	itt	mi
 8003d3e:	2320      	movmi	r3, #32
 8003d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d44:	0711      	lsls	r1, r2, #28
 8003d46:	bf44      	itt	mi
 8003d48:	232b      	movmi	r3, #43	; 0x2b
 8003d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d52:	2b2a      	cmp	r3, #42	; 0x2a
 8003d54:	d015      	beq.n	8003d82 <_svfiprintf_r+0xf6>
 8003d56:	9a07      	ldr	r2, [sp, #28]
 8003d58:	4654      	mov	r4, sl
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f04f 0c0a 	mov.w	ip, #10
 8003d60:	4621      	mov	r1, r4
 8003d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d66:	3b30      	subs	r3, #48	; 0x30
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d94d      	bls.n	8003e08 <_svfiprintf_r+0x17c>
 8003d6c:	b1b0      	cbz	r0, 8003d9c <_svfiprintf_r+0x110>
 8003d6e:	9207      	str	r2, [sp, #28]
 8003d70:	e014      	b.n	8003d9c <_svfiprintf_r+0x110>
 8003d72:	eba0 0308 	sub.w	r3, r0, r8
 8003d76:	fa09 f303 	lsl.w	r3, r9, r3
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	46a2      	mov	sl, r4
 8003d80:	e7d2      	b.n	8003d28 <_svfiprintf_r+0x9c>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	1d19      	adds	r1, r3, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	9103      	str	r1, [sp, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bfbb      	ittet	lt
 8003d8e:	425b      	neglt	r3, r3
 8003d90:	f042 0202 	orrlt.w	r2, r2, #2
 8003d94:	9307      	strge	r3, [sp, #28]
 8003d96:	9307      	strlt	r3, [sp, #28]
 8003d98:	bfb8      	it	lt
 8003d9a:	9204      	strlt	r2, [sp, #16]
 8003d9c:	7823      	ldrb	r3, [r4, #0]
 8003d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003da0:	d10c      	bne.n	8003dbc <_svfiprintf_r+0x130>
 8003da2:	7863      	ldrb	r3, [r4, #1]
 8003da4:	2b2a      	cmp	r3, #42	; 0x2a
 8003da6:	d134      	bne.n	8003e12 <_svfiprintf_r+0x186>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	9203      	str	r2, [sp, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfb8      	it	lt
 8003db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003db8:	3402      	adds	r4, #2
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e84 <_svfiprintf_r+0x1f8>
 8003dc0:	7821      	ldrb	r1, [r4, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f7fc fa13 	bl	80001f0 <memchr>
 8003dca:	b138      	cbz	r0, 8003ddc <_svfiprintf_r+0x150>
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	eba0 000a 	sub.w	r0, r0, sl
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	4082      	lsls	r2, r0
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	3401      	adds	r4, #1
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de0:	4825      	ldr	r0, [pc, #148]	; (8003e78 <_svfiprintf_r+0x1ec>)
 8003de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003de6:	2206      	movs	r2, #6
 8003de8:	f7fc fa02 	bl	80001f0 <memchr>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d038      	beq.n	8003e62 <_svfiprintf_r+0x1d6>
 8003df0:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <_svfiprintf_r+0x1f0>)
 8003df2:	bb1b      	cbnz	r3, 8003e3c <_svfiprintf_r+0x1b0>
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	3307      	adds	r3, #7
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	9303      	str	r3, [sp, #12]
 8003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e02:	4433      	add	r3, r6
 8003e04:	9309      	str	r3, [sp, #36]	; 0x24
 8003e06:	e768      	b.n	8003cda <_svfiprintf_r+0x4e>
 8003e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7a6      	b.n	8003d60 <_svfiprintf_r+0xd4>
 8003e12:	2300      	movs	r3, #0
 8003e14:	3401      	adds	r4, #1
 8003e16:	9305      	str	r3, [sp, #20]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 0c0a 	mov.w	ip, #10
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e24:	3a30      	subs	r2, #48	; 0x30
 8003e26:	2a09      	cmp	r2, #9
 8003e28:	d903      	bls.n	8003e32 <_svfiprintf_r+0x1a6>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0c6      	beq.n	8003dbc <_svfiprintf_r+0x130>
 8003e2e:	9105      	str	r1, [sp, #20]
 8003e30:	e7c4      	b.n	8003dbc <_svfiprintf_r+0x130>
 8003e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e36:	4604      	mov	r4, r0
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f0      	b.n	8003e1e <_svfiprintf_r+0x192>
 8003e3c:	ab03      	add	r3, sp, #12
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e44:	a904      	add	r1, sp, #16
 8003e46:	4638      	mov	r0, r7
 8003e48:	f3af 8000 	nop.w
 8003e4c:	1c42      	adds	r2, r0, #1
 8003e4e:	4606      	mov	r6, r0
 8003e50:	d1d6      	bne.n	8003e00 <_svfiprintf_r+0x174>
 8003e52:	89ab      	ldrh	r3, [r5, #12]
 8003e54:	065b      	lsls	r3, r3, #25
 8003e56:	f53f af2d 	bmi.w	8003cb4 <_svfiprintf_r+0x28>
 8003e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e5c:	b01d      	add	sp, #116	; 0x74
 8003e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e62:	ab03      	add	r3, sp, #12
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	462a      	mov	r2, r5
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_svfiprintf_r+0x1f4>)
 8003e6a:	a904      	add	r1, sp, #16
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f000 f879 	bl	8003f64 <_printf_i>
 8003e72:	e7eb      	b.n	8003e4c <_svfiprintf_r+0x1c0>
 8003e74:	080047ac 	.word	0x080047ac
 8003e78:	080047b6 	.word	0x080047b6
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003bd9 	.word	0x08003bd9
 8003e84:	080047b2 	.word	0x080047b2

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed4:	1e13      	subs	r3, r2, #0
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	f003 0306 	and.w	r3, r3, #6
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	bf02      	ittt	eq
 8003efa:	68e5      	ldreq	r5, [r4, #12]
 8003efc:	6833      	ldreq	r3, [r6, #0]
 8003efe:	1aed      	subeq	r5, r5, r3
 8003f00:	68a3      	ldr	r3, [r4, #8]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	; 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	7e0f      	ldrb	r7, [r1, #24]
 8003f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f6c:	2f78      	cmp	r7, #120	; 0x78
 8003f6e:	4691      	mov	r9, r2
 8003f70:	4680      	mov	r8, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	469a      	mov	sl, r3
 8003f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d4 	beq.w	800412e <_printf_i+0x1ca>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80c0 	beq.w	800410c <_printf_i+0x1a8>
 8003f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a101      	add	r1, pc, #4	; (adr r1, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	08004115 	.word	0x08004115
 8003fd4:	0800403d 	.word	0x0800403d
 8003fd8:	080040cf 	.word	0x080040cf
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	08004137 	.word	0x08004137
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	0800403d 	.word	0x0800403d
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	080040d7 	.word	0x080040d7
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e09f      	b.n	8004150 <_printf_i+0x1ec>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	0607      	lsls	r7, r0, #24
 8004016:	f103 0104 	add.w	r1, r3, #4
 800401a:	6029      	str	r1, [r5, #0]
 800401c:	d501      	bpl.n	8004022 <_printf_i+0xbe>
 800401e:	681e      	ldr	r6, [r3, #0]
 8004020:	e003      	b.n	800402a <_printf_i+0xc6>
 8004022:	0646      	lsls	r6, r0, #25
 8004024:	d5fb      	bpl.n	800401e <_printf_i+0xba>
 8004026:	f9b3 6000 	ldrsh.w	r6, [r3]
 800402a:	2e00      	cmp	r6, #0
 800402c:	da03      	bge.n	8004036 <_printf_i+0xd2>
 800402e:	232d      	movs	r3, #45	; 0x2d
 8004030:	4276      	negs	r6, r6
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004036:	485a      	ldr	r0, [pc, #360]	; (80041a0 <_printf_i+0x23c>)
 8004038:	230a      	movs	r3, #10
 800403a:	e012      	b.n	8004062 <_printf_i+0xfe>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	6820      	ldr	r0, [r4, #0]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	6029      	str	r1, [r5, #0]
 8004044:	0605      	lsls	r5, r0, #24
 8004046:	d501      	bpl.n	800404c <_printf_i+0xe8>
 8004048:	681e      	ldr	r6, [r3, #0]
 800404a:	e002      	b.n	8004052 <_printf_i+0xee>
 800404c:	0641      	lsls	r1, r0, #25
 800404e:	d5fb      	bpl.n	8004048 <_printf_i+0xe4>
 8004050:	881e      	ldrh	r6, [r3, #0]
 8004052:	4853      	ldr	r0, [pc, #332]	; (80041a0 <_printf_i+0x23c>)
 8004054:	2f6f      	cmp	r7, #111	; 0x6f
 8004056:	bf0c      	ite	eq
 8004058:	2308      	moveq	r3, #8
 800405a:	230a      	movne	r3, #10
 800405c:	2100      	movs	r1, #0
 800405e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004062:	6865      	ldr	r5, [r4, #4]
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	2d00      	cmp	r5, #0
 8004068:	bfa2      	ittt	ge
 800406a:	6821      	ldrge	r1, [r4, #0]
 800406c:	f021 0104 	bicge.w	r1, r1, #4
 8004070:	6021      	strge	r1, [r4, #0]
 8004072:	b90e      	cbnz	r6, 8004078 <_printf_i+0x114>
 8004074:	2d00      	cmp	r5, #0
 8004076:	d04b      	beq.n	8004110 <_printf_i+0x1ac>
 8004078:	4615      	mov	r5, r2
 800407a:	fbb6 f1f3 	udiv	r1, r6, r3
 800407e:	fb03 6711 	mls	r7, r3, r1, r6
 8004082:	5dc7      	ldrb	r7, [r0, r7]
 8004084:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004088:	4637      	mov	r7, r6
 800408a:	42bb      	cmp	r3, r7
 800408c:	460e      	mov	r6, r1
 800408e:	d9f4      	bls.n	800407a <_printf_i+0x116>
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10b      	bne.n	80040ac <_printf_i+0x148>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	07de      	lsls	r6, r3, #31
 8004098:	d508      	bpl.n	80040ac <_printf_i+0x148>
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	6861      	ldr	r1, [r4, #4]
 800409e:	4299      	cmp	r1, r3
 80040a0:	bfde      	ittt	le
 80040a2:	2330      	movle	r3, #48	; 0x30
 80040a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ac:	1b52      	subs	r2, r2, r5
 80040ae:	6122      	str	r2, [r4, #16]
 80040b0:	f8cd a000 	str.w	sl, [sp]
 80040b4:	464b      	mov	r3, r9
 80040b6:	aa03      	add	r2, sp, #12
 80040b8:	4621      	mov	r1, r4
 80040ba:	4640      	mov	r0, r8
 80040bc:	f7ff fee4 	bl	8003e88 <_printf_common>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d14a      	bne.n	800415a <_printf_i+0x1f6>
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	b004      	add	sp, #16
 80040ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	4833      	ldr	r0, [pc, #204]	; (80041a4 <_printf_i+0x240>)
 80040d8:	2778      	movs	r7, #120	; 0x78
 80040da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	6829      	ldr	r1, [r5, #0]
 80040e2:	061f      	lsls	r7, r3, #24
 80040e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80040e8:	d402      	bmi.n	80040f0 <_printf_i+0x18c>
 80040ea:	065f      	lsls	r7, r3, #25
 80040ec:	bf48      	it	mi
 80040ee:	b2b6      	uxthmi	r6, r6
 80040f0:	07df      	lsls	r7, r3, #31
 80040f2:	bf48      	it	mi
 80040f4:	f043 0320 	orrmi.w	r3, r3, #32
 80040f8:	6029      	str	r1, [r5, #0]
 80040fa:	bf48      	it	mi
 80040fc:	6023      	strmi	r3, [r4, #0]
 80040fe:	b91e      	cbnz	r6, 8004108 <_printf_i+0x1a4>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	6023      	str	r3, [r4, #0]
 8004108:	2310      	movs	r3, #16
 800410a:	e7a7      	b.n	800405c <_printf_i+0xf8>
 800410c:	4824      	ldr	r0, [pc, #144]	; (80041a0 <_printf_i+0x23c>)
 800410e:	e7e4      	b.n	80040da <_printf_i+0x176>
 8004110:	4615      	mov	r5, r2
 8004112:	e7bd      	b.n	8004090 <_printf_i+0x12c>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6826      	ldr	r6, [r4, #0]
 8004118:	6961      	ldr	r1, [r4, #20]
 800411a:	1d18      	adds	r0, r3, #4
 800411c:	6028      	str	r0, [r5, #0]
 800411e:	0635      	lsls	r5, r6, #24
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	d501      	bpl.n	8004128 <_printf_i+0x1c4>
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	e002      	b.n	800412e <_printf_i+0x1ca>
 8004128:	0670      	lsls	r0, r6, #25
 800412a:	d5fb      	bpl.n	8004124 <_printf_i+0x1c0>
 800412c:	8019      	strh	r1, [r3, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	6123      	str	r3, [r4, #16]
 8004132:	4615      	mov	r5, r2
 8004134:	e7bc      	b.n	80040b0 <_printf_i+0x14c>
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	602a      	str	r2, [r5, #0]
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	6862      	ldr	r2, [r4, #4]
 8004140:	2100      	movs	r1, #0
 8004142:	4628      	mov	r0, r5
 8004144:	f7fc f854 	bl	80001f0 <memchr>
 8004148:	b108      	cbz	r0, 800414e <_printf_i+0x1ea>
 800414a:	1b40      	subs	r0, r0, r5
 800414c:	6060      	str	r0, [r4, #4]
 800414e:	6863      	ldr	r3, [r4, #4]
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	2300      	movs	r3, #0
 8004154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004158:	e7aa      	b.n	80040b0 <_printf_i+0x14c>
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	462a      	mov	r2, r5
 800415e:	4649      	mov	r1, r9
 8004160:	4640      	mov	r0, r8
 8004162:	47d0      	blx	sl
 8004164:	3001      	adds	r0, #1
 8004166:	d0ad      	beq.n	80040c4 <_printf_i+0x160>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	079b      	lsls	r3, r3, #30
 800416c:	d413      	bmi.n	8004196 <_printf_i+0x232>
 800416e:	68e0      	ldr	r0, [r4, #12]
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	4298      	cmp	r0, r3
 8004174:	bfb8      	it	lt
 8004176:	4618      	movlt	r0, r3
 8004178:	e7a6      	b.n	80040c8 <_printf_i+0x164>
 800417a:	2301      	movs	r3, #1
 800417c:	4632      	mov	r2, r6
 800417e:	4649      	mov	r1, r9
 8004180:	4640      	mov	r0, r8
 8004182:	47d0      	blx	sl
 8004184:	3001      	adds	r0, #1
 8004186:	d09d      	beq.n	80040c4 <_printf_i+0x160>
 8004188:	3501      	adds	r5, #1
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	9903      	ldr	r1, [sp, #12]
 800418e:	1a5b      	subs	r3, r3, r1
 8004190:	42ab      	cmp	r3, r5
 8004192:	dcf2      	bgt.n	800417a <_printf_i+0x216>
 8004194:	e7eb      	b.n	800416e <_printf_i+0x20a>
 8004196:	2500      	movs	r5, #0
 8004198:	f104 0619 	add.w	r6, r4, #25
 800419c:	e7f5      	b.n	800418a <_printf_i+0x226>
 800419e:	bf00      	nop
 80041a0:	080047bd 	.word	0x080047bd
 80041a4:	080047ce 	.word	0x080047ce

080041a8 <memmove>:
 80041a8:	4288      	cmp	r0, r1
 80041aa:	b510      	push	{r4, lr}
 80041ac:	eb01 0402 	add.w	r4, r1, r2
 80041b0:	d902      	bls.n	80041b8 <memmove+0x10>
 80041b2:	4284      	cmp	r4, r0
 80041b4:	4623      	mov	r3, r4
 80041b6:	d807      	bhi.n	80041c8 <memmove+0x20>
 80041b8:	1e43      	subs	r3, r0, #1
 80041ba:	42a1      	cmp	r1, r4
 80041bc:	d008      	beq.n	80041d0 <memmove+0x28>
 80041be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041c6:	e7f8      	b.n	80041ba <memmove+0x12>
 80041c8:	4402      	add	r2, r0
 80041ca:	4601      	mov	r1, r0
 80041cc:	428a      	cmp	r2, r1
 80041ce:	d100      	bne.n	80041d2 <memmove+0x2a>
 80041d0:	bd10      	pop	{r4, pc}
 80041d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041da:	e7f7      	b.n	80041cc <memmove+0x24>

080041dc <_sbrk_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_sbrk_r+0x1c>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fc ffbe 	bl	8001168 <_sbrk>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_sbrk_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_sbrk_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	200002c8 	.word	0x200002c8

080041fc <memcpy>:
 80041fc:	440a      	add	r2, r1
 80041fe:	4291      	cmp	r1, r2
 8004200:	f100 33ff 	add.w	r3, r0, #4294967295
 8004204:	d100      	bne.n	8004208 <memcpy+0xc>
 8004206:	4770      	bx	lr
 8004208:	b510      	push	{r4, lr}
 800420a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800420e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004212:	4291      	cmp	r1, r2
 8004214:	d1f9      	bne.n	800420a <memcpy+0xe>
 8004216:	bd10      	pop	{r4, pc}

08004218 <_realloc_r>:
 8004218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421c:	4680      	mov	r8, r0
 800421e:	4614      	mov	r4, r2
 8004220:	460e      	mov	r6, r1
 8004222:	b921      	cbnz	r1, 800422e <_realloc_r+0x16>
 8004224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	4611      	mov	r1, r2
 800422a:	f7ff bc49 	b.w	8003ac0 <_malloc_r>
 800422e:	b92a      	cbnz	r2, 800423c <_realloc_r+0x24>
 8004230:	f7ff fbda 	bl	80039e8 <_free_r>
 8004234:	4625      	mov	r5, r4
 8004236:	4628      	mov	r0, r5
 8004238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423c:	f000 f81b 	bl	8004276 <_malloc_usable_size_r>
 8004240:	4284      	cmp	r4, r0
 8004242:	4607      	mov	r7, r0
 8004244:	d802      	bhi.n	800424c <_realloc_r+0x34>
 8004246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800424a:	d812      	bhi.n	8004272 <_realloc_r+0x5a>
 800424c:	4621      	mov	r1, r4
 800424e:	4640      	mov	r0, r8
 8004250:	f7ff fc36 	bl	8003ac0 <_malloc_r>
 8004254:	4605      	mov	r5, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d0ed      	beq.n	8004236 <_realloc_r+0x1e>
 800425a:	42bc      	cmp	r4, r7
 800425c:	4622      	mov	r2, r4
 800425e:	4631      	mov	r1, r6
 8004260:	bf28      	it	cs
 8004262:	463a      	movcs	r2, r7
 8004264:	f7ff ffca 	bl	80041fc <memcpy>
 8004268:	4631      	mov	r1, r6
 800426a:	4640      	mov	r0, r8
 800426c:	f7ff fbbc 	bl	80039e8 <_free_r>
 8004270:	e7e1      	b.n	8004236 <_realloc_r+0x1e>
 8004272:	4635      	mov	r5, r6
 8004274:	e7df      	b.n	8004236 <_realloc_r+0x1e>

08004276 <_malloc_usable_size_r>:
 8004276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800427a:	1f18      	subs	r0, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfbc      	itt	lt
 8004280:	580b      	ldrlt	r3, [r1, r0]
 8004282:	18c0      	addlt	r0, r0, r3
 8004284:	4770      	bx	lr
	...

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
