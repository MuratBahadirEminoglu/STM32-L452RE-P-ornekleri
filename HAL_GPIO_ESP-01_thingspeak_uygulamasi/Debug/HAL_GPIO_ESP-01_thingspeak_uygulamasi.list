
HAL_GPIO_ESP-01_thingspeak_uygulamasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ccc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fdc  08003fdc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe4  08003fe4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000005c  08004048  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004048  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a42b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001829  00000000  00000000  0002a4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0002bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b6  00000000  00000000  0002c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219ef  00000000  00000000  0002cca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad20  00000000  00000000  0004e695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd50c  00000000  00000000  000593b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002860  00000000  00000000  001268c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00129124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e54 	.word	0x08003e54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003e54 	.word	0x08003e54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b0f8      	sub	sp, #480	; 0x1e0
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fc41 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f99b 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fa4b 	bl	8000a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 fa19 	bl	80009d4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005a2:	f000 f9e7 	bl	8000974 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char api[58] = "https://api.thingspeak.com/update?api_key=PUAP0YK403IYN5RZ";
 80005a6:	4bc0      	ldr	r3, [pc, #768]	; (80008a8 <main+0x31c>)
 80005a8:	f507 74ca 	add.w	r4, r7, #404	; 0x194
 80005ac:	461d      	mov	r5, r3
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	c403      	stmia	r4!, {r0, r1}
 80005c0:	8022      	strh	r2, [r4, #0]
   // Change PUAP0YK403IYN5RZ to your key and length 58 to new length
   uint8_t f1;
   uint32_t f2;
   char ATcommand[100];
   char toPost[150];
   uint8_t rxBuffer[150] = {0};
 80005c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80005c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	3304      	adds	r3, #4
 80005d0:	2292      	movs	r2, #146	; 0x92
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 ff95 	bl	8003504 <memset>
   uint8_t ATisOK;

   sprintf(ATcommand,"AT+RST\r\n");
 80005da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005de:	49b3      	ldr	r1, [pc, #716]	; (80008ac <main+0x320>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 ff6f 	bl	80034c4 <siprintf>
   memset(rxBuffer,0,sizeof(rxBuffer));
 80005e6:	463b      	mov	r3, r7
 80005e8:	2296      	movs	r2, #150	; 0x96
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 ff89 	bl	8003504 <memset>
   HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80005f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fdf2 	bl	80001e0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8000604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000608:	48a9      	ldr	r0, [pc, #676]	; (80008b0 <main+0x324>)
 800060a:	f002 f965 	bl	80028d8 <HAL_UART_Transmit>
   HAL_UART_Receive (&huart1, rxBuffer, 512, 100);
 800060e:	4639      	mov	r1, r7
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000616:	48a6      	ldr	r0, [pc, #664]	; (80008b0 <main+0x324>)
 8000618:	f002 f9e8 	bl	80029ec <HAL_UART_Receive>
   HAL_Delay(500);
 800061c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000620:	f000 fc76 	bl	8000f10 <HAL_Delay>

   ATisOK = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
   while(!ATisOK){
 800062a:	e030      	b.n	800068e <main+0x102>
     sprintf(ATcommand,"AT+CWMODE_CUR=1\r\n");
 800062c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000630:	49a0      	ldr	r1, [pc, #640]	; (80008b4 <main+0x328>)
 8000632:	4618      	mov	r0, r3
 8000634:	f002 ff46 	bl	80034c4 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 8000638:	463b      	mov	r3, r7
 800063a:	2296      	movs	r2, #150	; 0x96
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 ff60 	bl	8003504 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fdc9 	bl	80001e0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	4895      	ldr	r0, [pc, #596]	; (80008b0 <main+0x324>)
 800065c:	f002 f93c 	bl	80028d8 <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000660:	4639      	mov	r1, r7
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066a:	4891      	ldr	r0, [pc, #580]	; (80008b0 <main+0x324>)
 800066c:	f002 f9be 	bl	80029ec <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 8000670:	463b      	mov	r3, r7
 8000672:	4991      	ldr	r1, [pc, #580]	; (80008b8 <main+0x32c>)
 8000674:	4618      	mov	r0, r3
 8000676:	f002 ff5a 	bl	800352e <strstr>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <main+0xfa>
       ATisOK = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
     }
     HAL_Delay(500);
 8000686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068a:	f000 fc41 	bl	8000f10 <HAL_Delay>
   while(!ATisOK){
 800068e:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0ca      	beq.n	800062c <main+0xa0>
   }

   ATisOK = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
   while(!ATisOK){
 800069c:	e030      	b.n	8000700 <main+0x174>
     sprintf(ATcommand,"AT+CWJAP_CUR=\"TPU4G_8NRL\",\"31408902\"\r\n");
 800069e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006a2:	4986      	ldr	r1, [pc, #536]	; (80008bc <main+0x330>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 ff0d 	bl	80034c4 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 80006aa:	463b      	mov	r3, r7
 80006ac:	2296      	movs	r2, #150	; 0x96
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 ff27 	bl	8003504 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80006b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd90 	bl	80001e0 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	4878      	ldr	r0, [pc, #480]	; (80008b0 <main+0x324>)
 80006ce:	f002 f903 	bl	80028d8 <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 20000);
 80006d2:	4639      	mov	r1, r7
 80006d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	4874      	ldr	r0, [pc, #464]	; (80008b0 <main+0x324>)
 80006de:	f002 f985 	bl	80029ec <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 80006e2:	463b      	mov	r3, r7
 80006e4:	4974      	ldr	r1, [pc, #464]	; (80008b8 <main+0x32c>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 ff21 	bl	800352e <strstr>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <main+0x16c>
       ATisOK = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
     }
     HAL_Delay(500);
 80006f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fc:	f000 fc08 	bl	8000f10 <HAL_Delay>
   while(!ATisOK){
 8000700:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0ca      	beq.n	800069e <main+0x112>
   }

   ATisOK = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
   while(!ATisOK){
 800070e:	e030      	b.n	8000772 <main+0x1e6>
     sprintf(ATcommand,"AT+CIPMUX=0\r\n");
 8000710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000714:	496a      	ldr	r1, [pc, #424]	; (80008c0 <main+0x334>)
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fed4 	bl	80034c4 <siprintf>
     memset(rxBuffer,0,sizeof(rxBuffer));
 800071c:	463b      	mov	r3, r7
 800071e:	2296      	movs	r2, #150	; 0x96
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 feee 	bl	8003504 <memset>
     HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd57 	bl	80001e0 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	485c      	ldr	r0, [pc, #368]	; (80008b0 <main+0x324>)
 8000740:	f002 f8ca 	bl	80028d8 <HAL_UART_Transmit>
     HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000744:	4639      	mov	r1, r7
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074e:	4858      	ldr	r0, [pc, #352]	; (80008b0 <main+0x324>)
 8000750:	f002 f94c 	bl	80029ec <HAL_UART_Receive>
     if(strstr((char *)rxBuffer,"OK")){
 8000754:	463b      	mov	r3, r7
 8000756:	4958      	ldr	r1, [pc, #352]	; (80008b8 <main+0x32c>)
 8000758:	4618      	mov	r0, r3
 800075a:	f002 fee8 	bl	800352e <strstr>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <main+0x1de>
       ATisOK = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
     }
     HAL_Delay(500);
 800076a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076e:	f000 fbcf 	bl	8000f10 <HAL_Delay>
   while(!ATisOK){
 8000772:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0ca      	beq.n	8000710 <main+0x184>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(f1=0; f1<101; f1=f1+20)
 800077a:	2300      	movs	r3, #0
 800077c:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 8000780:	e08b      	b.n	800089a <main+0x30e>
	      {
	        sprintf(ATcommand,"AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000786:	494f      	ldr	r1, [pc, #316]	; (80008c4 <main+0x338>)
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fe9b 	bl	80034c4 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 800078e:	463b      	mov	r3, r7
 8000790:	2296      	movs	r2, #150	; 0x96
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f002 feb5 	bl	8003504 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800079a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd1e 	bl	80001e0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	483f      	ldr	r0, [pc, #252]	; (80008b0 <main+0x324>)
 80007b2:	f002 f891 	bl	80028d8 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 80007b6:	4639      	mov	r1, r7
 80007b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	483b      	ldr	r0, [pc, #236]	; (80008b0 <main+0x324>)
 80007c2:	f002 f913 	bl	80029ec <HAL_UART_Receive>
	        HAL_Delay(500);
 80007c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ca:	f000 fba1 	bl	8000f10 <HAL_Delay>

	        f2 = HAL_GetTick();
 80007ce:	f000 fb93 	bl	8000ef8 <HAL_GetTick>
 80007d2:	f8c7 01d0 	str.w	r0, [r7, #464]	; 0x1d0
	        sprintf(toPost,"GET %s&field1=%d&field2=%lu\r\n",api,f1,f2);
 80007d6:	f897 11d7 	ldrb.w	r1, [r7, #471]	; 0x1d7
 80007da:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80007de:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80007e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	460b      	mov	r3, r1
 80007ea:	4937      	ldr	r1, [pc, #220]	; (80008c8 <main+0x33c>)
 80007ec:	f002 fe6a 	bl	80034c4 <siprintf>
	        sprintf(ATcommand,"AT+CIPSEND=%d\r\n",strlen(toPost));
 80007f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcf3 	bl	80001e0 <strlen>
 80007fa:	4602      	mov	r2, r0
 80007fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000800:	4932      	ldr	r1, [pc, #200]	; (80008cc <main+0x340>)
 8000802:	4618      	mov	r0, r3
 8000804:	f002 fe5e 	bl	80034c4 <siprintf>
	        memset(rxBuffer,0,sizeof(rxBuffer));
 8000808:	463b      	mov	r3, r7
 800080a:	2296      	movs	r2, #150	; 0x96
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fe78 	bl	8003504 <memset>
	        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fce1 	bl	80001e0 <strlen>
 800081e:	4603      	mov	r3, r0
 8000820:	b29a      	uxth	r2, r3
 8000822:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <main+0x324>)
 800082c:	f002 f854 	bl	80028d8 <HAL_UART_Transmit>
	        HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000830:	4639      	mov	r1, r7
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083a:	481d      	ldr	r0, [pc, #116]	; (80008b0 <main+0x324>)
 800083c:	f002 f8d6 	bl	80029ec <HAL_UART_Receive>
	        if(strstr((char *)rxBuffer,">"))
 8000840:	463b      	mov	r3, r7
 8000842:	213e      	movs	r1, #62	; 0x3e
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fe65 	bl	8003514 <strchr>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d01b      	beq.n	8000888 <main+0x2fc>
	        {
	          memset(rxBuffer,0,sizeof(rxBuffer));
 8000850:	463b      	mov	r3, r7
 8000852:	2296      	movs	r2, #150	; 0x96
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fe54 	bl	8003504 <memset>
	          HAL_UART_Transmit(&huart1,(uint8_t *)toPost,strlen(toPost),1000);
 800085c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcbd 	bl	80001e0 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	480f      	ldr	r0, [pc, #60]	; (80008b0 <main+0x324>)
 8000874:	f002 f830 	bl	80028d8 <HAL_UART_Transmit>
	          HAL_UART_Receive (&huart1, rxBuffer, 512, 1000);
 8000878:	4639      	mov	r1, r7
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <main+0x324>)
 8000884:	f002 f8b2 	bl	80029ec <HAL_UART_Receive>
	        }
	        HAL_Delay(15000);
 8000888:	f643 2098 	movw	r0, #15000	; 0x3a98
 800088c:	f000 fb40 	bl	8000f10 <HAL_Delay>
	  for(f1=0; f1<101; f1=f1+20)
 8000890:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8000894:	3314      	adds	r3, #20
 8000896:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 800089a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800089e:	2b64      	cmp	r3, #100	; 0x64
 80008a0:	f67f af6f 	bls.w	8000782 <main+0x1f6>
 80008a4:	e769      	b.n	800077a <main+0x1ee>
 80008a6:	bf00      	nop
 80008a8:	08003f24 	.word	0x08003f24
 80008ac:	08003e6c 	.word	0x08003e6c
 80008b0:	20000078 	.word	0x20000078
 80008b4:	08003e78 	.word	0x08003e78
 80008b8:	08003e8c 	.word	0x08003e8c
 80008bc:	08003e90 	.word	0x08003e90
 80008c0:	08003eb8 	.word	0x08003eb8
 80008c4:	08003ec8 	.word	0x08003ec8
 80008c8:	08003ef4 	.word	0x08003ef4
 80008cc:	08003f14 	.word	0x08003f14

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b096      	sub	sp, #88	; 0x58
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2244      	movs	r2, #68	; 0x44
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fe10 	bl	8003504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f6:	f000 fdb5 	bl	8001464 <HAL_PWREx_ControlVoltageScaling>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000900:	f000 f922 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000916:	2302      	movs	r3, #2
 8000918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800091e:	230a      	movs	r3, #10
 8000920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000922:	2307      	movs	r3, #7
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000926:	2302      	movs	r3, #2
 8000928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fdec 	bl	8001510 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800093e:	f000 f903 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2303      	movs	r3, #3
 8000948:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	2104      	movs	r1, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f9ec 	bl	8001d38 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000966:	f000 f8ef 	bl	8000b48 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3758      	adds	r7, #88	; 0x58
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART1_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART1_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART1_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x58>)
 80009b8:	f001 ff40 	bl	800283c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f8c1 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000078 	.word	0x20000078
 80009d0:	40013800 	.word	0x40013800

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f001 ff10 	bl	800283c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f891 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_GPIO_Init+0x108>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	21b0      	movs	r1, #176	; 0xb0
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 fcb1 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abc:	4820      	ldr	r0, [pc, #128]	; (8000b40 <MX_GPIO_Init+0x10c>)
 8000abe:	f000 fcab 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481a      	ldr	r0, [pc, #104]	; (8000b44 <MX_GPIO_Init+0x110>)
 8000ada:	f000 fb23 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000ade:	23b0      	movs	r3, #176	; 0xb0
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fb14 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 fb07 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0x10c>)
 8000b30:	f000 faf8 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x44>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x44>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0a6      	sub	sp, #152	; 0x98
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2268      	movs	r2, #104	; 0x68
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 fca1 	bl	8003504 <memset>
  if(huart->Instance==USART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a43      	ldr	r2, [pc, #268]	; (8000cd4 <HAL_UART_MspInit+0x138>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d13d      	bne.n	8000c48 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fad1 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ffb0 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bec:	4a3a      	ldr	r2, [pc, #232]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf4:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	4a34      	ldr	r2, [pc, #208]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c32:	2307      	movs	r3, #7
 8000c34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f000 fa6f 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c46:	e040      	b.n	8000cca <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <HAL_UART_MspInit+0x140>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d13b      	bne.n	8000cca <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fa8e 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8000c6a:	f7ff ff6d 	bl	8000b48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_UART_MspInit+0x13c>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 fa2d 	bl	8001124 <HAL_GPIO_Init>
}
 8000cca:	bf00      	nop
 8000ccc:	3798      	adds	r7, #152	; 0x98
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f8d0 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <_sbrk+0x5c>)
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <_sbrk+0x60>)
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d102      	bne.n	8000d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <_sbrk+0x64>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <_sbrk+0x68>)
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d207      	bcs.n	8000d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d64:	f002 fbfa 	bl	800355c <__errno>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	e009      	b.n	8000d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <_sbrk+0x64>)
 8000d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20028000 	.word	0x20028000
 8000d94:	00000400 	.word	0x00000400
 8000d98:	20000188 	.word	0x20000188
 8000d9c:	200002d8 	.word	0x200002d8

08000da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc8:	f7ff ffea 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 fbb9 	bl	8003568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df6:	f7ff fbc9 	bl	800058c <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dfc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e08:	08003fec 	.word	0x08003fec
  ldr r2, =_sbss
 8000e0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e10:	200002d8 	.word	0x200002d8

08000e14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_Init+0x3c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_Init+0x3c>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 f944 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f80f 	bl	8000e58 <HAL_InitTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	e001      	b.n	8000e4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e46:	f7ff fe85 	bl	8000b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d023      	beq.n	8000eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_InitTick+0x70>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f941 	bl	800110a <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10f      	bne.n	8000eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d809      	bhi.n	8000ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f919 	bl	80010d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_InitTick+0x74>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e007      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e004      	b.n	8000eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e001      	b.n	8000eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000018c 	.word	0x2000018c

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000018c 	.word	0x2000018c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff47 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5c 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb0 	bl	8001078 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e154      	b.n	80013de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8146 	beq.w	80013d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d123      	bne.n	8001256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0203 	and.w	r2, r3, #3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80a0 	beq.w	80013d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	4b58      	ldr	r3, [pc, #352]	; (80013fc <HAL_GPIO_Init+0x2d8>)
 800129a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129c:	4a57      	ldr	r2, [pc, #348]	; (80013fc <HAL_GPIO_Init+0x2d8>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6613      	str	r3, [r2, #96]	; 0x60
 80012a4:	4b55      	ldr	r3, [pc, #340]	; (80013fc <HAL_GPIO_Init+0x2d8>)
 80012a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b0:	4a53      	ldr	r2, [pc, #332]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012da:	d019      	beq.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d013      	beq.n	800130c <HAL_GPIO_Init+0x1e8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_GPIO_Init+0x2e4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a47      	ldr	r2, [pc, #284]	; (800140c <HAL_GPIO_Init+0x2e8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1e0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a46      	ldr	r2, [pc, #280]	; (8001410 <HAL_GPIO_Init+0x2ec>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1dc>
 80012fc:	2304      	movs	r3, #4
 80012fe:	e008      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001300:	2307      	movs	r3, #7
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001304:	2303      	movs	r3, #3
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001310:	2300      	movs	r3, #0
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001322:	4937      	ldr	r1, [pc, #220]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001354:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800137e:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a8:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_GPIO_Init+0x2f0>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f47f aea3 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	48000400 	.word	0x48000400
 8001408:	48000800 	.word	0x48000800
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48001000 	.word	0x48001000
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001434:	e002      	b.n	800143c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_PWREx_GetVoltageRange+0x18>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40007000 	.word	0x40007000

08001464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001472:	d130      	bne.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800147c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001480:	d038      	beq.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2232      	movs	r2, #50	; 0x32
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a8:	e002      	b.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014bc:	d102      	bne.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f2      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d0:	d110      	bne.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e00f      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d007      	beq.n	80014f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40007000 	.word	0x40007000
 8001508:	20000000 	.word	0x20000000
 800150c:	431bde83 	.word	0x431bde83

08001510 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f000 bc02 	b.w	8001d28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001524:	4b96      	ldr	r3, [pc, #600]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800152e:	4b94      	ldr	r3, [pc, #592]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80e4 	beq.w	800170e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <HAL_RCC_OscConfig+0x4c>
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	f040 808b 	bne.w	800166a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b01      	cmp	r3, #1
 8001558:	f040 8087 	bne.w	800166a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800155c:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_OscConfig+0x64>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e3d9      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1a      	ldr	r2, [r3, #32]
 8001578:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_RCC_OscConfig+0x7e>
 8001584:	4b7e      	ldr	r3, [pc, #504]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800158c:	e005      	b.n	800159a <HAL_RCC_OscConfig+0x8a>
 800158e:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800159a:	4293      	cmp	r3, r2
 800159c:	d223      	bcs.n	80015e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fd8c 	bl	80020c0 <RCC_SetFlashLatencyFromMSIRange>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e3ba      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b2:	4b73      	ldr	r3, [pc, #460]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a72      	ldr	r2, [pc, #456]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b70      	ldr	r3, [pc, #448]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	496d      	ldr	r1, [pc, #436]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d0:	4b6b      	ldr	r3, [pc, #428]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	4968      	ldr	r1, [pc, #416]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e025      	b.n	8001632 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e6:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4960      	ldr	r1, [pc, #384]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001604:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	495b      	ldr	r1, [pc, #364]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fd4c 	bl	80020c0 <RCC_SetFlashLatencyFromMSIRange>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e37a      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001632:	f000 fc81 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	4950      	ldr	r1, [pc, #320]	; (8001784 <HAL_RCC_OscConfig+0x274>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	4a4e      	ldr	r2, [pc, #312]	; (8001788 <HAL_RCC_OscConfig+0x278>)
 8001650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001652:	4b4e      	ldr	r3, [pc, #312]	; (800178c <HAL_RCC_OscConfig+0x27c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fbfe 	bl	8000e58 <HAL_InitTick>
 800165c:	4603      	mov	r3, r0
 800165e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d052      	beq.n	800170c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	e35e      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d032      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001672:	4b43      	ldr	r3, [pc, #268]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a42      	ldr	r2, [pc, #264]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800167e:	f7ff fc3b 	bl	8000ef8 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001686:	f7ff fc37 	bl	8000ef8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e347      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a4:	4b36      	ldr	r3, [pc, #216]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a35      	ldr	r2, [pc, #212]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4930      	ldr	r1, [pc, #192]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c2:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	492b      	ldr	r1, [pc, #172]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
 80016d6:	e01a      	b.n	800170e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a28      	ldr	r2, [pc, #160]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc08 	bl	8000ef8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc04 	bl	8000ef8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e314      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1dc>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d073      	beq.n	8001802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x21c>
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d10e      	bne.n	8001744 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d10b      	bne.n	8001744 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d063      	beq.n	8001800 <HAL_RCC_OscConfig+0x2f0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d15f      	bne.n	8001800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e2f1      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x24c>
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e025      	b.n	80017a8 <HAL_RCC_OscConfig+0x298>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001764:	d114      	bne.n	8001790 <HAL_RCC_OscConfig+0x280>
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a02      	ldr	r2, [pc, #8]	; (8001780 <HAL_RCC_OscConfig+0x270>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e013      	b.n	80017a8 <HAL_RCC_OscConfig+0x298>
 8001780:	40021000 	.word	0x40021000
 8001784:	08003f60 	.word	0x08003f60
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004
 8001790:	4ba0      	ldr	r3, [pc, #640]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a9f      	ldr	r2, [pc, #636]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b9d      	ldr	r3, [pc, #628]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a9c      	ldr	r2, [pc, #624]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fba2 	bl	8000ef8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fb9e 	bl	8000ef8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e2ae      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ca:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2a8>
 80017d6:	e014      	b.n	8001802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb8e 	bl	8000ef8 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fb8a 	bl	8000ef8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e29a      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f2:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x2d0>
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d060      	beq.n	80018d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d005      	beq.n	8001820 <HAL_RCC_OscConfig+0x310>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	d119      	bne.n	800184e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d116      	bne.n	800184e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	4b7c      	ldr	r3, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x328>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e277      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	4973      	ldr	r1, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800184c:	e040      	b.n	80018d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d023      	beq.n	800189e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001856:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6e      	ldr	r2, [pc, #440]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff fb49 	bl	8000ef8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff fb45 	bl	8000ef8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e255      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	495f      	ldr	r1, [pc, #380]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	e018      	b.n	80018d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a5c      	ldr	r2, [pc, #368]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80018a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb25 	bl	8000ef8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb21 	bl	8000ef8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e231      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03c      	beq.n	8001956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e4:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ea:	4a4a      	ldr	r2, [pc, #296]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fb00 	bl	8000ef8 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fafc 	bl	8000ef8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e20c      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ef      	beq.n	80018fc <HAL_RCC_OscConfig+0x3ec>
 800191c:	e01b      	b.n	8001956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fae3 	bl	8000ef8 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff fadf 	bl	8000ef8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1ef      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ef      	bne.n	8001936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80a6 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001968:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198c:	2301      	movs	r3, #1
 800198e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_RCC_OscConfig+0x508>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d118      	bne.n	80019ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCC_OscConfig+0x508>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_RCC_OscConfig+0x508>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a8:	f7ff faa6 	bl	8000ef8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b0:	f7ff faa2 	bl	8000ef8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e1b2      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_RCC_OscConfig+0x508>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4d8>
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e6:	e029      	b.n	8001a3c <HAL_RCC_OscConfig+0x52c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d115      	bne.n	8001a1c <HAL_RCC_OscConfig+0x50c>
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <HAL_RCC_OscConfig+0x504>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a10:	e014      	b.n	8001a3c <HAL_RCC_OscConfig+0x52c>
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	4b9a      	ldr	r3, [pc, #616]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a99      	ldr	r2, [pc, #612]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	4b96      	ldr	r3, [pc, #600]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a32:	4a95      	ldr	r2, [pc, #596]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d016      	beq.n	8001a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fa58 	bl	8000ef8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fa54 	bl	8000ef8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e162      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	4b89      	ldr	r3, [pc, #548]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ed      	beq.n	8001a4c <HAL_RCC_OscConfig+0x53c>
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff fa41 	bl	8000ef8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fa3d 	bl	8000ef8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e14b      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	4b7d      	ldr	r3, [pc, #500]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ed      	bne.n	8001a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d01c      	beq.n	8001afe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ac4:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aca:	4a6f      	ldr	r2, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fa10 	bl	8000ef8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001adc:	f7ff fa0c 	bl	8000ef8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e11c      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ef      	beq.n	8001adc <HAL_RCC_OscConfig+0x5cc>
 8001afc:	e01b      	b.n	8001b36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b04:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f9f3 	bl	8000ef8 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b16:	f7ff f9ef 	bl	8000ef8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0ff      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b28:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80f3 	beq.w	8001d26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	f040 80c9 	bne.w	8001cdc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b4a:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0203 	and.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d12c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d123      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d113      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d109      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	085b      	lsrs	r3, r3, #1
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d06b      	beq.n	8001c90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d062      	beq.n	8001c84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0ac      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bda:	f7ff f98d 	bl	8000ef8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f989 	bl	8000ef8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e099      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x77c>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c10:	3a01      	subs	r2, #1
 8001c12:	0112      	lsls	r2, r2, #4
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c1a:	0212      	lsls	r2, r2, #8
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	3a01      	subs	r2, #1
 8001c26:	0552      	lsls	r2, r2, #21
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c2e:	0852      	lsrs	r2, r2, #1
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0652      	lsls	r2, r2, #25
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c3a:	06d2      	lsls	r2, r2, #27
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	4912      	ldr	r1, [pc, #72]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c5c:	f7ff f94c 	bl	8000ef8 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f948 	bl	8000ef8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e058      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c82:	e050      	b.n	8001d26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e04f      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d144      	bne.n	8001d26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cb4:	f7ff f920 	bl	8000ef8 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f91c 	bl	8000ef8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e02c      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x7ac>
 8001cda:	e024      	b.n	8001d26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	d01f      	beq.n	8001d22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001ce8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff f903 	bl	8000ef8 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff f8ff 	bl	8000ef8 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4905      	ldr	r1, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x820>)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x824>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
 8001d20:	e001      	b.n	8001d26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	feeefffc 	.word	0xfeeefffc

08001d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0e7      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d910      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4970      	ldr	r1, [pc, #448]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b6e      	ldr	r3, [pc, #440]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0cf      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d010      	beq.n	8001daa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d908      	bls.n	8001daa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d98:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4960      	ldr	r1, [pc, #384]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04c      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d121      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0a6      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e09a      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e08e      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e086      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4943      	ldr	r1, [pc, #268]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e20:	f7ff f86a 	bl	8000ef8 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7ff f866 	bl	8000ef8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e06e      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d010      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d208      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	492b      	ldr	r1, [pc, #172]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d210      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 0207 	bic.w	r2, r3, #7
 8001e94:	4923      	ldr	r1, [pc, #140]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e036      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4918      	ldr	r1, [pc, #96]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4910      	ldr	r1, [pc, #64]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eec:	f000 f824 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	490b      	ldr	r1, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1f4>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1fc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ffa1 	bl	8000e58 <HAL_InitTick>
 8001f16:	4603      	mov	r3, r0
 8001f18:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003f60 	.word	0x08003f60
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f46:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x34>
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d11e      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f6c:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e005      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f94:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d102      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	e004      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d134      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0xa6>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d003      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fdc:	e005      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fe0:	617b      	str	r3, [r7, #20]
      break;
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe6:	617b      	str	r3, [r7, #20]
      break;
 8001fe8:	e002      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	fb03 f202 	mul.w	r2, r3, r2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	0e5b      	lsrs	r3, r3, #25
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	3301      	adds	r3, #1
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002030:	69bb      	ldr	r3, [r7, #24]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	08003f78 	.word	0x08003f78
 8002048:	00f42400 	.word	0x00f42400
 800204c:	007a1200 	.word	0x007a1200

08002050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_RCC_GetHCLKFreq+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800206c:	f7ff fff0 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4904      	ldr	r1, [pc, #16]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	08003f70 	.word	0x08003f70

08002094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002098:	f7ff ffda 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	0adb      	lsrs	r3, r3, #11
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	4904      	ldr	r1, [pc, #16]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08003f70 	.word	0x08003f70

080020c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d8:	f7ff f9b6 	bl	8001448 <HAL_PWREx_GetVoltageRange>
 80020dc:	6178      	str	r0, [r7, #20]
 80020de:	e014      	b.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6593      	str	r3, [r2, #88]	; 0x58
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f8:	f7ff f9a6 	bl	8001448 <HAL_PWREx_GetVoltageRange>
 80020fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002110:	d10b      	bne.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d919      	bls.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2ba0      	cmp	r3, #160	; 0xa0
 800211c:	d902      	bls.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211e:	2302      	movs	r3, #2
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	e013      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002124:	2301      	movs	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e010      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d902      	bls.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e00a      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d102      	bne.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e004      	b.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b70      	cmp	r3, #112	; 0x70
 8002146:	d101      	bne.n	800214c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002148:	2301      	movs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 0207 	bic.w	r2, r3, #7
 8002154:	4909      	ldr	r1, [pc, #36]	; (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002188:	2300      	movs	r3, #0
 800218a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800218c:	2300      	movs	r3, #0
 800218e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002198:	2b00      	cmp	r3, #0
 800219a:	d031      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021a4:	d01a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021aa:	d814      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021b4:	d10f      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a5c      	ldr	r2, [pc, #368]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c2:	e00c      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fa44 	bl	8002658 <RCCEx_PLLSAI1_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d4:	e003      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	74fb      	strb	r3, [r7, #19]
      break;
 80021da:	e000      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	494e      	ldr	r1, [pc, #312]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021fa:	e001      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 809e 	beq.w	800234a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	4a3f      	ldr	r2, [pc, #252]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002232:	6593      	str	r3, [r2, #88]	; 0x58
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002240:	2301      	movs	r3, #1
 8002242:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002244:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a39      	ldr	r2, [pc, #228]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002250:	f7fe fe52 	bl	8000ef8 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002256:	e009      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002258:	f7fe fe4e 	bl	8000ef8 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d902      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	74fb      	strb	r3, [r7, #19]
        break;
 800226a:	e005      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800226c:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ef      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d15a      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227e:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002288:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01e      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	429a      	cmp	r2, r3
 8002298:	d019      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d016      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe0e 	bl	8000ef8 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	e00b      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fe0a 	bl	8000ef8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d902      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	74fb      	strb	r3, [r7, #19]
            break;
 80022f6:	e006      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ec      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002322:	e009      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
 8002328:	e006      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002338:	7c7b      	ldrb	r3, [r7, #17]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	4a9d      	ldr	r2, [pc, #628]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002356:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f023 0203 	bic.w	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4994      	ldr	r1, [pc, #592]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002378:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f023 020c 	bic.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	498c      	ldr	r1, [pc, #560]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	4983      	ldr	r1, [pc, #524]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	497b      	ldr	r1, [pc, #492]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4972      	ldr	r1, [pc, #456]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	496a      	ldr	r1, [pc, #424]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	4961      	ldr	r1, [pc, #388]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	4959      	ldr	r1, [pc, #356]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	4950      	ldr	r1, [pc, #320]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	4948      	ldr	r1, [pc, #288]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024b0:	f023 0203 	bic.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	493f      	ldr	r1, [pc, #252]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d028      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024da:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d106      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e011      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002502:	d10c      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f8a4 	bl	8002658 <RCCEx_PLLSAI1_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d028      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	491f      	ldr	r1, [pc, #124]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002548:	d106      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	e011      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f875 	bl	8002658 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02b      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d109      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	e014      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f843 	bl	8002658 <RCCEx_PLLSAI1_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01c      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	4916      	ldr	r1, [pc, #88]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260a:	d10c      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f820 	bl	8002658 <RCCEx_PLLSAI1_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002648:	7cbb      	ldrb	r3, [r7, #18]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002666:	4b74      	ldr	r3, [pc, #464]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d018      	beq.n	80026a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002672:	4b71      	ldr	r3, [pc, #452]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d10d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
       ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800268a:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
       ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d047      	beq.n	800272e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e044      	b.n	800272e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d018      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x86>
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d825      	bhi.n	80026fc <RCCEx_PLLSAI1_Config+0xa4>
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d002      	beq.n	80026ba <RCCEx_PLLSAI1_Config+0x62>
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d009      	beq.n	80026cc <RCCEx_PLLSAI1_Config+0x74>
 80026b8:	e020      	b.n	80026fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ca:	e01a      	b.n	8002702 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e013      	b.n	8002706 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ea:	4b53      	ldr	r3, [pc, #332]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026fa:	e006      	b.n	800270a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e004      	b.n	800270c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002702:	bf00      	nop
 8002704:	e002      	b.n	800270c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800270a:	bf00      	nop
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	430b      	orrs	r3, r1
 8002728:	4943      	ldr	r1, [pc, #268]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d17c      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3f      	ldr	r2, [pc, #252]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fbda 	bl	8000ef8 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002746:	e009      	b.n	800275c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002748:	f7fe fbd6 	bl	8000ef8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	73fb      	strb	r3, [r7, #15]
        break;
 800275a:	e005      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ef      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d15f      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d110      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800277c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	0211      	lsls	r1, r2, #8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	06d2      	lsls	r2, r2, #27
 800278c:	430a      	orrs	r2, r1
 800278e:	492a      	ldr	r1, [pc, #168]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
 8002794:	e027      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d112      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6892      	ldr	r2, [r2, #8]
 80027ac:	0211      	lsls	r1, r2, #8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6912      	ldr	r2, [r2, #16]
 80027b2:	0852      	lsrs	r2, r2, #1
 80027b4:	3a01      	subs	r2, #1
 80027b6:	0552      	lsls	r2, r2, #21
 80027b8:	430a      	orrs	r2, r1
 80027ba:	491f      	ldr	r1, [pc, #124]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	610b      	str	r3, [r1, #16]
 80027c0:	e011      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	0211      	lsls	r1, r2, #8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6952      	ldr	r2, [r2, #20]
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0652      	lsls	r2, r2, #25
 80027de:	430a      	orrs	r2, r1
 80027e0:	4915      	ldr	r1, [pc, #84]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fb81 	bl	8000ef8 <HAL_GetTick>
 80027f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027f8:	e009      	b.n	800280e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027fa:	f7fe fb7d 	bl	8000ef8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d902      	bls.n	800280e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	73fb      	strb	r3, [r7, #15]
          break;
 800280c:	e005      	b.n	800281a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ef      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e040      	b.n	80028d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f99c 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fc02 	bl	800308c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f979 	bl	8002b80 <UART_SetConfig>
 800288e:	4603      	mov	r3, r0
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e01b      	b.n	80028d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fc81 	bl	80031d0 <UART_CheckIdleState>
 80028ce:	4603      	mov	r3, r0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	4613      	mov	r3, r2
 80028e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d178      	bne.n	80029e2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Transmit+0x24>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e071      	b.n	80029e4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2221      	movs	r2, #33	; 0x21
 800290c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800290e:	f7fe faf3 	bl	8000ef8 <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292c:	d108      	bne.n	8002940 <HAL_UART_Transmit+0x68>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e003      	b.n	8002948 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002948:	e030      	b.n	80029ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fce3 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e03c      	b.n	80029e4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	881a      	ldrh	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800297c:	b292      	uxth	r2, r2
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	3302      	adds	r3, #2
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	e008      	b.n	800299a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	b292      	uxth	r2, r2
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3301      	adds	r3, #1
 8002998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1c8      	bne.n	800294a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fcac 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e005      	b.n	80029e4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	; 0x28
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	f040 80b6 	bne.w	8002b74 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_UART_Receive+0x28>
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0ae      	b.n	8002b76 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2222      	movs	r2, #34	; 0x22
 8002a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fa63 	bl	8000ef8 <HAL_GetTick>
 8002a32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	88fa      	ldrh	r2, [r7, #6]
 8002a38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4c:	d10e      	bne.n	8002a6c <HAL_UART_Receive+0x80>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_UART_Receive+0x76>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a60:	e02d      	b.n	8002abe <HAL_UART_Receive+0xd2>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a6a:	e028      	b.n	8002abe <HAL_UART_Receive+0xd2>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_UART_Receive+0xa4>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <HAL_UART_Receive+0x9a>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	22ff      	movs	r2, #255	; 0xff
 8002a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a84:	e01b      	b.n	8002abe <HAL_UART_Receive+0xd2>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	227f      	movs	r2, #127	; 0x7f
 8002a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a8e:	e016      	b.n	8002abe <HAL_UART_Receive+0xd2>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a98:	d10d      	bne.n	8002ab6 <HAL_UART_Receive+0xca>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Receive+0xc0>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	227f      	movs	r2, #127	; 0x7f
 8002aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002aaa:	e008      	b.n	8002abe <HAL_UART_Receive+0xd2>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	223f      	movs	r2, #63	; 0x3f
 8002ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ab4:	e003      	b.n	8002abe <HAL_UART_Receive+0xd2>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ac4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d108      	bne.n	8002ae2 <HAL_UART_Receive+0xf6>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	e003      	b.n	8002aea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002aea:	e037      	b.n	8002b5c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2120      	movs	r1, #32
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fc12 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e033      	b.n	8002b76 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10c      	bne.n	8002b2e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	8a7b      	ldrh	r3, [r7, #18]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e00d      	b.n	8002b4a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	8a7b      	ldrh	r3, [r7, #18]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1c1      	bne.n	8002aec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b84:	b08a      	sub	sp, #40	; 0x28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4ba5      	ldr	r3, [pc, #660]	; (8002e44 <UART_SetConfig+0x2c4>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a9a      	ldr	r2, [pc, #616]	; (8002e48 <UART_SetConfig+0x2c8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	4313      	orrs	r3, r2
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a91      	ldr	r2, [pc, #580]	; (8002e4c <UART_SetConfig+0x2cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d126      	bne.n	8002c58 <UART_SetConfig+0xd8>
 8002c0a:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <UART_SetConfig+0x2d0>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d81b      	bhi.n	8002c50 <UART_SetConfig+0xd0>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <UART_SetConfig+0xa0>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c41 	.word	0x08002c41
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c49 	.word	0x08002c49
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c36:	e0d6      	b.n	8002de6 <UART_SetConfig+0x266>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3e:	e0d2      	b.n	8002de6 <UART_SetConfig+0x266>
 8002c40:	2304      	movs	r3, #4
 8002c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c46:	e0ce      	b.n	8002de6 <UART_SetConfig+0x266>
 8002c48:	2308      	movs	r3, #8
 8002c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4e:	e0ca      	b.n	8002de6 <UART_SetConfig+0x266>
 8002c50:	2310      	movs	r3, #16
 8002c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c56:	e0c6      	b.n	8002de6 <UART_SetConfig+0x266>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a7d      	ldr	r2, [pc, #500]	; (8002e54 <UART_SetConfig+0x2d4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d138      	bne.n	8002cd4 <UART_SetConfig+0x154>
 8002c62:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <UART_SetConfig+0x2d0>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d82d      	bhi.n	8002ccc <UART_SetConfig+0x14c>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0xf8>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002ccd 	.word	0x08002ccd
 8002c80:	08002ccd 	.word	0x08002ccd
 8002c84:	08002ccd 	.word	0x08002ccd
 8002c88:	08002cbd 	.word	0x08002cbd
 8002c8c:	08002ccd 	.word	0x08002ccd
 8002c90:	08002ccd 	.word	0x08002ccd
 8002c94:	08002ccd 	.word	0x08002ccd
 8002c98:	08002cb5 	.word	0x08002cb5
 8002c9c:	08002ccd 	.word	0x08002ccd
 8002ca0:	08002ccd 	.word	0x08002ccd
 8002ca4:	08002ccd 	.word	0x08002ccd
 8002ca8:	08002cc5 	.word	0x08002cc5
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb2:	e098      	b.n	8002de6 <UART_SetConfig+0x266>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cba:	e094      	b.n	8002de6 <UART_SetConfig+0x266>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc2:	e090      	b.n	8002de6 <UART_SetConfig+0x266>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cca:	e08c      	b.n	8002de6 <UART_SetConfig+0x266>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd2:	e088      	b.n	8002de6 <UART_SetConfig+0x266>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5f      	ldr	r2, [pc, #380]	; (8002e58 <UART_SetConfig+0x2d8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d125      	bne.n	8002d2a <UART_SetConfig+0x1aa>
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <UART_SetConfig+0x2d0>)
 8002ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d016      	beq.n	8002d1a <UART_SetConfig+0x19a>
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d818      	bhi.n	8002d22 <UART_SetConfig+0x1a2>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d00a      	beq.n	8002d0a <UART_SetConfig+0x18a>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d814      	bhi.n	8002d22 <UART_SetConfig+0x1a2>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <UART_SetConfig+0x182>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d008      	beq.n	8002d12 <UART_SetConfig+0x192>
 8002d00:	e00f      	b.n	8002d22 <UART_SetConfig+0x1a2>
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d08:	e06d      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d10:	e069      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d12:	2304      	movs	r3, #4
 8002d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d18:	e065      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d20:	e061      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d22:	2310      	movs	r3, #16
 8002d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d28:	e05d      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <UART_SetConfig+0x2dc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d125      	bne.n	8002d80 <UART_SetConfig+0x200>
 8002d34:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <UART_SetConfig+0x2d0>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8002d40:	d016      	beq.n	8002d70 <UART_SetConfig+0x1f0>
 8002d42:	2bc0      	cmp	r3, #192	; 0xc0
 8002d44:	d818      	bhi.n	8002d78 <UART_SetConfig+0x1f8>
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d00a      	beq.n	8002d60 <UART_SetConfig+0x1e0>
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d814      	bhi.n	8002d78 <UART_SetConfig+0x1f8>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <UART_SetConfig+0x1d8>
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d008      	beq.n	8002d68 <UART_SetConfig+0x1e8>
 8002d56:	e00f      	b.n	8002d78 <UART_SetConfig+0x1f8>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5e:	e042      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e03e      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e03a      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d70:	2308      	movs	r3, #8
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e036      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e032      	b.n	8002de6 <UART_SetConfig+0x266>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a30      	ldr	r2, [pc, #192]	; (8002e48 <UART_SetConfig+0x2c8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d12a      	bne.n	8002de0 <UART_SetConfig+0x260>
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <UART_SetConfig+0x2d0>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d98:	d01a      	beq.n	8002dd0 <UART_SetConfig+0x250>
 8002d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d9e:	d81b      	bhi.n	8002dd8 <UART_SetConfig+0x258>
 8002da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da4:	d00c      	beq.n	8002dc0 <UART_SetConfig+0x240>
 8002da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002daa:	d815      	bhi.n	8002dd8 <UART_SetConfig+0x258>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <UART_SetConfig+0x238>
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db4:	d008      	beq.n	8002dc8 <UART_SetConfig+0x248>
 8002db6:	e00f      	b.n	8002dd8 <UART_SetConfig+0x258>
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e012      	b.n	8002de6 <UART_SetConfig+0x266>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e00e      	b.n	8002de6 <UART_SetConfig+0x266>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dce:	e00a      	b.n	8002de6 <UART_SetConfig+0x266>
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e006      	b.n	8002de6 <UART_SetConfig+0x266>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dde:	e002      	b.n	8002de6 <UART_SetConfig+0x266>
 8002de0:	2310      	movs	r3, #16
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <UART_SetConfig+0x2c8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	f040 808b 	bne.w	8002f08 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d834      	bhi.n	8002e64 <UART_SetConfig+0x2e4>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <UART_SetConfig+0x280>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e65 	.word	0x08002e65
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	08002e65 	.word	0x08002e65
 8002e10:	08002e33 	.word	0x08002e33
 8002e14:	08002e65 	.word	0x08002e65
 8002e18:	08002e65 	.word	0x08002e65
 8002e1c:	08002e65 	.word	0x08002e65
 8002e20:	08002e3b 	.word	0x08002e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e24:	f7ff f920 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002e28:	61f8      	str	r0, [r7, #28]
        break;
 8002e2a:	e021      	b.n	8002e70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <UART_SetConfig+0x2e0>)
 8002e2e:	61fb      	str	r3, [r7, #28]
        break;
 8002e30:	e01e      	b.n	8002e70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e32:	f7ff f881 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8002e36:	61f8      	str	r0, [r7, #28]
        break;
 8002e38:	e01a      	b.n	8002e70 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3e:	61fb      	str	r3, [r7, #28]
        break;
 8002e40:	e016      	b.n	8002e70 <UART_SetConfig+0x2f0>
 8002e42:	bf00      	nop
 8002e44:	efff69f3 	.word	0xefff69f3
 8002e48:	40008000 	.word	0x40008000
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40004400 	.word	0x40004400
 8002e58:	40004800 	.word	0x40004800
 8002e5c:	40004c00 	.word	0x40004c00
 8002e60:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80fa 	beq.w	800306c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d305      	bcc.n	8002e94 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d903      	bls.n	8002e9c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e9a:	e0e7      	b.n	800306c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	4615      	mov	r5, r2
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	022b      	lsls	r3, r5, #8
 8002eae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002eb2:	0222      	lsls	r2, r4, #8
 8002eb4:	68f9      	ldr	r1, [r7, #12]
 8002eb6:	6849      	ldr	r1, [r1, #4]
 8002eb8:	0849      	lsrs	r1, r1, #1
 8002eba:	2000      	movs	r0, #0
 8002ebc:	4688      	mov	r8, r1
 8002ebe:	4681      	mov	r9, r0
 8002ec0:	eb12 0a08 	adds.w	sl, r2, r8
 8002ec4:	eb43 0b09 	adc.w	fp, r3, r9
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ed6:	4650      	mov	r0, sl
 8002ed8:	4659      	mov	r1, fp
 8002eda:	f7fd f9d9 	bl	8000290 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eec:	d308      	bcc.n	8002f00 <UART_SetConfig+0x380>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef4:	d204      	bcs.n	8002f00 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	e0b5      	b.n	800306c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f06:	e0b1      	b.n	800306c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f10:	d15d      	bne.n	8002fce <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d827      	bhi.n	8002f6a <UART_SetConfig+0x3ea>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x3a0>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f55 	.word	0x08002f55
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f5b 	.word	0x08002f5b
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f6b 	.word	0x08002f6b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff f890 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002f48:	61f8      	str	r0, [r7, #28]
        break;
 8002f4a:	e014      	b.n	8002f76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7ff f8a2 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 8002f50:	61f8      	str	r0, [r7, #28]
        break;
 8002f52:	e010      	b.n	8002f76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <UART_SetConfig+0x508>)
 8002f56:	61fb      	str	r3, [r7, #28]
        break;
 8002f58:	e00d      	b.n	8002f76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7fe ffed 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61f8      	str	r0, [r7, #28]
        break;
 8002f60:	e009      	b.n	8002f76 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	61fb      	str	r3, [r7, #28]
        break;
 8002f68:	e005      	b.n	8002f76 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d077      	beq.n	800306c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005a      	lsls	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	441a      	add	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d916      	bls.n	8002fc6 <UART_SetConfig+0x446>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9e:	d212      	bcs.n	8002fc6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f023 030f 	bic.w	r3, r3, #15
 8002fa8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	8afb      	ldrh	r3, [r7, #22]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	8afa      	ldrh	r2, [r7, #22]
 8002fc2:	60da      	str	r2, [r3, #12]
 8002fc4:	e052      	b.n	800306c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fcc:	e04e      	b.n	800306c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d827      	bhi.n	8003026 <UART_SetConfig+0x4a6>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x45c>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003009 	.word	0x08003009
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	08003027 	.word	0x08003027
 8002fec:	08003017 	.word	0x08003017
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	08003027 	.word	0x08003027
 8002ff8:	08003027 	.word	0x08003027
 8002ffc:	0800301f 	.word	0x0800301f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003000:	f7ff f832 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8003004:	61f8      	str	r0, [r7, #28]
        break;
 8003006:	e014      	b.n	8003032 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7ff f844 	bl	8002094 <HAL_RCC_GetPCLK2Freq>
 800300c:	61f8      	str	r0, [r7, #28]
        break;
 800300e:	e010      	b.n	8003032 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <UART_SetConfig+0x508>)
 8003012:	61fb      	str	r3, [r7, #28]
        break;
 8003014:	e00d      	b.n	8003032 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003016:	f7fe ff8f 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 800301a:	61f8      	str	r0, [r7, #28]
        break;
 800301c:	e009      	b.n	8003032 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003022:	61fb      	str	r3, [r7, #28]
        break;
 8003024:	e005      	b.n	8003032 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003030:	bf00      	nop
    }

    if (pclk != 0U)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d019      	beq.n	800306c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	085a      	lsrs	r2, r3, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	441a      	add	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	d909      	bls.n	8003066 <UART_SetConfig+0x4e6>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d205      	bcs.n	8003066 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	e002      	b.n	800306c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003078:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003086:	bf00      	nop
 8003088:	00f42400 	.word	0x00f42400

0800308c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318a:	d10a      	bne.n	80031a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b098      	sub	sp, #96	; 0x60
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e0:	f7fd fe8a 	bl	8000ef8 <HAL_GetTick>
 80031e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d12e      	bne.n	8003252 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031fc:	2200      	movs	r2, #0
 80031fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f88c 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800321c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	653b      	str	r3, [r7, #80]	; 0x50
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	647b      	str	r3, [r7, #68]	; 0x44
 800322e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800323a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e062      	b.n	8003318 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d149      	bne.n	80032f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f856 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03c      	beq.n	80032f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	623b      	str	r3, [r7, #32]
   return(result);
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
 800329a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e6      	bne.n	800327a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3308      	adds	r3, #8
 80032ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	617b      	str	r3, [r7, #20]
   return(result);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e011      	b.n	8003318 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3758      	adds	r7, #88	; 0x58
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	e04f      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d04b      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7fd fddd 	bl	8000ef8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <UART_WaitOnFlagUntilTimeout+0x30>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e04e      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d037      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	d034      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d031      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b08      	cmp	r3, #8
 800337a:	d110      	bne.n	800339e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2208      	movs	r2, #8
 8003382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f838 	bl	80033fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2208      	movs	r2, #8
 800338e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e029      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d111      	bne.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f81e 	bl	80033fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e00f      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d0a0      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b095      	sub	sp, #84	; 0x54
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003420:	643b      	str	r3, [r7, #64]	; 0x40
 8003422:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e6      	bne.n	8003402 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3308      	adds	r3, #8
 800343a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	61fb      	str	r3, [r7, #28]
   return(result);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3308      	adds	r3, #8
 8003452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800345a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	2b01      	cmp	r3, #1
 800346e:	d118      	bne.n	80034a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	60bb      	str	r3, [r7, #8]
   return(result);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f023 0310 	bic.w	r3, r3, #16
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6979      	ldr	r1, [r7, #20]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	613b      	str	r3, [r7, #16]
   return(result);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e6      	bne.n	8003470 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034b6:	bf00      	nop
 80034b8:	3754      	adds	r7, #84	; 0x54
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <siprintf>:
 80034c4:	b40e      	push	{r1, r2, r3}
 80034c6:	b500      	push	{lr}
 80034c8:	b09c      	sub	sp, #112	; 0x70
 80034ca:	ab1d      	add	r3, sp, #116	; 0x74
 80034cc:	9002      	str	r0, [sp, #8]
 80034ce:	9006      	str	r0, [sp, #24]
 80034d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034d4:	4809      	ldr	r0, [pc, #36]	; (80034fc <siprintf+0x38>)
 80034d6:	9107      	str	r1, [sp, #28]
 80034d8:	9104      	str	r1, [sp, #16]
 80034da:	4909      	ldr	r1, [pc, #36]	; (8003500 <siprintf+0x3c>)
 80034dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034e0:	9105      	str	r1, [sp, #20]
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	a902      	add	r1, sp, #8
 80034e8:	f000 f9b6 	bl	8003858 <_svfiprintf_r>
 80034ec:	9b02      	ldr	r3, [sp, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	b01c      	add	sp, #112	; 0x70
 80034f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034f8:	b003      	add	sp, #12
 80034fa:	4770      	bx	lr
 80034fc:	20000058 	.word	0x20000058
 8003500:	ffff0208 	.word	0xffff0208

08003504 <memset>:
 8003504:	4402      	add	r2, r0
 8003506:	4603      	mov	r3, r0
 8003508:	4293      	cmp	r3, r2
 800350a:	d100      	bne.n	800350e <memset+0xa>
 800350c:	4770      	bx	lr
 800350e:	f803 1b01 	strb.w	r1, [r3], #1
 8003512:	e7f9      	b.n	8003508 <memset+0x4>

08003514 <strchr>:
 8003514:	b2c9      	uxtb	r1, r1
 8003516:	4603      	mov	r3, r0
 8003518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800351c:	b11a      	cbz	r2, 8003526 <strchr+0x12>
 800351e:	428a      	cmp	r2, r1
 8003520:	d1f9      	bne.n	8003516 <strchr+0x2>
 8003522:	4618      	mov	r0, r3
 8003524:	4770      	bx	lr
 8003526:	2900      	cmp	r1, #0
 8003528:	bf18      	it	ne
 800352a:	2300      	movne	r3, #0
 800352c:	e7f9      	b.n	8003522 <strchr+0xe>

0800352e <strstr>:
 800352e:	780a      	ldrb	r2, [r1, #0]
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	b96a      	cbnz	r2, 8003550 <strstr+0x22>
 8003534:	bd70      	pop	{r4, r5, r6, pc}
 8003536:	429a      	cmp	r2, r3
 8003538:	d109      	bne.n	800354e <strstr+0x20>
 800353a:	460c      	mov	r4, r1
 800353c:	4605      	mov	r5, r0
 800353e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f6      	beq.n	8003534 <strstr+0x6>
 8003546:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800354a:	429e      	cmp	r6, r3
 800354c:	d0f7      	beq.n	800353e <strstr+0x10>
 800354e:	3001      	adds	r0, #1
 8003550:	7803      	ldrb	r3, [r0, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <strstr+0x8>
 8003556:	4618      	mov	r0, r3
 8003558:	e7ec      	b.n	8003534 <strstr+0x6>
	...

0800355c <__errno>:
 800355c:	4b01      	ldr	r3, [pc, #4]	; (8003564 <__errno+0x8>)
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000058 	.word	0x20000058

08003568 <__libc_init_array>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	4d0d      	ldr	r5, [pc, #52]	; (80035a0 <__libc_init_array+0x38>)
 800356c:	4c0d      	ldr	r4, [pc, #52]	; (80035a4 <__libc_init_array+0x3c>)
 800356e:	1b64      	subs	r4, r4, r5
 8003570:	10a4      	asrs	r4, r4, #2
 8003572:	2600      	movs	r6, #0
 8003574:	42a6      	cmp	r6, r4
 8003576:	d109      	bne.n	800358c <__libc_init_array+0x24>
 8003578:	4d0b      	ldr	r5, [pc, #44]	; (80035a8 <__libc_init_array+0x40>)
 800357a:	4c0c      	ldr	r4, [pc, #48]	; (80035ac <__libc_init_array+0x44>)
 800357c:	f000 fc6a 	bl	8003e54 <_init>
 8003580:	1b64      	subs	r4, r4, r5
 8003582:	10a4      	asrs	r4, r4, #2
 8003584:	2600      	movs	r6, #0
 8003586:	42a6      	cmp	r6, r4
 8003588:	d105      	bne.n	8003596 <__libc_init_array+0x2e>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003590:	4798      	blx	r3
 8003592:	3601      	adds	r6, #1
 8003594:	e7ee      	b.n	8003574 <__libc_init_array+0xc>
 8003596:	f855 3b04 	ldr.w	r3, [r5], #4
 800359a:	4798      	blx	r3
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <__libc_init_array+0x1e>
 80035a0:	08003fe4 	.word	0x08003fe4
 80035a4:	08003fe4 	.word	0x08003fe4
 80035a8:	08003fe4 	.word	0x08003fe4
 80035ac:	08003fe8 	.word	0x08003fe8

080035b0 <__retarget_lock_acquire_recursive>:
 80035b0:	4770      	bx	lr

080035b2 <__retarget_lock_release_recursive>:
 80035b2:	4770      	bx	lr

080035b4 <_free_r>:
 80035b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035b6:	2900      	cmp	r1, #0
 80035b8:	d044      	beq.n	8003644 <_free_r+0x90>
 80035ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035be:	9001      	str	r0, [sp, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f1a1 0404 	sub.w	r4, r1, #4
 80035c6:	bfb8      	it	lt
 80035c8:	18e4      	addlt	r4, r4, r3
 80035ca:	f000 f8df 	bl	800378c <__malloc_lock>
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <_free_r+0x94>)
 80035d0:	9801      	ldr	r0, [sp, #4]
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	b933      	cbnz	r3, 80035e4 <_free_r+0x30>
 80035d6:	6063      	str	r3, [r4, #4]
 80035d8:	6014      	str	r4, [r2, #0]
 80035da:	b003      	add	sp, #12
 80035dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035e0:	f000 b8da 	b.w	8003798 <__malloc_unlock>
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	d908      	bls.n	80035fa <_free_r+0x46>
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	1961      	adds	r1, r4, r5
 80035ec:	428b      	cmp	r3, r1
 80035ee:	bf01      	itttt	eq
 80035f0:	6819      	ldreq	r1, [r3, #0]
 80035f2:	685b      	ldreq	r3, [r3, #4]
 80035f4:	1949      	addeq	r1, r1, r5
 80035f6:	6021      	streq	r1, [r4, #0]
 80035f8:	e7ed      	b.n	80035d6 <_free_r+0x22>
 80035fa:	461a      	mov	r2, r3
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b10b      	cbz	r3, 8003604 <_free_r+0x50>
 8003600:	42a3      	cmp	r3, r4
 8003602:	d9fa      	bls.n	80035fa <_free_r+0x46>
 8003604:	6811      	ldr	r1, [r2, #0]
 8003606:	1855      	adds	r5, r2, r1
 8003608:	42a5      	cmp	r5, r4
 800360a:	d10b      	bne.n	8003624 <_free_r+0x70>
 800360c:	6824      	ldr	r4, [r4, #0]
 800360e:	4421      	add	r1, r4
 8003610:	1854      	adds	r4, r2, r1
 8003612:	42a3      	cmp	r3, r4
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	d1e0      	bne.n	80035da <_free_r+0x26>
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	6053      	str	r3, [r2, #4]
 800361e:	440c      	add	r4, r1
 8003620:	6014      	str	r4, [r2, #0]
 8003622:	e7da      	b.n	80035da <_free_r+0x26>
 8003624:	d902      	bls.n	800362c <_free_r+0x78>
 8003626:	230c      	movs	r3, #12
 8003628:	6003      	str	r3, [r0, #0]
 800362a:	e7d6      	b.n	80035da <_free_r+0x26>
 800362c:	6825      	ldr	r5, [r4, #0]
 800362e:	1961      	adds	r1, r4, r5
 8003630:	428b      	cmp	r3, r1
 8003632:	bf04      	itt	eq
 8003634:	6819      	ldreq	r1, [r3, #0]
 8003636:	685b      	ldreq	r3, [r3, #4]
 8003638:	6063      	str	r3, [r4, #4]
 800363a:	bf04      	itt	eq
 800363c:	1949      	addeq	r1, r1, r5
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	6054      	str	r4, [r2, #4]
 8003642:	e7ca      	b.n	80035da <_free_r+0x26>
 8003644:	b003      	add	sp, #12
 8003646:	bd30      	pop	{r4, r5, pc}
 8003648:	200002d0 	.word	0x200002d0

0800364c <sbrk_aligned>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0e      	ldr	r6, [pc, #56]	; (8003688 <sbrk_aligned+0x3c>)
 8003650:	460c      	mov	r4, r1
 8003652:	6831      	ldr	r1, [r6, #0]
 8003654:	4605      	mov	r5, r0
 8003656:	b911      	cbnz	r1, 800365e <sbrk_aligned+0x12>
 8003658:	f000 fba6 	bl	8003da8 <_sbrk_r>
 800365c:	6030      	str	r0, [r6, #0]
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 fba1 	bl	8003da8 <_sbrk_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d00a      	beq.n	8003680 <sbrk_aligned+0x34>
 800366a:	1cc4      	adds	r4, r0, #3
 800366c:	f024 0403 	bic.w	r4, r4, #3
 8003670:	42a0      	cmp	r0, r4
 8003672:	d007      	beq.n	8003684 <sbrk_aligned+0x38>
 8003674:	1a21      	subs	r1, r4, r0
 8003676:	4628      	mov	r0, r5
 8003678:	f000 fb96 	bl	8003da8 <_sbrk_r>
 800367c:	3001      	adds	r0, #1
 800367e:	d101      	bne.n	8003684 <sbrk_aligned+0x38>
 8003680:	f04f 34ff 	mov.w	r4, #4294967295
 8003684:	4620      	mov	r0, r4
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	200002d4 	.word	0x200002d4

0800368c <_malloc_r>:
 800368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003690:	1ccd      	adds	r5, r1, #3
 8003692:	f025 0503 	bic.w	r5, r5, #3
 8003696:	3508      	adds	r5, #8
 8003698:	2d0c      	cmp	r5, #12
 800369a:	bf38      	it	cc
 800369c:	250c      	movcc	r5, #12
 800369e:	2d00      	cmp	r5, #0
 80036a0:	4607      	mov	r7, r0
 80036a2:	db01      	blt.n	80036a8 <_malloc_r+0x1c>
 80036a4:	42a9      	cmp	r1, r5
 80036a6:	d905      	bls.n	80036b4 <_malloc_r+0x28>
 80036a8:	230c      	movs	r3, #12
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	2600      	movs	r6, #0
 80036ae:	4630      	mov	r0, r6
 80036b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003788 <_malloc_r+0xfc>
 80036b8:	f000 f868 	bl	800378c <__malloc_lock>
 80036bc:	f8d8 3000 	ldr.w	r3, [r8]
 80036c0:	461c      	mov	r4, r3
 80036c2:	bb5c      	cbnz	r4, 800371c <_malloc_r+0x90>
 80036c4:	4629      	mov	r1, r5
 80036c6:	4638      	mov	r0, r7
 80036c8:	f7ff ffc0 	bl	800364c <sbrk_aligned>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	4604      	mov	r4, r0
 80036d0:	d155      	bne.n	800377e <_malloc_r+0xf2>
 80036d2:	f8d8 4000 	ldr.w	r4, [r8]
 80036d6:	4626      	mov	r6, r4
 80036d8:	2e00      	cmp	r6, #0
 80036da:	d145      	bne.n	8003768 <_malloc_r+0xdc>
 80036dc:	2c00      	cmp	r4, #0
 80036de:	d048      	beq.n	8003772 <_malloc_r+0xe6>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	4631      	mov	r1, r6
 80036e4:	4638      	mov	r0, r7
 80036e6:	eb04 0903 	add.w	r9, r4, r3
 80036ea:	f000 fb5d 	bl	8003da8 <_sbrk_r>
 80036ee:	4581      	cmp	r9, r0
 80036f0:	d13f      	bne.n	8003772 <_malloc_r+0xe6>
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	1a6d      	subs	r5, r5, r1
 80036f6:	4629      	mov	r1, r5
 80036f8:	4638      	mov	r0, r7
 80036fa:	f7ff ffa7 	bl	800364c <sbrk_aligned>
 80036fe:	3001      	adds	r0, #1
 8003700:	d037      	beq.n	8003772 <_malloc_r+0xe6>
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	442b      	add	r3, r5
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	f8d8 3000 	ldr.w	r3, [r8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d038      	beq.n	8003782 <_malloc_r+0xf6>
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	42a2      	cmp	r2, r4
 8003714:	d12b      	bne.n	800376e <_malloc_r+0xe2>
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e00f      	b.n	800373c <_malloc_r+0xb0>
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	1b52      	subs	r2, r2, r5
 8003720:	d41f      	bmi.n	8003762 <_malloc_r+0xd6>
 8003722:	2a0b      	cmp	r2, #11
 8003724:	d917      	bls.n	8003756 <_malloc_r+0xca>
 8003726:	1961      	adds	r1, r4, r5
 8003728:	42a3      	cmp	r3, r4
 800372a:	6025      	str	r5, [r4, #0]
 800372c:	bf18      	it	ne
 800372e:	6059      	strne	r1, [r3, #4]
 8003730:	6863      	ldr	r3, [r4, #4]
 8003732:	bf08      	it	eq
 8003734:	f8c8 1000 	streq.w	r1, [r8]
 8003738:	5162      	str	r2, [r4, r5]
 800373a:	604b      	str	r3, [r1, #4]
 800373c:	4638      	mov	r0, r7
 800373e:	f104 060b 	add.w	r6, r4, #11
 8003742:	f000 f829 	bl	8003798 <__malloc_unlock>
 8003746:	f026 0607 	bic.w	r6, r6, #7
 800374a:	1d23      	adds	r3, r4, #4
 800374c:	1af2      	subs	r2, r6, r3
 800374e:	d0ae      	beq.n	80036ae <_malloc_r+0x22>
 8003750:	1b9b      	subs	r3, r3, r6
 8003752:	50a3      	str	r3, [r4, r2]
 8003754:	e7ab      	b.n	80036ae <_malloc_r+0x22>
 8003756:	42a3      	cmp	r3, r4
 8003758:	6862      	ldr	r2, [r4, #4]
 800375a:	d1dd      	bne.n	8003718 <_malloc_r+0x8c>
 800375c:	f8c8 2000 	str.w	r2, [r8]
 8003760:	e7ec      	b.n	800373c <_malloc_r+0xb0>
 8003762:	4623      	mov	r3, r4
 8003764:	6864      	ldr	r4, [r4, #4]
 8003766:	e7ac      	b.n	80036c2 <_malloc_r+0x36>
 8003768:	4634      	mov	r4, r6
 800376a:	6876      	ldr	r6, [r6, #4]
 800376c:	e7b4      	b.n	80036d8 <_malloc_r+0x4c>
 800376e:	4613      	mov	r3, r2
 8003770:	e7cc      	b.n	800370c <_malloc_r+0x80>
 8003772:	230c      	movs	r3, #12
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4638      	mov	r0, r7
 8003778:	f000 f80e 	bl	8003798 <__malloc_unlock>
 800377c:	e797      	b.n	80036ae <_malloc_r+0x22>
 800377e:	6025      	str	r5, [r4, #0]
 8003780:	e7dc      	b.n	800373c <_malloc_r+0xb0>
 8003782:	605b      	str	r3, [r3, #4]
 8003784:	deff      	udf	#255	; 0xff
 8003786:	bf00      	nop
 8003788:	200002d0 	.word	0x200002d0

0800378c <__malloc_lock>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__malloc_lock+0x8>)
 800378e:	f7ff bf0f 	b.w	80035b0 <__retarget_lock_acquire_recursive>
 8003792:	bf00      	nop
 8003794:	200002cc 	.word	0x200002cc

08003798 <__malloc_unlock>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__malloc_unlock+0x8>)
 800379a:	f7ff bf0a 	b.w	80035b2 <__retarget_lock_release_recursive>
 800379e:	bf00      	nop
 80037a0:	200002cc 	.word	0x200002cc

080037a4 <__ssputs_r>:
 80037a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	688e      	ldr	r6, [r1, #8]
 80037aa:	461f      	mov	r7, r3
 80037ac:	42be      	cmp	r6, r7
 80037ae:	680b      	ldr	r3, [r1, #0]
 80037b0:	4682      	mov	sl, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	4690      	mov	r8, r2
 80037b6:	d82c      	bhi.n	8003812 <__ssputs_r+0x6e>
 80037b8:	898a      	ldrh	r2, [r1, #12]
 80037ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037be:	d026      	beq.n	800380e <__ssputs_r+0x6a>
 80037c0:	6965      	ldr	r5, [r4, #20]
 80037c2:	6909      	ldr	r1, [r1, #16]
 80037c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037c8:	eba3 0901 	sub.w	r9, r3, r1
 80037cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037d0:	1c7b      	adds	r3, r7, #1
 80037d2:	444b      	add	r3, r9
 80037d4:	106d      	asrs	r5, r5, #1
 80037d6:	429d      	cmp	r5, r3
 80037d8:	bf38      	it	cc
 80037da:	461d      	movcc	r5, r3
 80037dc:	0553      	lsls	r3, r2, #21
 80037de:	d527      	bpl.n	8003830 <__ssputs_r+0x8c>
 80037e0:	4629      	mov	r1, r5
 80037e2:	f7ff ff53 	bl	800368c <_malloc_r>
 80037e6:	4606      	mov	r6, r0
 80037e8:	b360      	cbz	r0, 8003844 <__ssputs_r+0xa0>
 80037ea:	6921      	ldr	r1, [r4, #16]
 80037ec:	464a      	mov	r2, r9
 80037ee:	f000 faeb 	bl	8003dc8 <memcpy>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	81a3      	strh	r3, [r4, #12]
 80037fe:	6126      	str	r6, [r4, #16]
 8003800:	6165      	str	r5, [r4, #20]
 8003802:	444e      	add	r6, r9
 8003804:	eba5 0509 	sub.w	r5, r5, r9
 8003808:	6026      	str	r6, [r4, #0]
 800380a:	60a5      	str	r5, [r4, #8]
 800380c:	463e      	mov	r6, r7
 800380e:	42be      	cmp	r6, r7
 8003810:	d900      	bls.n	8003814 <__ssputs_r+0x70>
 8003812:	463e      	mov	r6, r7
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	4632      	mov	r2, r6
 8003818:	4641      	mov	r1, r8
 800381a:	f000 faab 	bl	8003d74 <memmove>
 800381e:	68a3      	ldr	r3, [r4, #8]
 8003820:	1b9b      	subs	r3, r3, r6
 8003822:	60a3      	str	r3, [r4, #8]
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	4433      	add	r3, r6
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	2000      	movs	r0, #0
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	462a      	mov	r2, r5
 8003832:	f000 fad7 	bl	8003de4 <_realloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	2800      	cmp	r0, #0
 800383a:	d1e0      	bne.n	80037fe <__ssputs_r+0x5a>
 800383c:	6921      	ldr	r1, [r4, #16]
 800383e:	4650      	mov	r0, sl
 8003840:	f7ff feb8 	bl	80035b4 <_free_r>
 8003844:	230c      	movs	r3, #12
 8003846:	f8ca 3000 	str.w	r3, [sl]
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003850:	81a3      	strh	r3, [r4, #12]
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	e7e9      	b.n	800382c <__ssputs_r+0x88>

08003858 <_svfiprintf_r>:
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	4698      	mov	r8, r3
 800385e:	898b      	ldrh	r3, [r1, #12]
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	b09d      	sub	sp, #116	; 0x74
 8003864:	4607      	mov	r7, r0
 8003866:	460d      	mov	r5, r1
 8003868:	4614      	mov	r4, r2
 800386a:	d50e      	bpl.n	800388a <_svfiprintf_r+0x32>
 800386c:	690b      	ldr	r3, [r1, #16]
 800386e:	b963      	cbnz	r3, 800388a <_svfiprintf_r+0x32>
 8003870:	2140      	movs	r1, #64	; 0x40
 8003872:	f7ff ff0b 	bl	800368c <_malloc_r>
 8003876:	6028      	str	r0, [r5, #0]
 8003878:	6128      	str	r0, [r5, #16]
 800387a:	b920      	cbnz	r0, 8003886 <_svfiprintf_r+0x2e>
 800387c:	230c      	movs	r3, #12
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	e0d0      	b.n	8003a28 <_svfiprintf_r+0x1d0>
 8003886:	2340      	movs	r3, #64	; 0x40
 8003888:	616b      	str	r3, [r5, #20]
 800388a:	2300      	movs	r3, #0
 800388c:	9309      	str	r3, [sp, #36]	; 0x24
 800388e:	2320      	movs	r3, #32
 8003890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003894:	f8cd 800c 	str.w	r8, [sp, #12]
 8003898:	2330      	movs	r3, #48	; 0x30
 800389a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a40 <_svfiprintf_r+0x1e8>
 800389e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038a2:	f04f 0901 	mov.w	r9, #1
 80038a6:	4623      	mov	r3, r4
 80038a8:	469a      	mov	sl, r3
 80038aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ae:	b10a      	cbz	r2, 80038b4 <_svfiprintf_r+0x5c>
 80038b0:	2a25      	cmp	r2, #37	; 0x25
 80038b2:	d1f9      	bne.n	80038a8 <_svfiprintf_r+0x50>
 80038b4:	ebba 0b04 	subs.w	fp, sl, r4
 80038b8:	d00b      	beq.n	80038d2 <_svfiprintf_r+0x7a>
 80038ba:	465b      	mov	r3, fp
 80038bc:	4622      	mov	r2, r4
 80038be:	4629      	mov	r1, r5
 80038c0:	4638      	mov	r0, r7
 80038c2:	f7ff ff6f 	bl	80037a4 <__ssputs_r>
 80038c6:	3001      	adds	r0, #1
 80038c8:	f000 80a9 	beq.w	8003a1e <_svfiprintf_r+0x1c6>
 80038cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ce:	445a      	add	r2, fp
 80038d0:	9209      	str	r2, [sp, #36]	; 0x24
 80038d2:	f89a 3000 	ldrb.w	r3, [sl]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80a1 	beq.w	8003a1e <_svfiprintf_r+0x1c6>
 80038dc:	2300      	movs	r3, #0
 80038de:	f04f 32ff 	mov.w	r2, #4294967295
 80038e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038e6:	f10a 0a01 	add.w	sl, sl, #1
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	9307      	str	r3, [sp, #28]
 80038ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038f2:	931a      	str	r3, [sp, #104]	; 0x68
 80038f4:	4654      	mov	r4, sl
 80038f6:	2205      	movs	r2, #5
 80038f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038fc:	4850      	ldr	r0, [pc, #320]	; (8003a40 <_svfiprintf_r+0x1e8>)
 80038fe:	f7fc fc77 	bl	80001f0 <memchr>
 8003902:	9a04      	ldr	r2, [sp, #16]
 8003904:	b9d8      	cbnz	r0, 800393e <_svfiprintf_r+0xe6>
 8003906:	06d0      	lsls	r0, r2, #27
 8003908:	bf44      	itt	mi
 800390a:	2320      	movmi	r3, #32
 800390c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003910:	0711      	lsls	r1, r2, #28
 8003912:	bf44      	itt	mi
 8003914:	232b      	movmi	r3, #43	; 0x2b
 8003916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800391a:	f89a 3000 	ldrb.w	r3, [sl]
 800391e:	2b2a      	cmp	r3, #42	; 0x2a
 8003920:	d015      	beq.n	800394e <_svfiprintf_r+0xf6>
 8003922:	9a07      	ldr	r2, [sp, #28]
 8003924:	4654      	mov	r4, sl
 8003926:	2000      	movs	r0, #0
 8003928:	f04f 0c0a 	mov.w	ip, #10
 800392c:	4621      	mov	r1, r4
 800392e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003932:	3b30      	subs	r3, #48	; 0x30
 8003934:	2b09      	cmp	r3, #9
 8003936:	d94d      	bls.n	80039d4 <_svfiprintf_r+0x17c>
 8003938:	b1b0      	cbz	r0, 8003968 <_svfiprintf_r+0x110>
 800393a:	9207      	str	r2, [sp, #28]
 800393c:	e014      	b.n	8003968 <_svfiprintf_r+0x110>
 800393e:	eba0 0308 	sub.w	r3, r0, r8
 8003942:	fa09 f303 	lsl.w	r3, r9, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	9304      	str	r3, [sp, #16]
 800394a:	46a2      	mov	sl, r4
 800394c:	e7d2      	b.n	80038f4 <_svfiprintf_r+0x9c>
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	1d19      	adds	r1, r3, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	9103      	str	r1, [sp, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	bfbb      	ittet	lt
 800395a:	425b      	neglt	r3, r3
 800395c:	f042 0202 	orrlt.w	r2, r2, #2
 8003960:	9307      	strge	r3, [sp, #28]
 8003962:	9307      	strlt	r3, [sp, #28]
 8003964:	bfb8      	it	lt
 8003966:	9204      	strlt	r2, [sp, #16]
 8003968:	7823      	ldrb	r3, [r4, #0]
 800396a:	2b2e      	cmp	r3, #46	; 0x2e
 800396c:	d10c      	bne.n	8003988 <_svfiprintf_r+0x130>
 800396e:	7863      	ldrb	r3, [r4, #1]
 8003970:	2b2a      	cmp	r3, #42	; 0x2a
 8003972:	d134      	bne.n	80039de <_svfiprintf_r+0x186>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	1d1a      	adds	r2, r3, #4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	bfb8      	it	lt
 8003980:	f04f 33ff 	movlt.w	r3, #4294967295
 8003984:	3402      	adds	r4, #2
 8003986:	9305      	str	r3, [sp, #20]
 8003988:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003a50 <_svfiprintf_r+0x1f8>
 800398c:	7821      	ldrb	r1, [r4, #0]
 800398e:	2203      	movs	r2, #3
 8003990:	4650      	mov	r0, sl
 8003992:	f7fc fc2d 	bl	80001f0 <memchr>
 8003996:	b138      	cbz	r0, 80039a8 <_svfiprintf_r+0x150>
 8003998:	9b04      	ldr	r3, [sp, #16]
 800399a:	eba0 000a 	sub.w	r0, r0, sl
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	4082      	lsls	r2, r0
 80039a2:	4313      	orrs	r3, r2
 80039a4:	3401      	adds	r4, #1
 80039a6:	9304      	str	r3, [sp, #16]
 80039a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ac:	4825      	ldr	r0, [pc, #148]	; (8003a44 <_svfiprintf_r+0x1ec>)
 80039ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039b2:	2206      	movs	r2, #6
 80039b4:	f7fc fc1c 	bl	80001f0 <memchr>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d038      	beq.n	8003a2e <_svfiprintf_r+0x1d6>
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <_svfiprintf_r+0x1f0>)
 80039be:	bb1b      	cbnz	r3, 8003a08 <_svfiprintf_r+0x1b0>
 80039c0:	9b03      	ldr	r3, [sp, #12]
 80039c2:	3307      	adds	r3, #7
 80039c4:	f023 0307 	bic.w	r3, r3, #7
 80039c8:	3308      	adds	r3, #8
 80039ca:	9303      	str	r3, [sp, #12]
 80039cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ce:	4433      	add	r3, r6
 80039d0:	9309      	str	r3, [sp, #36]	; 0x24
 80039d2:	e768      	b.n	80038a6 <_svfiprintf_r+0x4e>
 80039d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80039d8:	460c      	mov	r4, r1
 80039da:	2001      	movs	r0, #1
 80039dc:	e7a6      	b.n	800392c <_svfiprintf_r+0xd4>
 80039de:	2300      	movs	r3, #0
 80039e0:	3401      	adds	r4, #1
 80039e2:	9305      	str	r3, [sp, #20]
 80039e4:	4619      	mov	r1, r3
 80039e6:	f04f 0c0a 	mov.w	ip, #10
 80039ea:	4620      	mov	r0, r4
 80039ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039f0:	3a30      	subs	r2, #48	; 0x30
 80039f2:	2a09      	cmp	r2, #9
 80039f4:	d903      	bls.n	80039fe <_svfiprintf_r+0x1a6>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0c6      	beq.n	8003988 <_svfiprintf_r+0x130>
 80039fa:	9105      	str	r1, [sp, #20]
 80039fc:	e7c4      	b.n	8003988 <_svfiprintf_r+0x130>
 80039fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a02:	4604      	mov	r4, r0
 8003a04:	2301      	movs	r3, #1
 8003a06:	e7f0      	b.n	80039ea <_svfiprintf_r+0x192>
 8003a08:	ab03      	add	r3, sp, #12
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	462a      	mov	r2, r5
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <_svfiprintf_r+0x1f4>)
 8003a10:	a904      	add	r1, sp, #16
 8003a12:	4638      	mov	r0, r7
 8003a14:	f3af 8000 	nop.w
 8003a18:	1c42      	adds	r2, r0, #1
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	d1d6      	bne.n	80039cc <_svfiprintf_r+0x174>
 8003a1e:	89ab      	ldrh	r3, [r5, #12]
 8003a20:	065b      	lsls	r3, r3, #25
 8003a22:	f53f af2d 	bmi.w	8003880 <_svfiprintf_r+0x28>
 8003a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a28:	b01d      	add	sp, #116	; 0x74
 8003a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2e:	ab03      	add	r3, sp, #12
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	462a      	mov	r2, r5
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <_svfiprintf_r+0x1f4>)
 8003a36:	a904      	add	r1, sp, #16
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f000 f879 	bl	8003b30 <_printf_i>
 8003a3e:	e7eb      	b.n	8003a18 <_svfiprintf_r+0x1c0>
 8003a40:	08003fa8 	.word	0x08003fa8
 8003a44:	08003fb2 	.word	0x08003fb2
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	080037a5 	.word	0x080037a5
 8003a50:	08003fae 	.word	0x08003fae

08003a54 <_printf_common>:
 8003a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a58:	4616      	mov	r6, r2
 8003a5a:	4699      	mov	r9, r3
 8003a5c:	688a      	ldr	r2, [r1, #8]
 8003a5e:	690b      	ldr	r3, [r1, #16]
 8003a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a64:	4293      	cmp	r3, r2
 8003a66:	bfb8      	it	lt
 8003a68:	4613      	movlt	r3, r2
 8003a6a:	6033      	str	r3, [r6, #0]
 8003a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a70:	4607      	mov	r7, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	b10a      	cbz	r2, 8003a7a <_printf_common+0x26>
 8003a76:	3301      	adds	r3, #1
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	0699      	lsls	r1, r3, #26
 8003a7e:	bf42      	ittt	mi
 8003a80:	6833      	ldrmi	r3, [r6, #0]
 8003a82:	3302      	addmi	r3, #2
 8003a84:	6033      	strmi	r3, [r6, #0]
 8003a86:	6825      	ldr	r5, [r4, #0]
 8003a88:	f015 0506 	ands.w	r5, r5, #6
 8003a8c:	d106      	bne.n	8003a9c <_printf_common+0x48>
 8003a8e:	f104 0a19 	add.w	sl, r4, #25
 8003a92:	68e3      	ldr	r3, [r4, #12]
 8003a94:	6832      	ldr	r2, [r6, #0]
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	42ab      	cmp	r3, r5
 8003a9a:	dc26      	bgt.n	8003aea <_printf_common+0x96>
 8003a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aa0:	1e13      	subs	r3, r2, #0
 8003aa2:	6822      	ldr	r2, [r4, #0]
 8003aa4:	bf18      	it	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	0692      	lsls	r2, r2, #26
 8003aaa:	d42b      	bmi.n	8003b04 <_printf_common+0xb0>
 8003aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	4638      	mov	r0, r7
 8003ab4:	47c0      	blx	r8
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d01e      	beq.n	8003af8 <_printf_common+0xa4>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	6922      	ldr	r2, [r4, #16]
 8003abe:	f003 0306 	and.w	r3, r3, #6
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	bf02      	ittt	eq
 8003ac6:	68e5      	ldreq	r5, [r4, #12]
 8003ac8:	6833      	ldreq	r3, [r6, #0]
 8003aca:	1aed      	subeq	r5, r5, r3
 8003acc:	68a3      	ldr	r3, [r4, #8]
 8003ace:	bf0c      	ite	eq
 8003ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad4:	2500      	movne	r5, #0
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	bfc4      	itt	gt
 8003ada:	1a9b      	subgt	r3, r3, r2
 8003adc:	18ed      	addgt	r5, r5, r3
 8003ade:	2600      	movs	r6, #0
 8003ae0:	341a      	adds	r4, #26
 8003ae2:	42b5      	cmp	r5, r6
 8003ae4:	d11a      	bne.n	8003b1c <_printf_common+0xc8>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e008      	b.n	8003afc <_printf_common+0xa8>
 8003aea:	2301      	movs	r3, #1
 8003aec:	4652      	mov	r2, sl
 8003aee:	4649      	mov	r1, r9
 8003af0:	4638      	mov	r0, r7
 8003af2:	47c0      	blx	r8
 8003af4:	3001      	adds	r0, #1
 8003af6:	d103      	bne.n	8003b00 <_printf_common+0xac>
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7c6      	b.n	8003a92 <_printf_common+0x3e>
 8003b04:	18e1      	adds	r1, r4, r3
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	2030      	movs	r0, #48	; 0x30
 8003b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b0e:	4422      	add	r2, r4
 8003b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b18:	3302      	adds	r3, #2
 8003b1a:	e7c7      	b.n	8003aac <_printf_common+0x58>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4622      	mov	r2, r4
 8003b20:	4649      	mov	r1, r9
 8003b22:	4638      	mov	r0, r7
 8003b24:	47c0      	blx	r8
 8003b26:	3001      	adds	r0, #1
 8003b28:	d0e6      	beq.n	8003af8 <_printf_common+0xa4>
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7d9      	b.n	8003ae2 <_printf_common+0x8e>
	...

08003b30 <_printf_i>:
 8003b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	7e0f      	ldrb	r7, [r1, #24]
 8003b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b38:	2f78      	cmp	r7, #120	; 0x78
 8003b3a:	4691      	mov	r9, r2
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	469a      	mov	sl, r3
 8003b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b46:	d807      	bhi.n	8003b58 <_printf_i+0x28>
 8003b48:	2f62      	cmp	r7, #98	; 0x62
 8003b4a:	d80a      	bhi.n	8003b62 <_printf_i+0x32>
 8003b4c:	2f00      	cmp	r7, #0
 8003b4e:	f000 80d4 	beq.w	8003cfa <_printf_i+0x1ca>
 8003b52:	2f58      	cmp	r7, #88	; 0x58
 8003b54:	f000 80c0 	beq.w	8003cd8 <_printf_i+0x1a8>
 8003b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b60:	e03a      	b.n	8003bd8 <_printf_i+0xa8>
 8003b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b66:	2b15      	cmp	r3, #21
 8003b68:	d8f6      	bhi.n	8003b58 <_printf_i+0x28>
 8003b6a:	a101      	add	r1, pc, #4	; (adr r1, 8003b70 <_printf_i+0x40>)
 8003b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b70:	08003bc9 	.word	0x08003bc9
 8003b74:	08003bdd 	.word	0x08003bdd
 8003b78:	08003b59 	.word	0x08003b59
 8003b7c:	08003b59 	.word	0x08003b59
 8003b80:	08003b59 	.word	0x08003b59
 8003b84:	08003b59 	.word	0x08003b59
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003b59 	.word	0x08003b59
 8003b90:	08003b59 	.word	0x08003b59
 8003b94:	08003b59 	.word	0x08003b59
 8003b98:	08003b59 	.word	0x08003b59
 8003b9c:	08003ce1 	.word	0x08003ce1
 8003ba0:	08003c09 	.word	0x08003c09
 8003ba4:	08003c9b 	.word	0x08003c9b
 8003ba8:	08003b59 	.word	0x08003b59
 8003bac:	08003b59 	.word	0x08003b59
 8003bb0:	08003d03 	.word	0x08003d03
 8003bb4:	08003b59 	.word	0x08003b59
 8003bb8:	08003c09 	.word	0x08003c09
 8003bbc:	08003b59 	.word	0x08003b59
 8003bc0:	08003b59 	.word	0x08003b59
 8003bc4:	08003ca3 	.word	0x08003ca3
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	602a      	str	r2, [r5, #0]
 8003bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e09f      	b.n	8003d1c <_printf_i+0x1ec>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	0607      	lsls	r7, r0, #24
 8003be2:	f103 0104 	add.w	r1, r3, #4
 8003be6:	6029      	str	r1, [r5, #0]
 8003be8:	d501      	bpl.n	8003bee <_printf_i+0xbe>
 8003bea:	681e      	ldr	r6, [r3, #0]
 8003bec:	e003      	b.n	8003bf6 <_printf_i+0xc6>
 8003bee:	0646      	lsls	r6, r0, #25
 8003bf0:	d5fb      	bpl.n	8003bea <_printf_i+0xba>
 8003bf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003bf6:	2e00      	cmp	r6, #0
 8003bf8:	da03      	bge.n	8003c02 <_printf_i+0xd2>
 8003bfa:	232d      	movs	r3, #45	; 0x2d
 8003bfc:	4276      	negs	r6, r6
 8003bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c02:	485a      	ldr	r0, [pc, #360]	; (8003d6c <_printf_i+0x23c>)
 8003c04:	230a      	movs	r3, #10
 8003c06:	e012      	b.n	8003c2e <_printf_i+0xfe>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	1d19      	adds	r1, r3, #4
 8003c0e:	6029      	str	r1, [r5, #0]
 8003c10:	0605      	lsls	r5, r0, #24
 8003c12:	d501      	bpl.n	8003c18 <_printf_i+0xe8>
 8003c14:	681e      	ldr	r6, [r3, #0]
 8003c16:	e002      	b.n	8003c1e <_printf_i+0xee>
 8003c18:	0641      	lsls	r1, r0, #25
 8003c1a:	d5fb      	bpl.n	8003c14 <_printf_i+0xe4>
 8003c1c:	881e      	ldrh	r6, [r3, #0]
 8003c1e:	4853      	ldr	r0, [pc, #332]	; (8003d6c <_printf_i+0x23c>)
 8003c20:	2f6f      	cmp	r7, #111	; 0x6f
 8003c22:	bf0c      	ite	eq
 8003c24:	2308      	moveq	r3, #8
 8003c26:	230a      	movne	r3, #10
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c2e:	6865      	ldr	r5, [r4, #4]
 8003c30:	60a5      	str	r5, [r4, #8]
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	bfa2      	ittt	ge
 8003c36:	6821      	ldrge	r1, [r4, #0]
 8003c38:	f021 0104 	bicge.w	r1, r1, #4
 8003c3c:	6021      	strge	r1, [r4, #0]
 8003c3e:	b90e      	cbnz	r6, 8003c44 <_printf_i+0x114>
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	d04b      	beq.n	8003cdc <_printf_i+0x1ac>
 8003c44:	4615      	mov	r5, r2
 8003c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c4e:	5dc7      	ldrb	r7, [r0, r7]
 8003c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c54:	4637      	mov	r7, r6
 8003c56:	42bb      	cmp	r3, r7
 8003c58:	460e      	mov	r6, r1
 8003c5a:	d9f4      	bls.n	8003c46 <_printf_i+0x116>
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d10b      	bne.n	8003c78 <_printf_i+0x148>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	07de      	lsls	r6, r3, #31
 8003c64:	d508      	bpl.n	8003c78 <_printf_i+0x148>
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	6861      	ldr	r1, [r4, #4]
 8003c6a:	4299      	cmp	r1, r3
 8003c6c:	bfde      	ittt	le
 8003c6e:	2330      	movle	r3, #48	; 0x30
 8003c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c78:	1b52      	subs	r2, r2, r5
 8003c7a:	6122      	str	r2, [r4, #16]
 8003c7c:	f8cd a000 	str.w	sl, [sp]
 8003c80:	464b      	mov	r3, r9
 8003c82:	aa03      	add	r2, sp, #12
 8003c84:	4621      	mov	r1, r4
 8003c86:	4640      	mov	r0, r8
 8003c88:	f7ff fee4 	bl	8003a54 <_printf_common>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d14a      	bne.n	8003d26 <_printf_i+0x1f6>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	b004      	add	sp, #16
 8003c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	f043 0320 	orr.w	r3, r3, #32
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	4833      	ldr	r0, [pc, #204]	; (8003d70 <_printf_i+0x240>)
 8003ca4:	2778      	movs	r7, #120	; 0x78
 8003ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	6829      	ldr	r1, [r5, #0]
 8003cae:	061f      	lsls	r7, r3, #24
 8003cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cb4:	d402      	bmi.n	8003cbc <_printf_i+0x18c>
 8003cb6:	065f      	lsls	r7, r3, #25
 8003cb8:	bf48      	it	mi
 8003cba:	b2b6      	uxthmi	r6, r6
 8003cbc:	07df      	lsls	r7, r3, #31
 8003cbe:	bf48      	it	mi
 8003cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc4:	6029      	str	r1, [r5, #0]
 8003cc6:	bf48      	it	mi
 8003cc8:	6023      	strmi	r3, [r4, #0]
 8003cca:	b91e      	cbnz	r6, 8003cd4 <_printf_i+0x1a4>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	f023 0320 	bic.w	r3, r3, #32
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	e7a7      	b.n	8003c28 <_printf_i+0xf8>
 8003cd8:	4824      	ldr	r0, [pc, #144]	; (8003d6c <_printf_i+0x23c>)
 8003cda:	e7e4      	b.n	8003ca6 <_printf_i+0x176>
 8003cdc:	4615      	mov	r5, r2
 8003cde:	e7bd      	b.n	8003c5c <_printf_i+0x12c>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	6826      	ldr	r6, [r4, #0]
 8003ce4:	6961      	ldr	r1, [r4, #20]
 8003ce6:	1d18      	adds	r0, r3, #4
 8003ce8:	6028      	str	r0, [r5, #0]
 8003cea:	0635      	lsls	r5, r6, #24
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	d501      	bpl.n	8003cf4 <_printf_i+0x1c4>
 8003cf0:	6019      	str	r1, [r3, #0]
 8003cf2:	e002      	b.n	8003cfa <_printf_i+0x1ca>
 8003cf4:	0670      	lsls	r0, r6, #25
 8003cf6:	d5fb      	bpl.n	8003cf0 <_printf_i+0x1c0>
 8003cf8:	8019      	strh	r1, [r3, #0]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6123      	str	r3, [r4, #16]
 8003cfe:	4615      	mov	r5, r2
 8003d00:	e7bc      	b.n	8003c7c <_printf_i+0x14c>
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	1d1a      	adds	r2, r3, #4
 8003d06:	602a      	str	r2, [r5, #0]
 8003d08:	681d      	ldr	r5, [r3, #0]
 8003d0a:	6862      	ldr	r2, [r4, #4]
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f7fc fa6e 	bl	80001f0 <memchr>
 8003d14:	b108      	cbz	r0, 8003d1a <_printf_i+0x1ea>
 8003d16:	1b40      	subs	r0, r0, r5
 8003d18:	6060      	str	r0, [r4, #4]
 8003d1a:	6863      	ldr	r3, [r4, #4]
 8003d1c:	6123      	str	r3, [r4, #16]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d24:	e7aa      	b.n	8003c7c <_printf_i+0x14c>
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	462a      	mov	r2, r5
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	47d0      	blx	sl
 8003d30:	3001      	adds	r0, #1
 8003d32:	d0ad      	beq.n	8003c90 <_printf_i+0x160>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	079b      	lsls	r3, r3, #30
 8003d38:	d413      	bmi.n	8003d62 <_printf_i+0x232>
 8003d3a:	68e0      	ldr	r0, [r4, #12]
 8003d3c:	9b03      	ldr	r3, [sp, #12]
 8003d3e:	4298      	cmp	r0, r3
 8003d40:	bfb8      	it	lt
 8003d42:	4618      	movlt	r0, r3
 8003d44:	e7a6      	b.n	8003c94 <_printf_i+0x164>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4632      	mov	r2, r6
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	47d0      	blx	sl
 8003d50:	3001      	adds	r0, #1
 8003d52:	d09d      	beq.n	8003c90 <_printf_i+0x160>
 8003d54:	3501      	adds	r5, #1
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	9903      	ldr	r1, [sp, #12]
 8003d5a:	1a5b      	subs	r3, r3, r1
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	dcf2      	bgt.n	8003d46 <_printf_i+0x216>
 8003d60:	e7eb      	b.n	8003d3a <_printf_i+0x20a>
 8003d62:	2500      	movs	r5, #0
 8003d64:	f104 0619 	add.w	r6, r4, #25
 8003d68:	e7f5      	b.n	8003d56 <_printf_i+0x226>
 8003d6a:	bf00      	nop
 8003d6c:	08003fb9 	.word	0x08003fb9
 8003d70:	08003fca 	.word	0x08003fca

08003d74 <memmove>:
 8003d74:	4288      	cmp	r0, r1
 8003d76:	b510      	push	{r4, lr}
 8003d78:	eb01 0402 	add.w	r4, r1, r2
 8003d7c:	d902      	bls.n	8003d84 <memmove+0x10>
 8003d7e:	4284      	cmp	r4, r0
 8003d80:	4623      	mov	r3, r4
 8003d82:	d807      	bhi.n	8003d94 <memmove+0x20>
 8003d84:	1e43      	subs	r3, r0, #1
 8003d86:	42a1      	cmp	r1, r4
 8003d88:	d008      	beq.n	8003d9c <memmove+0x28>
 8003d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d92:	e7f8      	b.n	8003d86 <memmove+0x12>
 8003d94:	4402      	add	r2, r0
 8003d96:	4601      	mov	r1, r0
 8003d98:	428a      	cmp	r2, r1
 8003d9a:	d100      	bne.n	8003d9e <memmove+0x2a>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003da6:	e7f7      	b.n	8003d98 <memmove+0x24>

08003da8 <_sbrk_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d06      	ldr	r5, [pc, #24]	; (8003dc4 <_sbrk_r+0x1c>)
 8003dac:	2300      	movs	r3, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	f7fc ffbe 	bl	8000d34 <_sbrk>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_sbrk_r+0x1a>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_sbrk_r+0x1a>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	200002c8 	.word	0x200002c8

08003dc8 <memcpy>:
 8003dc8:	440a      	add	r2, r1
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dd0:	d100      	bne.n	8003dd4 <memcpy+0xc>
 8003dd2:	4770      	bx	lr
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dde:	4291      	cmp	r1, r2
 8003de0:	d1f9      	bne.n	8003dd6 <memcpy+0xe>
 8003de2:	bd10      	pop	{r4, pc}

08003de4 <_realloc_r>:
 8003de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de8:	4680      	mov	r8, r0
 8003dea:	4614      	mov	r4, r2
 8003dec:	460e      	mov	r6, r1
 8003dee:	b921      	cbnz	r1, 8003dfa <_realloc_r+0x16>
 8003df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003df4:	4611      	mov	r1, r2
 8003df6:	f7ff bc49 	b.w	800368c <_malloc_r>
 8003dfa:	b92a      	cbnz	r2, 8003e08 <_realloc_r+0x24>
 8003dfc:	f7ff fbda 	bl	80035b4 <_free_r>
 8003e00:	4625      	mov	r5, r4
 8003e02:	4628      	mov	r0, r5
 8003e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e08:	f000 f81b 	bl	8003e42 <_malloc_usable_size_r>
 8003e0c:	4284      	cmp	r4, r0
 8003e0e:	4607      	mov	r7, r0
 8003e10:	d802      	bhi.n	8003e18 <_realloc_r+0x34>
 8003e12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e16:	d812      	bhi.n	8003e3e <_realloc_r+0x5a>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	f7ff fc36 	bl	800368c <_malloc_r>
 8003e20:	4605      	mov	r5, r0
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d0ed      	beq.n	8003e02 <_realloc_r+0x1e>
 8003e26:	42bc      	cmp	r4, r7
 8003e28:	4622      	mov	r2, r4
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	bf28      	it	cs
 8003e2e:	463a      	movcs	r2, r7
 8003e30:	f7ff ffca 	bl	8003dc8 <memcpy>
 8003e34:	4631      	mov	r1, r6
 8003e36:	4640      	mov	r0, r8
 8003e38:	f7ff fbbc 	bl	80035b4 <_free_r>
 8003e3c:	e7e1      	b.n	8003e02 <_realloc_r+0x1e>
 8003e3e:	4635      	mov	r5, r6
 8003e40:	e7df      	b.n	8003e02 <_realloc_r+0x1e>

08003e42 <_malloc_usable_size_r>:
 8003e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e46:	1f18      	subs	r0, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bfbc      	itt	lt
 8003e4c:	580b      	ldrlt	r3, [r1, r0]
 8003e4e:	18c0      	addlt	r0, r0, r3
 8003e50:	4770      	bx	lr
	...

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
